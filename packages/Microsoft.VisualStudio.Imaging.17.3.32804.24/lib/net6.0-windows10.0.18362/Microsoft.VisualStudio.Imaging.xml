<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Imaging</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Imaging.BitmapLocker">
            <summary>
            Disposable helper class to aid in the Bitmap.LockBits/Bitmap.UnlockBits dance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.BitmapLocker.#ctor(System.Drawing.Bitmap)">
            <summary>
            Locks the bits for the bitmap in ReadOnly mode
            </summary>
            <param name="bitmap">Bitmap to lock</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.BitmapLocker.#ctor(System.Drawing.Bitmap,System.Drawing.Imaging.ImageLockMode)">
            <summary>
            Locks the bits for the bitmap.
            </summary>
            <param name="bitmap">Bitmap to lock</param>
            <param name="mode">Lock mode</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.BitmapLocker.#ctor(System.Drawing.Bitmap,System.Drawing.Imaging.ImageLockMode,System.Drawing.Rectangle)">
            <summary>
            Locks the bits for the bitmap.
            </summary>
            <param name="bitmap">Bitmap to lock</param>
            <param name="mode">Lock mode</param>
            <param name="rect">Rectangle to lock</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.BitmapLocker.Bitmap">
            <summary>
            Bitmap locked by this object
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.BitmapLocker.BitmapData">
            <summary>
            BitmapData for the bitmap locked by this object
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.BitmapSourceDescriptor">
            <summary>
            Represents a SourceDescriptor for an already-loaded BitmapSource.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.BundleCollection`1">
            <summary>
            A collection of resource bundles that supports fast (log(n)) lookup
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.BundleCollection`1._bundles">
            <summary>
            The bundles contained in this collection
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.BundleCollection`1.SerializationVersion">
            <summary>
            The version of the serialization stream.  This should be incremented every time the
            serialization format changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.BundleCollection`1.Serialize(Microsoft.VisualStudio.Utilities.VersionedBinaryWriter)">
            <summary>
            Serializes the object to <paramref name="stream" />
            </summary>
            <param name="writer">The writer to serialize to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.BundleCollection`1.#ctor(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.BundleCollection`1.CreateBundleForSearch(Microsoft.VisualStudio.Imaging.ImageMoniker)">
            <summary>
            A function that can turn an ImageMoniker into a generic bundle suitable for searching.
            </summary>
            <param name="moniker">The moniker to search for</param>
            <returns>The bundle suitable for searching</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.BundleCollection`1.Count">
            <summary>
            The number of bundles in the collection
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.BundleCollection`1.Item(System.Int32)">
            <summary>
            Returns a bundle from the collection
            </summary>
            <param name="index">The zero-based index of the bundle</param>
            <returns>The bundle</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.BundleCollection`1.Contains(Microsoft.VisualStudio.Imaging.ImageMoniker)">
            <summary>
            Indicates whether the collection contains a bundle matching <paramref name="moniker" />
            </summary>
            <param name="moniker">The moniker to search for</param>
            <returns>True if found, false if not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.BundleCollection`1.Contains(`0)">
            <summary>
            Indicates whether the collection contains a bundle matching <paramref name="item" />
            </summary>
            <param name="item">The item to search for</param>
            <returns>True if found, false if not</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Imaging.BundleCollection`1.IndexOf(Microsoft.VisualStudio.Imaging.ImageMoniker)" -->
        <member name="M:Microsoft.VisualStudio.Imaging.BundleCollection`1.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the bundle whose moniker matches <paramref name="item" />
            </summary>
            <param name="item">The item to search for</param>
            <returns>
            If the item is found, the item's zero-based index is returned.
            If the item is not found, the value returned is less than zero and is the bitwise
            complement the next item larger than <paramref name="item" /> (e.g. the index at which
            <paramref name="item" /> should be inserted to maintain a sorted collection).
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.BundleCollection`1.TryGetBundle(Microsoft.VisualStudio.Imaging.ImageMoniker,`0@)">
            <summary>
            Searches for a bundle whose moniker matches <paramref name="moniker" />
            </summary>
            <param name="moniker">The moniker to search for</param>
            <param name="bundle">The bundle that matches <paramref name="moniker" />, or null if no match is found</param>
            <returns>True if a match is found, false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.BundleCollection`1.Insert(`0)">
            <summary>
            Inserts a bundle into the collection
            </summary>
            <param name="item">The bundle to insert</param>
            <returns>The index of the newly inserted bundle</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.BundleCollection`1.InsertRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a group of items into the collection.  Using this method rather than
            calling Insert in a loop makes the runtime complexity of the insertion of N
            items O(N * log(N)) rather than O(N^2 * log(N)).
            </summary>
            <returns>
            A collection of items that could not be inserted because items with matching
            monikers already exist in the collection.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.BundleCollection`1.Remove(Microsoft.VisualStudio.Imaging.ImageMoniker)">
            <summary>
            Removes a bundle from the collection
            </summary>
            <param name="moniker">The moniker of the bundle to remove</param>
            <returns>True if the bundle was removed, false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.CodeMarkerUtilities.BuildRealizedImagePayload(Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes,Microsoft.VisualStudio.Imaging.SourceDescriptor,System.Boolean)">
            <summary>
            Builds the payload for the "tidRealizedImage" code marker template
            </summary>
            <param name="moniker">The moniker</param>
            <param name="attributes">The attributes</param>
            <param name="source">The source</param>
            <param name="canTheme">Indicates whether the image can be themed</param>
            <returns>The payload</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.CodeMarkerUtilities.BuildFetchedImagePayload(Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Builds the payload for the "tidFetchedImage" code marker template
            </summary>
            <param name="moniker">The moniker</param>
            <param name="attributes">The attributes</param>
            <returns>The payload</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.CodeMarkerUtilities.BuildFetchedImagePayload(Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes,System.String)">
            <summary>
            Builds the payload for the "tidRealizedCachedImage" code marker template
            </summary>
            <param name="moniker">The moniker</param>
            <param name="attributes">The attributes</param>
            <returns>The payload</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.CompositeImageBundle">
            <summary>
            Creates an image composed from other ImageMoniker-based images.  One or more layers of images are required.
            
            If a CompositeImageBundle is rendered with a requested theme background, then each individual layer
            is themed as it would normally be (based on its canTheme properties).  If a CompositeImageBundle is rendered
            without a requested theme background, then an opt-out pixel is set if any of the individual layers does
            not support theming.  The individual layer's opt-out pixel is removed during composition.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ContrastEvaluator">
            <summary>
            Utilities for evaluating the contrast of an image against its background.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ContrastEvaluator.#ctor(System.Byte[],System.Int32,System.Int32,Microsoft.VisualStudio.Imaging.SimpleColor,System.Byte,System.Double,System.Double)">
            <param name="pixels">The array of pixel bytes in BGRA32 order</param>
            <param name="width">The width of the image (in pixels, not bytes)</param>
            <param name="height">The height of the image</param>
            <param name="background">The background color</param>
            <param name="minimumContrastEvaluationAlpha">The minimum alpha value for pixels to be considered in contrast evaluation</param>
            <param name="minimumPassingPixelRatio">The minimum ratio of background-adjacent pixels that must meet contrast requirements [0-1]</param>
            <param name="minimumContrastRatio">The minimum contrast ratio a pixel must have to meet contrast requirements [1-infinity]</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ContrastEvaluator.HighlightEdgePixels">
            <summary>
            Makes all background-adjacent pixels pink.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ContrastEvaluator.HighlightLowContrastPixels">
            <summary>
            Makes all background-adjacent pixels that do not meet contrast requirements pink.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ActualDpiConverter">
            <summary>
            Converts a possibly-uninitialized DPI value into a valid DPI.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ActualGrayscaleBiasColorConverter">
            <summary>
            Determines the correct value for the grayscale bias color for a CrispImage
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ActualHighContrastConverter">
            <summary>
            Determines the correct value for whether or not to use high-contrast images.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ActualImageLibraryConverter">
            <summary>
            Converts a possibly-null ImageLibrary into a valid ImageLibrary for image retrieval.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.CrispImageSourceConverter.Convert(Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageMoniker,System.Double,System.Double,System.Windows.Media.Color,System.Boolean,System.Windows.Media.Color,System.Boolean,System.Double,System.Double,System.Boolean,System.Object,System.Globalization.CultureInfo)">
             <remarks>
             The converter binds to and requires the isLibraryInitialized value. It does not actually use it, but it should NOT be removed.
            
             This value is used to cause the converter to rerun after the ImageLibrary has been populated with image data. This
             prevents issues where no images would show up in VS if the UI appeared before the ImageLibrary finished loading image
             data but after the ImageLibrary had been created.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.CrispImageSourceConverter.ValidateDimensions(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Checks the desired logical width and height to make sure that they
            are real numbers, greater than zero, and less than
            CrispImageSourceConverter.LogicalMax.
            </summary>
            <param name="logicalWidth">The desired logical width</param>
            <param name="logicalHeight">The desired logical height</param>
            <param name="logicalMin">The minimum valid logical dimension value</param>
            <param name="logicalMax">The maximum valid logical dimension value</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.Imaging.Dpi.DpiPrescaleImageSourceConverter" -->
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.Imaging.Dpi.DpiPrescaleThemedImageConverter" -->
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.Imaging.Dpi.DpiPrescaleThemedImageSourceConverter" -->
        <member name="M:Microsoft.VisualStudio.Imaging.Converters.ImageMonikerToCrispImageConverter.Convert(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an ImageMoniker into a CrispImage.
            </summary>
            <param name="source">ImageMoniker to convert to a CrispImage</param>
            <param name="parameter">Not used.</param>
            <param name="culture">Not used.</param>
            <returns>CrispImage with the Moniker set.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.InternalImageMonikerConverter">
            <summary>
            Converts an interop ImageMoniker to an internal ImageLibrary ImageMoniker.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.CrispImage">
            <summary>
            An Image class that gets its Source from the image library and renders it crisply at any DPI setting.
            </summary>
            <remarks>
            CrispImage is sealed to prevent initialization problems stemming from the Created event, which can call outside
            the class and could result in derived classes not being initialized yet.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Imaging.CrispImage.Created">
            <summary>
            Raised when an instance of CrispImage is created
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Imaging.CrispImage.DefaultImageLibraryChanged">
            <summary>
            Raised when CrispImage.DefaultImageLibrary is changed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImage.DefaultImageLibraryProperty">
            <summary>
            Exposes a PropertyInfo for the DefaultImageLibrary property so that the static property can be used in PropertyPaths
            for bindings created in code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.CrispImage.DefaultImageLibrary">
            <summary>
            The image library used for CrispImages that don't have their ImageLibrary property set
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.CrispImage.DefaultDpi">
            <summary>
            The default DPI used for CrispImages that don't have their Dpi property set
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImage.ActualDpiProperty">
            <summary>
            This property ultimately determines the DPI scaling applied to CrispImages.
            Its value is a function of DefaultDpi and Dpi.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImage.ActualImageLibraryProperty">
            <summary>
            This property ultimately determines the image library from which images are loaded.
            Its value is a function of DefaultImageLibrary and ImageLibrary.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImage.ActualGrayscaleBiasColorProperty">
            <summary>
            This property ultimately determines the grayscale bias color for the image.
            Its value is a function of GrayscaleBiasColor and ActualHighContrast.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImage.ActualHighContrastProperty">
            <summary>
            This property ultimately determines whether the image is rendered high-contrast.
            Its value is a function of HighContrast and SystemHighContrast.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImage.DpiProperty">
             <summary>
             Defines the DPI used by the CrispImages which are desendants of the element to
             which this property is attached.  If this is 0.0, DefaultDpi is used.
            
             Attached to FrameworkElement
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImage.GrayscaleBiasColorProperty">
             <summary>
             Defines the grayscale bias color used by the CrispImages which are desendants of
             the element to  which this property is attached.  If the value is null, the
             bias color is chosen based on the high-contrast setting.
            
             Attached to FrameworkElement
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImage.HighContrastProperty">
             <summary>
             Controls whether the CrispImages which are desendants of the element to which this
             property is attached show high-contrast images:
            
               True  - Images are high-contrast
               False - Images are not high-contrast
               null  - Images are displayed according to the system high-contrast setting
            
             Attached to FrameworkElement
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImage.ImageLibraryProperty">
             <summary>
             Defines the image library used by the CrispImages which are desendants of the element to
             which this property is attached.  If this is null, DefaultImageLibrary is used.
            
             Attached to FrameworkElement
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImage.InternalMonikerProperty">
            <summary>
            The internal moniker to use when loading the CrispImage's image from the image library
            </summary>
            <remarks>
            This property is used to let us test the converter. The converter derives from a generic
            type and cannot use an embedded interop type across assembly boundaries. See CS1769
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImage.MonikerProperty">
            <summary>
            The moniker to use when loading the CrispImage's image from the image library
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImage.ScaleFactorProperty">
             <summary>
             The ScaleFactor is used to accommodate scenarios where the image
             may be scaled using a transform, such as for an image in the
             editor margin when the zoom != 100%. A ScaleFactor of 1 does
             no scaling.
            
             Attached to FrameworkElement
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImage.ShowDiagnosticToolTipProperty">
             <summary>
             Determines whether the CrispImages which are desendants of the element to
             which this property is attached will display a diagnostic tooltip.
            
             Attached to FrameworkElement
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImage.SystemHighContrastProperty">
            <summary>
            The value of SystemParameters.HighContrast.  It is defined as a dependency property here
            so it can be used in a binding to set the value of ActualHighContrast.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.CrispImage.InitializeBindings">
            <summary>
            Sets up all data bindings for the CrispImage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.CrispImage.InitializeLibraryBindings">
            <summary>
            Sets up image library data bindings for the CrispImage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.CrispImage.InitializeDpiBindings">
            <summary>
            Sets up DPI data bindings for the CrispImage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.CrispImage.InitializeGrayscaleBiasColorBindings">
            <summary>
            Sets up grayscale bias color data bindings for the CrispImage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.CrispImage.InitializeHighContrastBindings">
            <summary>
            Sets up high contrast data bindings for the CrispImage
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.CrispImage.InitializeMonikerBindings">
            <summary>
            Sets up the internal moniker for the CrispImage
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.CrispImageWithCount">
            <summary>
            A CrispImage that optionally displays an adjacent bubble with a count
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImageWithCount.BubbleBorderBrushProperty">
            <summary>
            The brush to be used for the border of the <see cref="P:Microsoft.VisualStudio.Imaging.CrispImageWithCount.Count" /> bubble.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImageWithCount.BubbleBorderThicknessProperty">
            <summary>
            The thickness to be used for the border of the <see cref="P:Microsoft.VisualStudio.Imaging.CrispImageWithCount.Count" /> bubble.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImageWithCount.BubbleBackgroundProperty">
            <summary>
            The brush to be used for the interior of the <see cref="P:Microsoft.VisualStudio.Imaging.CrispImageWithCount.Count" /> bubble.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImageWithCount.BubbleForegroundProperty">
            <summary>
            The brush to be used for the interior of the <see cref="P:Microsoft.VisualStudio.Imaging.CrispImageWithCount.Count" /> bubble.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImageWithCount.CountProperty">
            <summary>
            The number that is displayed in the bubble.  If the value is zero, the bubble is not displayed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImageWithCount.ImageHeightProperty">
            <summary>
            The height of the image
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImageWithCount.ImageWidthProperty">
            <summary>
            The width of the image
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImageWithCount.MaxCountProperty">
            <summary>
            The largest number that is displayed in the bubble.  If <see cref="P:Microsoft.VisualStudio.Imaging.CrispImageWithCount.Count" /> is greater than
            <see cref="P:Microsoft.VisualStudio.Imaging.CrispImageWithCount.MaxCount" />, then a "+" is appended to <see cref="P:Microsoft.VisualStudio.Imaging.CrispImageWithCount.MaxCount" /> and the resulting string is
            displayed in the bubble.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImageWithCount.MonikerProperty">
            <summary>
            The moniker to use when loading the CrispImage's image from the image library
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.CrispImageWithCount.VerticalBubbleAlignmentProperty">
            <summary>
            The vertical alignment of the <see cref="P:Microsoft.VisualStudio.Imaging.CrispImageWithCount.Count" /> bubble.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.CustomImageDescriptor">
            <summary>
            Represents a SourceDescriptor for an image added to the library via AddCustomImage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.CustomImageDescriptor.GetNativeResourceBytesCore">
            <remarks>
            This method is overridden but not implemented because it is 
            abstract in SourceDescriptor but not needed for custom images. A 
            custom image is only added to the library through a call to 
            AddCustomImage which only supports managed types that are already 
            loaded into memory, so this method should never be called for 
            custom images.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.CustomImageDescriptor.SerializeCore(Microsoft.VisualStudio.Utilities.VersionedBinaryWriter)">
            <remarks>
            This method is overriden but throws an InvalidOperationException 
            because it should never be called by the serialization code. A 
            custom image is not loaded into the library via a manifest, so when 
            the library serialized its collection of manifests, custom images 
            should not be included.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.DemandLoadBitmapSourceDescriptor">
            <summary>
            Represents a SourceDescriptor for an ondemand loaded BitmapSource backed by an image file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.DemandLoadBitmapSourceDescriptor.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for <see cref="T:Microsoft.VisualStudio.Imaging.DemandLoadBitmapSourceDescriptor" />
            </summary>
            <param name="sourcePath">The source file.</param>
            <param name="isSizeNeutral">Whether the image is size neutral.</param>
            <exception cref="T:System.ArgumentException">The source file does not exist.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.DrawingImageDescriptor">
            <summary>
            Represents a SourceDescriptor for an already-loaded DrawingImage.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ExtensionMethods.IsNullImage(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker)">
            <summary>
            Returns true if the ImageMoniker represents a null image, otherwise false.
            </summary>
            <param name="moniker">The moniker to test.</param>
            <returns>True if the ImageMoniker is a null image, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ExtensionMethods.ToStringEx(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker)">
            <summary>
            Converts an ImageMoniker to a string
            </summary>
            <param name="moniker">The moniker to convert</param>
            <returns>The string version of the moniker</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ExtensionMethods.ToStringEx(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String)">
            <summary>
            Converts an ImageMoniker to a string
            </summary>
            <param name="moniker">The moniker to convert</param>
            <param name="format">The format specifier. It can be "G", "A", "C", or "F"</param>
            <returns>The string version of the moniker</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ExtensionMethods.ToInternalType(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker)">
            <summary>
            Converts an interop ImageMoniker to an internal ImageMoniker
            </summary>
            <param name="moniker">The moniker to convert</param>
            <returns>The converted moniker</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ExtensionMethods.ToInternalType(Microsoft.VisualStudio.Imaging.Interop.ImageAttributes)">
            <summary>
            Converts an interop ImageAttributes to an interal ImageAttributes
            </summary>
            <param name="attributes">The attributes to convert</param>
            <returns>The converted attributes</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ExtensionMethods.GetDpi(Microsoft.VisualStudio.Imaging.Interop.ImageAttributes)">
            <summary>
            Returns the DPI specified by <paramref name="imageParams" />.  If the flags don't
            contain IPF_Dpi, a default value of DpiHelper.DeviceDpiX is returned.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ExtensionMethods.ToImageFormat(Microsoft.VisualStudio.Imaging.Interop._UIDataFormat)">
            <summary>
            Converts a _UIDataFormat to an ImageFormat
            </summary>
            <param name="format">The format to convert</param>
            <returns>The converted format</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ExtensionMethods.ToImageKind(Microsoft.VisualStudio.Imaging.Interop._UIImageType,Microsoft.VisualStudio.Imaging.Interop._UIDataFormat)">
            <summary>
            Converts an ImageType to an ImageKind
            </summary>
            <param name="imageType">The image type to convert</param>
            <param name="format">The desired format for the image</param>
            <returns>The converted image type</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ExtensionMethods.ComputeBackground(System.UInt32)">
            <summary>
            Returns the background color to use for the image
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.HslColor.Hue">
            <summary>
            The HslColor's Hue component
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.HslColor.Saturation">
            <summary>
            The HslColor's Saturation component
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.HslColor.Luminosity">
            <summary>
            The HslColor's Luminosity component
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.HslColor.Alpha">
            <summary>
            The HslColor's Alpha component
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.HslColor.FromColor(System.Windows.Media.Color)">
            <summary>
            Converts a Color value to an HslColor.  The algorithm was written based on pseudocode
            available on http://en.wikipedia.org/wiki/HSL_and_HSV.
            </summary>
            <param name="color">The color to convert</param>
            <returns>The converted color</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.HslColor.FromSimpleColor(Microsoft.VisualStudio.Imaging.SimpleColor)">
            <summary>
            Converts a SimpleColor value to an HslColor.  The algorithm was written based on pseudocode
            available on http://en.wikipedia.org/wiki/HSL_and_HSV.
            </summary>
            <param name="color">The color to convert</param>
            <returns>The converted color</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.HslColor.FromARGB(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Converts a Color value to an HslColor.  The algorithm was written based on pseudocode
            available on http://en.wikipedia.org/wiki/HSL_and_HSV.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.HslColor.ToColor">
            <summary>
            Converts an HslColor value to a Color.  The algorithm was written based on pseudocode
            available on http://en.wikipedia.org/wiki/HSL_and_HSV.
            </summary>
            <returns>The converted color</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.HslColor.ToSimpleColor">
            <summary>
            Converts an HslColor value to a SimpleColor.  The algorithm was written based on pseudocode
            available on http://en.wikipedia.org/wiki/HSL_and_HSV.
            </summary>
            <returns>The converted color</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.HslColor.ModOne(System.Double)">
            <summary>
            Ensures that <paramref name="value" /> is within the range [0, 1].
            Note that this behavior is different than LimitRange(value, 0, 1).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.HslColor.ComputeRGBComponent(System.Double,System.Double,System.Double)">
            <summary>
            Creates an R, G, or B value based on intermediate calculations
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.HslColor.LimitRange(System.Double,System.Double,System.Double)">
            <summary>
            Ensures that <paramref name="value" /> is within the range [min, max].
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.IBundleCollection`1">
            <summary>
            Abstract representation of a set of ResourceBundles.
            </summary>
            <typeparam name="T">The type of ResourceBundle stored in the collection.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.IBundleCollection`1.GetMonikers">
            <summary>
            Enumerates the monikers stored in this collection.  Determining the count
            may be expensive for custom images, which are stored weakly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.IBundleCollection`1.TryGetBundle(Microsoft.VisualStudio.Imaging.ImageMoniker,`0@)">
            <summary>
            Tries to get a ResourceBundle from the collection.
            </summary>
            <param name="moniker">The name of the resource.</param>
            <param name="bundle">The bundle, if the resource exists.</param>
            <returns>True if the resource was found, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ImageAttributes">
            <summary>
            This type matches the definition of its corresponding interop type of 
            the same name, and was created to facilitate serialization and high 
            performance comparison.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageAttributes._packedFields">
            <summary>
            The packed representation of the Kind, Format, Grayscale, and HighContrast properties.
            It reduces the memory requirements for these fields from 10 bytes (int + int + bool + bool)
            to 1 byte.
            
            The fields are represented as --kkffgh
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageAttributes.DeviceSize">
            <summary>
            The device size of the image
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageAttributes.Kind">
            <summary>
            The kind of the image
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageAttributes.Format">
            <summary>
            The format of the image
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageAttributes.Background">
            <summary>
            The background of the image.  If the background is not specified, the image is not themed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageAttributes.Grayscale">
            <summary>
            Indicates whether the image is grayscaled or not
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageAttributes.GrayscaleBiasColor">
            <summary>
            The grayscale bias color of the image, used only if Grayscale==true.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageAttributes.HighContrast">
            <summary>
            The indicates whether the image is high contrast
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageAttributes.EnhanceContrastIfNecessary">
            <summary>
            Gets a value indicating whether the image should be altered to increase contrast if rendering it
            normally fails to meet minimum contrast requirements.
            </summary>
            <remarks>
            For now this isn't settable and gets the property from <see cref="T:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities" />.  If we decide
            to make this configurable on a per-image basis in the future, this logic will change.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageAttributes.HasLightBackground">
            <summary>
            Indicates whether the background has a light value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageAttributes.HasDarkBackground">
            <summary>
            Indicates whether the background has a dark value
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageAttributes.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the value of this ImageAttributes instance,
            according to the provided format specifier.
            </summary>
            <param name="format">The format specifier.  In can be either "G" or "F"</param>
            <returns>The string representation of the object</returns>
            <remarks>
            The format of the returned string depends on <paramref name="format" />:
            
            G:  General format, suitable for debugging
            F:  Filename format.  The string looks like this:
            
                    ddddd.#bbbbbbbb.#gggggggg.h
                
                where:
                
                    ddddd is the dimensions, e.g. "16x16"
                    #bbbbbbbb is the background color, or "#00000000" if none is specified
                    #gggggggg is the grayscale bias color, or "#00000000" if the image is not grayscaled
                    h is the high contrast indicator, either "h" for high contrast or "a" for any contrast
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ImageAttributeTuple">
            <summary>
            A collection of information about an individual image returned by ResourceBundle.GetImage
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageAttributeTuple.Image">
            <summary>
            The image
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageAttributeTuple.Attributes">
            <summary>
            The attributes of the image
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageAttributeTuple.IsCached">
            <summary>
            Indicates whether the image has been cached in a ResourceBundle
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageAttributeTuple.ShouldBeCached">
            <summary>
            Indicates whether this image should be cached in a ResourceBundle
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ImageBundle">
            <summary>
            Container for all of the different bitmap and icon images realized for a given moniker.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageBundle.CreateBundleForSearch(Microsoft.VisualStudio.Imaging.ImageMoniker)">
            <summary>
            Creates an ImageBundle that is useful for searching a collection by moniker using BundleComparer
            </summary>
            <param name="moniker">The moniker to search for</param>
            <returns>A bundle that can be used for searching</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageBundle.Trace(Microsoft.VisualStudio.Utilities.ITracer,System.Diagnostics.TraceEventType)">
            <summary>
            Traces the contents of the image bundle
            </summary>
            <param name="tracer">The tracer to use</param>
            <param name="eventType">The event type to trace</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageBundle.GetImage(Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Returns the image matching <paramref name="attributes" />
            </summary>
            <param name="library">The image library</param>
            <param name="attributes">The attributes of the requested image</param>
            <returns>A structure describing the returned image, or null if the image couldn't be returned</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageBundle.CacheImage(Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageAttributeTuple)">
            <summary>
            Caches an image in the realized images collection.  Also, if the image being cached is
            the native image (i.e. a WPF bitmap), it is added to the image library's long-term cache.
            </summary>
            <param name="library">The image library</param>
            <param name="tuple">Describes the image to be cached</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageBundle.GetExpectedImageType(Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Returns the type that's expected to be returned for the given image format.
            </summary>
            <param name="attributes">The attributes of the image</param>
            <returns>The type that GetResource should return for the format</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageBundleCollection.#ctor(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageBundleCollection.Deserialize(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserializes an instance of this type from <paramref name="stream" />
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ImageCache">
            <summary>
            Represents a cache of realized images produced by ImageBundle.  Individual images in the
            cache are saved in an IStreamStorage as .png files and can be quickly decoded as necessary.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageCache.Storage">
            <summary>
            The storage used by the image cache, for unit testing
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageCache.GetImage(Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Returns the cached version of the image identified by <paramref name="moniker" />
            and <paramref name="attributes" />
            </summary>
            <param name="moniker">The moniker for the image</param>
            <param name="attributes">The attributes for the image</param>
            <returns>The cached image, or null if the image was not in the cache</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageCache.GetImage(Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes,System.String@)">
            <summary>
            Returns the cached version of the image identified by <paramref name="moniker" />
            and <paramref name="attributes" />
            </summary>
            <param name="moniker">The moniker for the image</param>
            <param name="attributes">The attributes for the image</param>
            <param name="key">The key that was read from</param>
            <returns>The cached image, or null if the image was not in the cache</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageCache.AddImage(System.Windows.Media.Imaging.BitmapSource,Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Adds an image to the cache
            </summary>
            <param name="image">The image to cache</param>
            <param name="moniker">The moniker for the image</param>
            <param name="attributes">The attributes for the image</param>
            <returns>True if the image was successfully added to the cache, false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageCache.AddImage(System.Windows.Media.Imaging.BitmapSource,Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes,System.String@)">
            <summary>
            Adds an image to the cache
            </summary>
            <param name="image">The image to cache</param>
            <param name="moniker">The moniker for the image</param>
            <param name="attributes">The attributes for the image</param>
            <param name="key">The key that was written to</param>
            <returns>True if the image was successfully added to the cache, false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageCache.RemoveImage(Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Removes an image from the cache
            </summary>
            <param name="moniker">The moniker for the image</param>
            <param name="attributes">The attributes for the image</param>
            <returns>True if the image was removed, false if it wasn't</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageCache.RemoveImage(Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes,System.String@)">
            <summary>
            Removes an image from the cache
            </summary>
            <param name="moniker">The moniker for the image</param>
            <param name="attributes">The attributes for the image</param>
            <param name="key">The key that was removed</param>
            <returns>True if the image was removed, false if it wasn't</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageCache.MakeKey(Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Makes a key for a cached image from <paramref name="moniker" /> and <paramref name="attributes" />
            The key is of the form:
            
                mmmmmmmm.aaaaaaaa.png
                
            where:
            
                mmmmmmmm is the filename format of the moniker
                aaaaaaaa is the filename format of the attributes
                
            </summary>
            <param name="moniker">The moniker for the image</param>
            <param name="attributes">The attributes for the image</param>
            <returns>The key for the image</returns>
            <remarks>Internal access for unit testing</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageCache.TryDelete(System.String)">
            <summary>
            Attempts to delete <paramref name="key" />
            </summary>
            <param name="key">The key to delete</param>
            <returns>True if the key was deleted, false if it was not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageConverter.BitmapSourceFromBitmap(System.Drawing.Bitmap)">
            <summary>
            Converts a Bitmap into a BitmapSource
            </summary>
            <param name="bitmap">Bitmap to convert</param>
            <returns>BitmapSource for the given bitmap</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageConverter.BitmapFromBitmapSource(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Converts a BitmapSource to System.Drawing.Bitmap
            </summary>
            <param name="bitmapSource">Image to convert</param>
            <returns>Converted bitmap</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageConverter.HiconFromBitmapSource(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Converts a BitmapSource to an HICON.  The caller is responsible for destroying the returned
            HICON.  Do not call Icon.FromHandle expecting the returned Icon object to have ownership
            of the HICON.
            </summary>
            <param name="bitmapSource">Image to convert</param>
            <returns>Converted icon</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageConverter.ExtractPixelSection(System.Byte[],System.Int32,System.Int32,System.Windows.Int32Rect)">
            <summary>
            This method will extract a section from a 32bit or 24bit pixel buffer upconverting to 32bit opaque if necessary.
            Special colors Green-1 and Magenta will be translated into transparent pixels, all transparent pixels will then be made black.
            </summary>
            <param name="sourcePixels">Source pixel buffer</param>
            <param name="sourceBitsPerPixel">Pixel size of the source image</param>
            <param name="sourceStride">Width in bytes of a pixel row in the source image</param>
            <param name="sectionRect">Rectangle to extract from the source image, indicates the width/heigh of the result</param>
            <returns>The destination pixel buffer of an image with the dimensions of the passed in rect and a stride of Width*4 (32bpp)</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageConverter.ExtractPixelSection(System.Byte[],System.Int32,System.Int32,System.Windows.Int32Rect,System.Drawing.Color[])">
            <summary>
            This method will extract a section from a 32bit or 24bit pixel buffer upconverting to 32bit opaque if necessary.
            Colors matching one of the transparent colors will be translated into transparent pixels, all transparent pixels will then be made black.
            </summary>
            <param name="sourcePixels">Source pixel buffer</param>
            <param name="sourceBitsPerPixel">Pixel size of the source image</param>
            <param name="sourceStride">Width in bytes of a pixel row in the source image</param>
            <param name="sectionRect">Rectangle to extract from the source image, indicates the width/heigh of the result</param>
            <param name="transparentColors">Array of colors that represent transparency in the source</param>
            <returns>The destination pixel buffer of an image with the dimensions of the passed in rect and a stride of Width*4 (32bpp)</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageEntry.ImageOrImageReference">
            <summary>
            The image.  This is either a direct reference to the image, or a WeakReference
            whose target is the image.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageEntry.Attributes">
            <summary>
            The attributes for the image
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageEntry.Image">
            <summary>
            The image held by this entry
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageEntry.IsCollected">
            <summary>
            Indicates whether the image held by this entry has been garbage collected
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageEntry.IsImageValid">
            <summary>
            Indicates whether the image held by this entry has been garbage collected, or if the native resource
            stored in this entry has been destroyed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageEntry.SetImage(System.Object,Microsoft.VisualStudio.Imaging.ReferenceKind)">
            <summary>
            Updates the image held by this entry.  It can be held with a strong or a weak reference.
            </summary>
            <param name="image">The image</param>
            <param name="refKind">Indicates whether the image is held strongly or weakly</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageEntry.ToString">
            <summary>
            Returns a string representation of this object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageEntry.SetWrappedImage(System.Object,Microsoft.VisualStudio.Imaging.ReferenceKind)">
            <summary>
            Stores an image that has been wrapped in its final container, either as a strong or a weak
            reference.  Win32 image handles are wrapped in a Win32Image to manage the validation and lifetime
            of the handle.
            </summary>
            <param name="wrappedImage">The image, stored in its final container (if any)</param>
            <param name="refKind">Indicates whether the image is held strongly or weakly</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageEntry.GetWrappedImage">
            <summary>
            Gets a stored image, possibly still wrapped in a container for lifetime management.
            Win32 image handles are wrapped in a Win32Image to manage the validation and lifetime
            of the handle.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageEntry.WrapImage(Microsoft.VisualStudio.Imaging.ImageAttributes,System.Object)">
            <summary>
            Wraps certain types of images into a container for validating and managing lifetime.
            Win32 image handles are wrapped in a Win32Image to manage the validation and lifetime
            of the handle.
            </summary>
            <param name="attributes">The attributes, used to deterime how to interpret the image.</param>
            <param name="image">The original image passed in.</param>
            <returns>Either the original image, or a container around the image that
            is used for validating and cleaning up the image.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageEntry.UnwrapImage(System.Object)">
            <summary>
            Unwraps a possibly-wrapped image to get back to the original image resource.
            Win32 image handles are wrapped in a Win32Image to manage the validation and lifetime
            of the handle.
            </summary>
            <param name="image">The possibly-wrapped image value</param>
            <returns>The original image value</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ImageEntry.Win32Image">
            <summary>
            Wraps a Win32 handle object so that they can be validated before using
            and cleaned up when the ImageLibrary is no longer holding the image.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageEntry.Win32Image.Create(Microsoft.VisualStudio.Imaging.ImageKind,System.IntPtr)">
            <summary>
            Creates the correct type of wrapper for a given ImageKind.
            </summary>
            <param name="kind">The type of image the handle represents.</param>
            <param name="handle">The handle to the resource.</param>
            <returns>A wrapper which manages the lifetime of the resource.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageEntry.Win32Image.Handle">
            <summary>
            Gets the handle for the image.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageEntry.Win32Image.DisposeNativeResources">
            <summary>
            Cleans up native image resources stored by this Win32Image.  This is called
            by the finalizer, on the finalizer thread, so only structs and handles can
            be safely accessed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ImageEntryCollection">
            <summary>
            A collection of realized images of various sizes, kinds and formats for a particular moniker.
            The collection is indexed by ImageAttributes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageEntryCollection.Count">
            <summary>
            The number of images entries in this collection
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageEntryCollection.SetImage(Microsoft.VisualStudio.Imaging.ImageAttributes,System.Object,Microsoft.VisualStudio.Imaging.ReferenceKind)">
            <summary>
            Inserts an image into the colletion.  If an entry for the given size/kind/format already
            exists, its image is updated.
            </summary>
            <param name="attributes">The attributes for the image</param>
            <param name="image">The image</param>
            <param name="referenceKind">Indicates whether the collection keeps a strong or weak reference on the image</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageEntryCollection.TryGetImage(Microsoft.VisualStudio.Imaging.ImageAttributes,System.Object@)">
            <summary>
            Attempts to return the image for the given size/kind/format.
            </summary>
            <param name="attributes">The attributes for the image</param>
            <returns>True if an entry for the size/kind/format exists, false if it doesn't</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageEntryCollection.FindEntry(Microsoft.VisualStudio.Imaging.ImageAttributes,System.Boolean)">
            <summary>
            Locates the entry that matches the given size/kind/format
            </summary>
            <param name="attributes">The attributes for the image</param>
            <returns>The matching entry, or null if not found</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageEntryCollection.ValidateImageType(System.Object,Microsoft.VisualStudio.Imaging.ImageFormat,Microsoft.VisualStudio.Imaging.ImageKind)">
            <summary>
            Validate that <paramref name="image" /> is of the correct type for the <paramref name="format" />
            and <paramref name="kind" />.
            </summary>
            <param name="image">The image</param>
            <param name="format">The format of the image</param>
            <param name="kind">The kind of the image</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ImageEventArgs">
            <summary>
            The arguments class for ImageLibrary events about images.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageEventArgs.Moniker">
            <summary>
            The moniker for the image.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageEventArgs.ManifestFilename">
            <summary>
            The name of the manifest file in which the image was defined.
            If the image is a custom image, this will be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageEventArgs.PackageGuid">
            <summary>
            The PackageGuid of the image's defining manifest.  If the defining
            manifest omits the PackageGuid attribute or the image is a custom
            image, this will be Guid.Empty.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.NeutralSize">
            <summary>
            The size to use when specifying a size-neutral image in a call to AddCustomImage.
            The size-neutral image is the image that is scaled to the requested size when an
            image of the requested size is not available.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.UnknownSize">
            <summary>
            The invalid image size. When an image source has invalid size, it means this source
            has a size but is not loaded yet.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.DefaultGrayscaleBiasColor">
            <summary>
            The default color for biasing grayscale images (#40FFFFFF).  This produces a 75% translucent effect.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.HighContrastGrayscaleBiasColor">
            <summary>
            The color for biasing grayscale images when in high-contrast mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.InvalidImageMoniker">
            <summary>
            The invalid image moniker.  Images using this moniker cannot be loaded from an image manifest.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.PlaceholderImageMoniker">
            <summary>
            The moniker for the placeholder image, to be used whenever an image in an image list cannot be loaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.DefaultDebugColor">
            <summary>
            The default color for debug mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.DefaultAlternateDebugColor">
            <summary>
            The default alternate color for debug mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.DefaultSerializationEncoding">
            <summary>
            The default encoding to use for serialization
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.XamlFileExtension">
            <summary>
            The file extension for .xaml files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.PngFileExtension">
            <summary>
            The file extension for .png files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.SupportedFileTypes">
            <summary>
            Supported file types for image source files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary._imageCache">
            <summary>
            The image cache for the library
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary._imageBundles">
            <summary>
            Images read from image manifests
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary._imageListBundles">
            <summary>
            Images read from image manifests
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary._customImageBundles">
            <summary>
            Images added via AddCustomImage
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary._customImageListBundles">
            <summary>
            Image lists added via AddCustomImageList
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary._manifestDescriptors">
            <summary>
            Descriptors for the manifests making up the library
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary._tracer">
            <summary>
            The tracer for the library
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.CustomMonikerGuid">
             <summary>
             The Guid to use for custom monikers.  Custom monikers are valid only for the lifetime
             of the library.  We generate a new Guid each time to help catch bugs where custom
             monikers are mistakenly reused with a different library.
            
             Internal for unit testing.
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary._lastCustomImageId">
            <summary>
            The Id of the most recently generated custom image moniker.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.DictionaryConcurrencyLevel">
            <summary>
            The concurrency level used by the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> in the library.
            We typically have very low concurrency, and can tolerate the locking behavior when contention exceeds
            the concurrency level.  The default concurrency level is (4 * ProcessorCount).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.DictionaryInitialCapacity">
            <summary>
            The initial capacity used by the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> in the library.
            Our dictionaries don't typically grow very large, so we can optimize toward small footprint.
            The default initial capacity is 31.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary._extensionToBundleMap">
            <summary>
            The map from extension-to-ImageBundle.  The value for an extension will be null if we've
            already attempted to look up the ImageBundle and failed.  This will make subsequent lookups
            -- which would also fail -- fail faster.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary._progIdToBundleMap">
            <summary>
            The map from ProgID-to-ImageBundle.  The value for a ProgID will be null if we've
            already attempted to look up the ImageBundle and failed.  This will make subsequent lookups
            -- which would also fail -- fail faster.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary._initialized">
            <summary>
            Indicates whether the library is ready to use.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Imaging.ImageLibrary.InitializedChanged">
            <summary>
            Raised when the library is done initializing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Boolean,Microsoft.VisualStudio.Utilities.ITracer)">
            <summary>
            Constructs an ImageLibrary object
            </summary>
            <param name="jtf">The joinable task factory to use for threading operations</param>
            <param name="isDefault">Whether or not this ImageLibrary should be used as ImageLibrary.Default </param>
            <param name="tracer">The tracer to use</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Boolean,Microsoft.VisualStudio.Utilities.ITracer,Microsoft.VisualStudio.Utilities.IStreamStorage{System.String})">
            <summary>
            Constructs an ImageLibrary object
            </summary>
            <param name="jtf">The joinable task factory to use for threading operations</param>
            <param name="isDefault">Whether or not this ImageLibrary should be used as ImageLibrary.Default </param>
            <param name="tracer">The tracer to use</param>
            <param name="cacheStorage">The storage used by the ImageLibrary for caching.</param>
            <remarks>
            Internal visibility for unit testing only.  Normal access to this constructor
            is via the static Load methods.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.SerializationVersion">
            <summary>
            The version of the serialization stream.  This should be incremented every time the
            serialization format changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.Serialize(System.IO.Stream)">
            <summary>
            Serializes the image library to <paramref name="stream" />
            </summary>
            <param name="stream">The stream to serialize to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.IO.Stream,System.Boolean,Microsoft.VisualStudio.Utilities.ITracer,Microsoft.VisualStudio.Utilities.IStreamStorage{System.String})">
            <summary>
            Deserialization constructor
            </summary>
            <param name="jtf">The joinable task factory to use for threading operations</param>
            <param name="stream">The stream to deserialize from</param>
            <param name="isDefault">Whether or not this ImageLibrary should be used as ImageLibrary.Default </param>
            <param name="tracer">The tracer to use</param>
            <param name="cacheStorage">The storage used by the ImageLibrary for caching.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.Deserialize(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.IO.Stream,System.Boolean,Microsoft.VisualStudio.Utilities.ITracer,Microsoft.VisualStudio.Utilities.IStreamStorage{System.String})">
            <summary>
            Deserializes an image library from <paramref name="stream" />
            </summary>
            <param name="jtf">The joinable task factory to use for threading operations</param>
            <param name="stream">The stream to deserialize from</param>
            <param name="isDefault">Whether or not this ImageLibrary should be used as ImageLibrary.Default </param>
            <param name="tracer">The tracer to use</param>
            <param name="cacheStorage">The storage used by the ImageLibrary for caching.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageLibrary.Initialized">
            <summary>
            Indicates whether the library is ready to use.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageLibrary.IsCaching">
            <summary>
            Indicates whether the library is caching its contents
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.GetImageCount">
            <summary>
            The total number of images in the library.  Determining the count
            may be expensive for custom images, which are stored weakly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.GetCustomImageCount">
            <summary>
            The number of custom images in the library.  For unit testing only.  Determining the count
            may be expensive for custom images, which are stored weakly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.GetImageListCount">
            <summary>
            The total number of image lists in the library.  Determining the count
            may be expensive for custom images, which are stored weakly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.GetCustomImageListCount">
            <summary>
            The number of custom image lists in the library.  For unit testing only.  Determining the count
            may be expensive for custom images, which are stored weakly.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageLibrary.CachedImageCount">
            <summary>
            The number of images that are being stored in the image cache.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.GetImageMonikers">
            <summary>
            The monikers of all of the images in the library.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.GetImageListMonikers">
            <summary>
            The monikers of all of the image lists in the library.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageLibrary.Tracer">
            <summary>
            The tracer for the library.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageLibrary.LastCustomImageId">
            <summary>
            The Id of the most recently generated custom image moniker.
            Internal for unit testing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageLibrary.ManifestDescriptors">
            <summary>
            Descriptors for the manifests making up the library
            Internal for unit testing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageLibrary.DebugMode">
            <summary>
            Whether or not images should be rendered in debug mode, which adds a colored border.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageLibrary.DebugColor">
            <summary>
            The color of the border rendered in debug mode
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageLibrary.AlternateDebugColor">
            <summary>
            The alternate color of the border rendered in debug mode
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageLibrary.Default">
            <summary>
            The default instance of ImageLibrary
            </summary>
            <remarks>The setter is internal for unit testing</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageLibrary.UseAsyncCrispImageConverter">
            <summary>
            Whether or not to use the CrispImage converter asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageLibrary.JoinableTaskFactory">
            <summary>
            The joinable task factory to use for threading operations
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.BeforeImageRealized">
            <summary>
            Raised before an image is realized from it source.  If the image
            is realized by retrieving it from the cache, this event is not raised.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.AfterImageRealized">
            <summary>
            Raised after an image is realized from it source.  For unit testing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.ImageAddedToCache">
            <summary>
            Raised when an image is added to the disk cache.  For unit testing.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageLibrary.ImageRetrievedFromCache">
            <summary>
            Raised when an image is retrieved from the disk cache.  For unit testing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.Load(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Boolean,Microsoft.VisualStudio.Utilities.ITracer,Microsoft.VisualStudio.Utilities.IStreamStorage{System.String})">
            <summary>
            Loads an ImageLibrary from a manifest
            </summary>
            <param name="jtf">The joinable task factory to use for threading operations</param>
            <param name="manifest">The manifest file to load</param>
            <param name="isDefault">Whether or not this ImageLibrary should be used as ImageLibrary.Default </param>
            <param name="tracer">The tracer to use</param>
            <param name="cacheStorage">The storage used by the ImageLibrary for caching.</param>
            <returns>The loaded image library</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.Load(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Boolean,System.Boolean,Microsoft.VisualStudio.Utilities.ITracer,Microsoft.VisualStudio.Utilities.IStreamStorage{System.String})">
            <summary>
            Loads an ImageLibrary from a manifest
            </summary>
            <param name="jtf">The joinable task factory to use for threading operations</param>
            <param name="manifest">The manifest file to load</param>
            <param name="preloadResources">Whether or not to preload image resources</param>
            <param name="isDefault">Whether or not this ImageLibrary should be used as ImageLibrary.Default </param>
            <param name="tracer">The tracer to use</param>
            <param name="cacheStorage">The storage used by the ImageLibrary for caching.</param>
            <returns>The loaded image library</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.Load(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Boolean,System.Boolean,Microsoft.VisualStudio.Utilities.ITracer,Microsoft.VisualStudio.Imaging.ProcessedManifest@,Microsoft.VisualStudio.Utilities.IStreamStorage{System.String})">
            <summary>
            Internal overload for unit testing
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.Load(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Collections.Generic.IEnumerable{System.String},System.Boolean,Microsoft.VisualStudio.Utilities.ITracer,Microsoft.VisualStudio.Utilities.IStreamStorage{System.String})">
            <summary>
            Loads an ImageLibrary from a collection of manifests
            </summary>
            <param name="jtf">The joinable task factory to use for threading operations</param>
            <param name="manifests">The manifest files to load</param>
            <param name="isDefault">Whether or not this ImageLibrary should be used as ImageLibrary.Default </param>
            <param name="tracer">The tracer to use</param>
            <param name="cacheStorage">The storage used by the ImageLibrary for caching.</param>
            <returns>The loaded image library</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.Load(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,Microsoft.VisualStudio.Utilities.ITracer,Microsoft.VisualStudio.Utilities.IStreamStorage{System.String})">
            <summary>
            Loads an ImageLibrary from a collection of manifests
            </summary>
            <param name="jtf">The joinable task factory to use for threading operations</param>
            <param name="manifests">The manifest files to load</param>
            <param name="preloadResources">Whether or not to preload image resources</param>
            <param name="isDefault">Whether or not this ImageLibrary should be used as ImageLibrary.Default </param>
            <param name="tracer">The tracer to use</param>
            <param name="cacheStorage">The storage used by the ImageLibrary for caching.</param>
            <returns>The loaded image library</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.Load(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,Microsoft.VisualStudio.Utilities.ITracer,System.Collections.Generic.List{Microsoft.VisualStudio.Imaging.ProcessedManifest},Microsoft.VisualStudio.Utilities.IStreamStorage{System.String})">
            <summary>
            Internal overload for unit testing
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.Load(System.String,Microsoft.VisualStudio.Imaging.ManifestReader)">
            <summary>
            Loads an image manifest.
            </summary>
            <param name="manifest">The manifest file to load</param>
            <param name="reader">The reader to use to load the manifest</param>
            <returns>The processed manifest contents</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.InsertRange``1(Microsoft.VisualStudio.Imaging.ProcessedManifest,Microsoft.VisualStudio.Imaging.BundleCollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Merges <paramref name="bundlesToInsert" /> into <paramref name="collection" /> in an optimal manner.
            </summary>
            <typeparam name="T">The type of bundle held in <paramref name="collection" /></typeparam>
            <param name="processedManifest">The processed manifest to which exceptions will be added, if any are encountered</param>
            <param name="collection">The collection to add to</param>
            <param name="bundlesToInsert">The bundles to add</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.GetImage(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,Microsoft.VisualStudio.Imaging.Interop.ImageAttributes)">
            <summary>
            Returns an image conforming to <paramref name="attributes" /> from the library
            </summary>
            <param name="moniker">The moniker for the image</param>
            <param name="attributes">The attributes describing the desired image</param>
            <returns>The requested image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.GetImage(Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Returns an image conforming to <paramref name="attributes" /> from the library
            </summary>
            <param name="moniker">The moniker for the image</param>
            <param name="attributes">The attributes describing the desired image</param>
            <returns>The requested image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.GetImageCore``1(Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes,System.Int32,System.Int32,System.String,Microsoft.VisualStudio.Imaging.IBundleCollection{``0}[])">
            <summary>
            Returns an image conforming to <paramref name="attributes" /> from the library
            </summary>
            <typeparam name="T">The type of the resource bundle for the requested image kind</typeparam>
            <param name="moniker">The moniker for the image</param>
            <param name="attributes">The attributes describing the desired image</param>
            <param name="beginCodeMarker">The code marker to fire at the beginning of the request</param>
            <param name="endCodeMarker">The code marker to fire at the end of the request</param>
            <param name="imageType">A string describing the type of image requested (for tracing)</param>
            <param name="collections">The image bundle collections to search for the requested image</param>
            <returns>The requested image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.AddCachedImage(System.Windows.Media.Imaging.BitmapSource,Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Adds the given image to the library's cache.
            </summary>
            <param name="image">The image to cache</param>
            <param name="moniker">The moniker of the image</param>
            <param name="attributes">The attributes of the image</param>
            <returns>True if the image was cached, false if it was not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.GetCachedImage(Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Returns an image from the library's cache.
            </summary>
            <param name="moniker">The moniker of the image</param>
            <param name="attributes">The attributes of the image</param>
            <returns>The cached image if it could be retrieved, null if it could not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.GetImageMonikerType(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker)">
            <summary>
            Returns whether the ImageMoniker was added as a custom image, loaded from manifest, or neither, meaning we don't have an image with that moniker.
            </summary>
            <param name="moniker">ImageMoniker to test.</param>
            <returns>Interop._ImageMonikerType of IMT_Custom, IMT_LoadedFromManifest, or IMT_Unknown.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.GetImageListMonikers(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker)">
            <summary>
            Returns a collection of ImageMonikers of the images in a given image list.
            </summary>
            <param name="imageListMoniker">The ImageMoniker of the image list.</param>
            <returns>The collection of ImageMonikers in the image list.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.AddMonikerFormattingDescriptor(System.String,System.Guid,System.Func{System.Collections.Generic.IReadOnlyDictionary{System.Int32,System.String}})">
            <summary>
            Adds a formatting descriptor for ImageMoniker.ToString().
            </summary>
            <param name="name">The name to be used for monikers whose Guids match <paramref name="guid" /> (e.g. "KnownMonikers")</param>
            <param name="guid">The guid to match</param>
            <param name="imageNameMapFactory">A function that will return a mapping of image IDs to image names</param>
            <remarks>
            For a moniker whose Guid matches <paramref name="guid" />, ToString() will return $"{name}.{imageNameMap[Id]}"
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.ResetFormattingDescriptors">
            <summary>
            Resets all of the formatting descriptors for ImageMoniker.ToString();
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.AddCustomCompositeImage(Microsoft.VisualStudio.Utilities.Int16Size,Microsoft.VisualStudio.Imaging.Interop.ImageCompositionLayer[])">
            <summary>
            Creates a custom image which is composed of multiple other images, and adds that image to the library.
            </summary>
            <param name="virtualSize">The virtual size of the canvas representing the image.  This does not represent
            a pixel size, and is used as a point of reference for each image layer.</param>
            <param name="layers">The stack of images to render.  Later images in the array are drawn on top of previous images.</param>
            <returns>A handle which contains the moniker associated with the image.  The handle
            maintains the object lifetime of the image itself.  Allowing the handle to be garbage-collected
            will result in the image also being GC-eligible.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.AddCustomImage(System.String,Microsoft.VisualStudio.Utilities.Int16Size,System.Boolean)">
            <summary>
            Adds a custom image to the library, indirectly by URI
            </summary>
            <param name="uriString">The URI string for the image to add</param>
            <param name="size">
            The size of the image.  If this is NeutralSize, the image will be used as the size-neutral
            image for the moniker.
            </param>
            <param name="canTheme">Indicates whether the image can be themed</param>
            <returns>A handle which contains the moniker associated with the image.  The handle
            maintains the object lifetime of the image itself.  Allowing the handle to be garbage-collected
            will result in the image also being GC-eligible.</returns>
            <remarks>Internal access for unit testing</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.AddCustomImage(System.Windows.Media.ImageSource,System.Boolean)">
            <summary>
            Adds a custom image to the library, directly via an already-created ImageSource.
            </summary>
            <param name="bitmap">The bitmap to store in the library.</param>
            <param name="canTheme">Indicates whether the image can be themed</param>
            <returns>A handle which contains the moniker associated with the image.  The handle
            maintains the object lifetime of the image itself.  Allowing the handle to be garbage-collected
            will result in the image also being GC-eligible.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.AddCustomImage(Microsoft.VisualStudio.Imaging.ImageBundle)">
            <summary>
            Adds a custom image to the library
            </summary>
            <param name="bundle">The bundle to add to the library</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.RemoveCustomImage(Microsoft.VisualStudio.Imaging.Interop.IImageHandle)">
            <summary>
            Removes a custom image from the library.  The image must have been added by AddCustomImage.
            </summary>
            <param name="handle">The handle of the image to remove.</param>
            <returns>True if the image was removed, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.RemoveCustomImage(Microsoft.VisualStudio.Imaging.ImageMoniker)">
            <summary>
            Removes a custom image from the library.  The image must have been added by AddCustomImage.
            </summary>
            <param name="moniker">The moniker of the image to remove.</param>
            <returns>True if the image was removed, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.AddCustomImageList(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker[])">
            <summary>
            Adds a custom image list to the library
            </summary>
            <param name="imageEntryMonikers">The monikers for the images that make up the image list</param>
            <returns>An IImageHandle that can be used to delete or retrieve the image list.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.AddCustomImageList(Microsoft.VisualStudio.Imaging.ImageMoniker[])">
            <summary>
            Adds a custom image list to the library
            </summary>
            <param name="imageEntryMonikers">The monikers for the images that make up the image list</param>
            <returns>An IImageHandle that can be used to delete or retrieve the image list.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.RemoveCustomImageList(Microsoft.VisualStudio.Imaging.Interop.IImageHandle)">
            <summary>
            Removes a custom image list from the library.  The image must have been added by AddCustomImageList.
            </summary>
            <param name="handle">The handle of the image list to remove.</param>
            <returns>True if the image list was removed, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.RemoveCustomImageList(Microsoft.VisualStudio.Imaging.ImageMoniker)">
            <summary>
            Removes a custom image list from the library.  The image must have been added by AddCustomImageList.
            </summary>
            <param name="moniker">The moniker of the image list to remove.</param>
            <returns>True if the image list was removed, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.TryGetMonikerForExtension(System.String,System.Boolean,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker@)">
            <summary>
            Attempts to get the moniker for the image to use for files whose extension
            matches <paramref name="extension" />.  If we haven't already identified
            the image to use, we'll attempt to identify it using the DefaultIcon property
            of the registered ProgID for the extension.
            </summary>
            <param name="extension">The extension to reference</param>
            <param name="canTheme">Indicates whether the image be themed</param>
            <param name="moniker">The moniker for the added image</param>
            <returns>True if the image could be added, false if it could not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.TryGetBundleForExtension(System.String,System.Boolean,Microsoft.VisualStudio.Imaging.ImageBundle@)">
            <summary>
            Attempts to get the moniker for the image to use for files whose extension
            matches <paramref name="extension" />.  If we haven't already identified
            the image to use, we'll attempt to identify it using the DefaultIcon property
            of the registered ProgID for the extension.
            </summary>
            <param name="extension">The extension to reference</param>
            <param name="canTheme">Indicates whether the image be themed</param>
            <param name="bundle">The bundle for the added image</param>
            <returns>True if the image could be added, false if it could not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.TryGetMonikerForProgId(System.String,System.Boolean,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker@)">
            <summary>
            Attempts to get the moniker for the image to use for files matching
            <paramref name="progId" />.  If we haven't already identified the image to use,
            we'll attempt to identify it using the DefaultIcon property of <paramref name="progId" />.
            </summary>
            <param name="progId">The ProgID to use for the image</param>
            <param name="canTheme">Indicates whether the image be themed</param>
            <param name="moniker">The moniker for the added image</param>
            <returns>True if the image could be added, false if it could not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.TryGetBundleForProgId(System.String,System.Boolean,Microsoft.VisualStudio.Imaging.ImageBundle@)">
            <summary>
            Attempts to get the moniker for the image to use for files matching
            <paramref name="progId" />.  If we haven't already identified the image to use,
            we'll attempt to identify it using the DefaultIcon property of <paramref name="progId" />.
            </summary>
            <param name="progId">The ProgID to use for the image</param>
            <param name="canTheme">Indicates whether the image be themed</param>
            <param name="bundle">The bundle for the added image</param>
            <returns>True if the image could be added, false if it could not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.IsCustomImageMoniker(Microsoft.VisualStudio.Imaging.ImageMoniker)">
            <summary>
            Indicates whether <paramref name="moniker" /> identifies a custom image.
            </summary>
            <param name="moniker">The moniker to test</param>
            <returns>True if the moniker is for a custom image, false if it is not</returns>
            <remarks>Internal access for unit testing</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.TryAddImageBundleForProgId(System.String,System.Boolean,Microsoft.VisualStudio.Imaging.ImageBundle@)">
            <summary>
            Attempts to create an ImageBundle to use for files matching <paramref name="progId" />.
            We use the DefaultIcon property of <paramref name="progId" /> and create a bundle
            for it.
            </summary>
            <param name="progId">The ProgID for which the bundle is to be created</param>
            <param name="canTheme">Indicates whether the image be themed</param>
            <param name="bundle">The added bundle</param>
            <returns>True if the bundle could be added, false if it could not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.GenerateCustomImageMoniker(System.Boolean)">
            <summary>
            Generates a unique custom image moniker.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.CanDeleteMoniker(Microsoft.VisualStudio.Imaging.ImageMoniker)">
            <summary>
            Determines whether an image identified by <paramref name="moniker" /> can
            be deleted.
            </summary>
            <param name="moniker">The moniker to check</param>
            <returns>True if the moniker can be deleted, false if it cannot.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.TryGetProgIdForExtension(System.String)">
            <summary>
            Returns the registred ProgID for the given extension
            </summary>
            <param name="extension">The extension to look up</param>
            <returns>
            The extension's ProgID; null if there is no registered ProgID,
            <paramref name="extension" /> is null or empty, or the first character
            is not a period.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.GetDefaultIconResource(System.String)">
            <summary>
            Returns the resource listed in the DefaultIcon subkey for <paramref name="progId" />
            </summary>
            <param name="progId">The ProgID to check</param>
            <returns>The default icon resource, or null if not available</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.TryParseIconLocation(System.String,System.String@,System.Int32@)">
            <summary>
            Attempt to parse a Windows shell-style resource string (e.g. "filename,index")
            </summary>
            <param name="resource">The string to parse</param>
            <param name="filename">The filename from <paramref name="resource" /></param>
            <param name="index">
            The index from <paramref name="resource" />.  If <paramref name="index" /> is
            greater than or equal to zero, it is treated as an index; if it is less than
            zero, it is treated as an identifier.
            </param>
            <returns>True if the string was successfully parsed, false if not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.TryGetBundle(Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageBundle@)">
            <summary>
            Locates an image bundle matching a moniker
            </summary>
            <param name="moniker">The moniker to locate</param>
            <param name="bundle">The matching bundle, or null if not found</param>
            <returns>True if found, false if not</returns>
            <remarks>Internal access for unit testing</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.TryGetBundle(Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageListBundle@)">
            <summary>
            Locates an image list bundle matching a moniker
            </summary>
            <param name="moniker">The moniker to locate</param>
            <param name="bundle">The matching bundle, or null if not found</param>
            <returns>True if found, false if not</returns>
            <remarks>Internal access for unit testing</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.TryGetBundle``1(Microsoft.VisualStudio.Imaging.ImageMoniker,``0@,Microsoft.VisualStudio.Imaging.IBundleCollection{``0}[])">
            <summary>
            Locates a bundle matching a moniker
            </summary>
            <typeparam name="T">The type of bundle being searched for</typeparam>
            <param name="moniker">The moniker to locate</param>
            <param name="bundle">The matching bundle, or null if not found</param>
            <param name="collections">The bundle collections search.</param>
            <returns>True if found, false if not</returns>
            <remarks>When adding new callers of this method, the new call sites must lock prior to calling this method.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.ConcatCollections``1(Microsoft.VisualStudio.Imaging.IBundleCollection{``0}[])">
            <summary>
            Concatenates all of the collections into a single IEnumerable&lt;<typeparamref name="T" />&gt;
            </summary>
            <typeparam name="T">The type of bundle being enumerated</typeparam>
            <param name="collections">The bundle collections concatenate.</param>
            <returns>The concatenated collections</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.TelemetryBlock(System.Object,System.EventHandler{Microsoft.VisualStudio.Imaging.TelemetryEventArgs},System.String)">
            <summary>
            Fires a begin event to allow a telemetry handler to listen. The handler will set args.Disposer, which is disposed at the end of the perfomance measurement.
            </summary>
            <param name="context">Additional data to pass to telemetry</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageLibrary.CachableImage.Bundle">
            <summary>
            The bundle into which the image tuple should be cached
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageLibrary.CachableImage.Value">
            <summary>
            The image tuple that can be cached
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageLibrary.CachableImage.AddToCacheOf(Microsoft.VisualStudio.Imaging.ImageLibrary)">
            <summary>
            Caches the CachableImage's image tuple in its resource bundle
            </summary>
            <param name="library">The library whose cache is to be updated</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ImageListBundle">
            <summary>
            Container for all of the different imagelists realized for a given moniker.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageListBundle._imageEntryMonikers">
            <summary>
            The monikers for the images that constitute the image list
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundle.#ctor(Microsoft.VisualStudio.Imaging.ImageMoniker)">
            <summary>
            Constructs an ImageListBundle for searching.  Access via CreateBundleForSearch
            </summary>
            <param name="moniker">The moniker to search for</param>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageListBundle.SerializationVersion">
            <summary>
            The version of the serialization stream.  This should be incremented every time the
            serialization format changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundle.SerializeCore(Microsoft.VisualStudio.Utilities.VersionedBinaryWriter)">
            <summary>
            Serializes the object to <paramref name="stream" />
            </summary>
            <param name="writer">The writer to serialize to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundle.#ctor(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageListBundle.ImageEntryMonikers">
            <summary>
            The monikers for the images used this image list (for unit testing)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ImageListBundle.ImageEntryCount">
            <summary>
            The number of images in this image list (for unit testing)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundle.CreateBundleForSearch(Microsoft.VisualStudio.Imaging.ImageMoniker)">
            <summary>
            Creates an ImageBundle that is useful for searching a collection by moniker using BundleComparer
            </summary>
            <param name="moniker">The moniker to search for</param>
            <returns>A bundle that can be used for searching</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundle.GetImage(Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Returns the image list matching <paramref name="attributes" />
            </summary>
            <param name="library">The image library</param>
            <param name="attributes">The attributes of the requested image list</param>
            <returns>A structure describing the returned image list, or null if the image couldn't be returned</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundle.GetExpectedImageType(Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Returns the type that's expected to be returned for the given image format.
            </summary>
            <param name="attributes">The attributes of the image</param>
            <returns>The type that GetResouce should return for the format</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundle.RealizeNativeFormatResource(Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Realizes the resource in its native format at a given size.
            </summary>
            <param name="library">The image library</param>
            <param name="attributes">The attributes of the resource</param>
            <returns>The realized resource</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundle.GetImagesForImageList``1(Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageAttributes,System.Func{Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes,``0})">
            <summary>
            Creates an array of format-specific image resources for use in constructing a kind-specific image list.
            </summary>
            <typeparam name="TBitmap">The type of the format-specific image resource.</typeparam>
            <param name="library">The image library</param>
            <param name="attributes">The attributes used to create the format-specific images</param>
            <param name="imageCreator">The function used to create a single format-specific image resource</param>
            <returns>An array of format-specific images for use in creating the image list, or null if a failure occurred.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundle.GetDrawingBitmap(Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Creates a System.Drawing.Bitmap for use in constructing a Windows Forms image list.
            </summary>
            <param name="library">The image library</param>
            <param name="moniker">The moniker to extract the bitmap for</param>
            <param name="attributes">The attributes used to realize the image</param>
            <returns>A System.Drawing.Bitmap associated with the given moniker</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Imaging.ImageListBundle.GetWin32Bitmap(Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes)" -->
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundle.CreateWinFormsImageList(Microsoft.VisualStudio.Utilities.Int16Size,System.Drawing.Bitmap[])">
            <summary>
            Creates a System.Drawing.ImageList from an array of Bitmaps
            </summary>
            <param name="size">The size of an individual image in the image list</param>
            <param name="bitmaps">The bitmaps to add</param>
            <returns>The ImageList object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundle.CreateWin32ImageList(Microsoft.VisualStudio.Utilities.Int16Size,Microsoft.VisualStudio.Imaging.ImageListBundle.Win32Bitmap[])">
            <summary>
            Creates an HIMAGELIST from an array of HBITMAPs
            </summary>
            <param name="size">The size of an individual image in the image list</param>
            <param name="bitmaps">The bitmaps to add</param>
            <returns>The HIMAGELIST</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundle.CreateAlmostTransparentImage(System.Int32,System.Int32)">
            <summary>
            Creates an image in which all pixels are transparent and one pixel is nearly-transparent.
            This is necessary to work around an issue with ImageList_Add where fully-transparent images
            are treated as if they have no transparency.
            </summary>
            <param name="pixelWidth">The width, in pixels, of the bitmap</param>
            <param name="pixelHeight">The height, in pixels, of the bitmap</param>
            <returns>A new HBITMAP with almost all pixels transparent</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundle.Trace(Microsoft.VisualStudio.Utilities.ITracer,System.Diagnostics.TraceEventType)">
            <summary>
            Traces the contents of the image bundle
            </summary>
            <param name="tracer">The tracer to use</param>
            <param name="eventType">The event type to trace</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundleCollection.#ctor(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageListBundleCollection.Deserialize(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserializes an instance of this type from <paramref name="stream" />
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ImageManifest">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifest.Symbols">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifest.Images">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifest.ImageLists">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifest.PackageGuid">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestGuid">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestGuid.Name">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestGuid.Value">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestID">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestID.Name">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestID.Value">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImport">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImport.Manifest">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestString">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestString.Name">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestString.Value">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImage">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImage.Source">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImage.Guid">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImage.ID">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImage.AllowColorInversion">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImage.AllowColorInversionSpecified">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSource">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSource.Item">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSource.NativeResource">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSource.Uri">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSource.Background">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSource.BackgroundSpecified">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceDimensionRange">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceDimensionRange.MinWidth">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceDimensionRange.MinHeight">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceDimensionRange.MaxWidth">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceDimensionRange.MaxHeight">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceDimensions">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceDimensions.Width">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceDimensions.Height">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceSize">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceSize.Value">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceSizeRange">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceSizeRange.MinSize">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceSizeRange.MaxSize">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceNativeResource">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceNativeResource.ID">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceNativeResource.Type">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ST_SourceBackgroundType">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ST_SourceBackgroundType.Light">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ST_SourceBackgroundType.Dark">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ST_SourceBackgroundType.HighContrast">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ST_SourceBackgroundType.HighContrastLight">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ST_SourceBackgroundType.HighContrastDark">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageList">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageList.ContainedImage">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageList.Guid">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageList.ID">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageListContainedImage">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageListContainedImage.Guid">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageListContainedImage.ID">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageListContainedImage.External">
            <remarks />
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageListContainedImage.ExternalSpecified">
            <remarks />
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ImageMoniker">
            <summary>
            This type matches the definition of its corresponding interop type of
            the same name, and was created to facilitate serialization and high
            performance comparison.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ImageMoniker.SerializationVersion">
            <summary>
            The version of the serialization stream.  This should be incremented every time the
            serialization format changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageMoniker.Serialize(Microsoft.VisualStudio.Utilities.VersionedBinaryWriter)">
            <summary>
            Serializes the object to <paramref name="stream" />
            </summary>
            <param name="writer">The writer to serialize to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageMoniker.#ctor(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageMoniker.Deserialize(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserializes an instance of this type from <paramref name="stream" />
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImageMoniker.ToString(System.String,System.IFormatProvider)">
             <summary>
             Returns a string representation of the value of this ImageMoniker,
             according to the provided format specifier.
             </summary>
             <param name="format">The format specifier. It can be "G", "A", "C", or "F"</param>
             <returns>The string representation of the object</returns>
             <remarks>
             The format of the returned string depends on <paramref name="format" />:
            
             G:  General format.    The string looks like "KnownMonikers.OpenFolder" or canonical if
                                    there is no format descriptor for it
             A:  Alternate format.  The string looks like "{guid};{id}"
             C:  Canonical format.  The string looks like "{guid}:{id}"
             F:  Filename format.   The string looks like "guid.id"
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImagingUtilities.TryParseImageMoniker(System.String,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker@)">
            <summary>
            Tries to convert <paramref name="s" /> into an ImageMoniker
            </summary>
            <param name="s">The string to attempt to parse</param>
            <param name="moniker">The ImageMoniker parsed from <paramref name="s" /></param>
            <returns>True if parsing was sccessful, otherwise false</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImagingUtilities.ConvertMonikerToString(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker)">
            <summary>
            Converts an ImageMoniker into a string, which can be converted back using TryParseImageMoniker.
            </summary>
            <param name="moniker">ImageMoniker to convert to a string.</param>
            <returns>The ImageMoniker formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImagingUtilities.ConvertMonikerToString(Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.String)">
            <summary>
            Converts an ImageMoniker into a string, using the passed format, which can be converted back using TryParseImageMoniker.
            </summary>
            <param name="moniker">ImageMoniker to convert to a string.</param>
            <param name="format">Format to use. "f" for filename, "a" for alternate, "g" for general </param>
            <returns>The ImageMoniker formatted as a string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImagingUtilities.ValidateImageAttributesFlags(Microsoft.VisualStudio.Imaging.Interop._ImageAttributesFlags)">
            <summary>
            Validates that <paramref name="flags" /> contains only valid flags
            </summary>
            <param name="flags">The flags to validate</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImagingUtilities.ValidateAttributes(Microsoft.VisualStudio.Imaging.Interop.ImageAttributes)">
            <summary>
            Verifies that the contents of an ImageAttributes structure are valid
            </summary>
            <param name="attributes">Attributes to verify</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImagingUtilities.ValidateAttributes(Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Verifies that the contents of an ImageAttributes structure are valid
            </summary>
            <param name="attributes">Attributes to verify</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImagingUtilities.ValidateKind(Microsoft.VisualStudio.Imaging.ImageKind)">
            <summary>
            Verifies that an ImageKind is valid
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImagingUtilities.ValidateFormat(Microsoft.VisualStudio.Imaging.ImageFormat)">
            <summary>
            Verifies that an ImageFormat is valid
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImagingUtilities.IsValidHICON(System.IntPtr)">
            <summary>
            Verifies that an HICON is still a valid Win32 resource.
            </summary>
            <param name="hIcon">The icon handle to test.</param>
            <returns>True if the icon is still a valid handle, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImagingUtilities.IsValidHBITMAP(System.IntPtr)">
            <summary>
            Verifies that an HBITMAP is still a valid Win32 resource.
            </summary>
            <param name="hBitmap">The bitmap handle to test.</param>
            <returns>True if the bitmap is still a valid handle, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ImagingUtilities.IsValidHIMAGELIST(System.IntPtr)">
            <summary>
            Verifies that an HIMAGELIST is still a valid Win32 resource.
            </summary>
            <param name="hImageList">The image list handle to test.</param>
            <returns>True if the image list is still a valid handle, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ManifestDescriptor">
            <summary>
            Describes a manifest file
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ManifestDescriptor.SerializationVersion">
            <summary>
            The version of the serialization stream.  This should be incremented every time the
            serialization format changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestDescriptor.Serialize(Microsoft.VisualStudio.Utilities.VersionedBinaryWriter)">
            <summary>
            Serializes the descriptor to <paramref name="stream" />
            </summary>
            <param name="writer">The writer to serialize to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestDescriptor.#ctor(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="stream">The stream to deserialize from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestDescriptor.Deserialize(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserializes a manifest descriptor <paramref name="stream" />
            </summary>
            <param name="stream">The stream to deserialize from</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ManifestDescriptor.Filename">
            <summary>
            The manifest filename
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ManifestDescriptor.PackageGuid">
            <summary>
            The manifest's PackageGuid, if it is specified in the manifest.
            If the manifest has no PackageGuid attribute, this is Guid.Empty.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ManifestReader.BuiltInSymbolNames">
            <summary>
            Built-in symbol names.  Internal access for unit testing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.#ctor(System.Boolean)">
            <summary>
            A class for processing ImageManifest files for use in the ImageLibrary
            </summary>
            <param name="preloadResources">
            Whether or not to preload the image assets as part of the manfest processing. Preloading resources means
            that the resource data is already available for image requests instead of needing to request the resource
            stream which could result in an assembly load.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.Read(System.String,Microsoft.VisualStudio.Utilities.ITracer)">
            <summary>
            Reads an image manifest from a file
            </summary>
            <param name="manifestFile">The manifest file to read</param>
            <param name="tracer">The tracer to use</param>
            <returns>The processed manifest</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.Read(System.String,Microsoft.VisualStudio.Utilities.ITracer,System.Boolean)">
            <summary>
            Reads an image manifest from a file
            </summary>
            <param name="manifestFile">The manifest file to read</param>
            <param name="tracer">The tracer to use</param>
            <param name="symbolsOnly">Indicates whether the entire manifest is to be read or just symbols</param>
            <returns>The processed manifest</returns>
            <remarks>Internal access for unit testing</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.Read(System.IO.TextReader,System.String,Microsoft.VisualStudio.Utilities.ITracer,System.Boolean)">
            <summary>
            Reads an image manifest from a file
            </summary>
            <param name="reader">The reader to read from</param>
            <param name="manifestFile">
            The manifest file being read.  This is used only to add the ManifestFolder built-in
            symbol to the symbol table.  It can be null, in which case the ManifestFolder built-in
            symbol will be String.Empty.
            </param>
            <param name="tracer">The tracer to use</param>
            <param name="symbolsOnly">Indicates whether the entire manifest is to be read or just symbols</param>
            <returns>The processed manifest</returns>
            <remarks>Internal access for unit testing</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.AddBuiltInSymbols(Microsoft.VisualStudio.Imaging.ProcessedManifest,System.String)">
            <summary>
            Adds all of the built-in symbols to the processed manifest
            </summary>
            <param name="processedManifest">The object into which symbols are placed</param>
            <param name="manifestFile">The manifest filename</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.AddEnvironmentSymbol(Microsoft.VisualStudio.Imaging.ProcessedManifest,System.String)">
            <summary>
            Adds a built-in symbol named <paramref name="variable" /> whose value is the
            value of the environment variable of the same name.
            </summary>
            <param name="processedManifest">The object into which symbols are placed</param>
            <param name="variable">The name of the symbol/environment variable</param>
            <returns>The symbol value</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ProcessSymbols(Microsoft.VisualStudio.Imaging.ProcessedManifest,System.Object[],Microsoft.VisualStudio.Utilities.ITracer)">
            <summary>
            Processes a Symbols array into the the processed manifest
            </summary>
            <param name="processedManifest">The object into which symbols are placed</param>
            <param name="symbols">The symbols to process</param>
            <param name="tracer">The tracer to use</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.AddUserSymbol(Microsoft.VisualStudio.Imaging.ProcessedManifest,System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds a user symbol to <paramref name="processedManifest" />
            </summary>
            <param name="processedManifest">The object into which symbols are placed</param>
            <param name="entry">The entry for the user symbol</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ProcessSymbol(Microsoft.VisualStudio.Imaging.ProcessedManifest,System.Object,Microsoft.VisualStudio.Utilities.ITracer)">
            <summary>
            Processes a single symbol into a KeyValuePair entry for the symbol table
            </summary>
            <param name="processedManifest">The object into which symbols are placed</param>
            <param name="symbol">The symbol to process</param>
            <param name="tracer">The tracer to use</param>
            <returns>The KeyValuePair for the symbol</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ImportSymbols(Microsoft.VisualStudio.Imaging.ProcessedManifest,System.String,Microsoft.VisualStudio.Utilities.ITracer)">
            <summary>
            Returns a SymbolEntry representing the symbols defined in a given manifest.  The
            returned entry has a null key, and a value that is of type IEnumerable&lt;SymbolEntry&gt;
            </summary>
            <param name="processedManifest">The object into which symbols are placed</param>
            <param name="manifestName">The manifest from which symbols are loaded</param>
            <param name="tracer">The tracer to use</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ProcessImages(Microsoft.VisualStudio.Imaging.ProcessedManifest,Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImage[],System.Boolean)">
            <summary>
            Processes a collection of images from a manifest
            </summary>
            <param name="processedManifest">The object into which images are placed</param>
            <param name="images">The images to process</param>
            <param name="preloadResources">Whether or not to preload image resources</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ProcessImage(Microsoft.VisualStudio.Imaging.ProcessedManifest,Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImage,System.Boolean)">
            <summary>
            Processes a single image from a manifest
            </summary>
            <param name="processedManifest">The object into which images are placed</param>
            <param name="image">The image to process</param>
            <param name="preloadResources">Whether or not to preload image resources</param>
            <returns>The ImageBundle for the image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ProcessSources(Microsoft.VisualStudio.Imaging.ProcessedManifest,Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSource[],System.Boolean)">
            <summary>
            Processes a collection of image sources from a manifest
            </summary>
            <param name="processedManifest">The object into which sources are placed</param>
            <param name="sources">The sources to process</param>
            <param name="preloadResources">Whether or not to preload image resources</param>
            <returns>A collection of SourceDescriptors for the iamge sources</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ProcessSource(Microsoft.VisualStudio.Imaging.ProcessedManifest,Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSource,System.Boolean)">
            <summary>
            Processes a single image source from a manifest
            </summary>
            <param name="processedManifest">The object containing symbols</param>
            <param name="sources">The source to process</param>
            <param name="preloadResources">Whether or not to preload image resources</param>
            <returns>A SourceDescriptor for the iamge source</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.GetBackground(Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSource)">
            <summary>
            Returns the background for which <paramref name="source" /> is to be used
            </summary>
            <param name="source">The source to process</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ProcessNativeResource(Microsoft.VisualStudio.Imaging.ProcessedManifest,Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageSourceNativeResource)">
            <summary>
            Processes a &lt;NativeResource&gt; from a manifest
            </summary>
            <param name="processedManifest">The object containing symbols</param>
            <param name="sources">The source to process</param>
            <returns>A SourceDescriptor for the iamge source</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ProcessImageLists(Microsoft.VisualStudio.Imaging.ProcessedManifest,Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageList[])">
            <summary>
            Processes a collection of image lists from a manifest
            </summary>
            <param name="processedManifest">The object into which image lists are placed</param>
            <param name="imageLists">The images lists to process</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ProcessImageList(Microsoft.VisualStudio.Imaging.ProcessedManifest,Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageList)">
            <summary>
            Processes a single image list from a manifest
            </summary>
            <param name="processedManifest">The object into which image lists are placed</param>
            <param name="imageList">The image list to process</param>
            <returns>The ImageListBundle for the image list</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ProcessContainedImages(Microsoft.VisualStudio.Imaging.ProcessedManifest,Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageListContainedImage[])">
            <summary>
            Processes a collection of contained images from a manifest
            </summary>
            <param name="processedManifest">The object into which contained images are placed</param>
            <param name="imageListMoniker">The moniker for the image list that contains the images</param>
            <param name="containedImages">The contained images to process</param>
            <returns>The monikers for the contained images</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ProcessContainedImage(Microsoft.VisualStudio.Imaging.ProcessedManifest,Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageListContainedImage)">
            <summary>
            Processes a single contained images from a manifest
            </summary>
            <param name="processedManifest">The object into which contained images are placed</param>
            <param name="imageListMoniker">The moniker for the image list that contains this image</param>
            <param name="contained">The contained image to process</param>
            <returns>The moniker for the contained image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ProcessPackageGuid(Microsoft.VisualStudio.Imaging.ProcessedManifest,System.String)">
            <summary>
            Processes a package Guid string into the the processed manifest
            </summary>
            <param name="processedManifest">The object into which symbols are placed</param>
            <param name="packageGuid">The package Guid string, possibly a symbol reference</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.IsCatchableException(System.Exception)">
            <summary>
            Determines whether an exception is one that can be handled by the Read method's
            exception handler.
            </summary>
            <param name="type">The exception type</param>
            <returns>True if Read can handle the exception type, false if it cannot</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ProcessManifestSection(Microsoft.VisualStudio.Imaging.ProcessedManifest,System.Action)">
            <summary>
            Executes an action to process a section of the manifest.  Any catchable exception
            encountered during the process are added to <param name="processedManifest" /> for
            future diagnostics.
            </summary>
            <param name="action">The action that processes the section</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ProcessManifestElement``2(``0,System.Func{``0,``1})">
            <summary>
            Processes manifest elements, ensuring that any exceptions that are thrown
            are wrapped in one of our expected exceptions.
            </summary>
            <typeparam name="TResult">The type that the processing function will return</typeparam>
            <param name="element">The element to be processed</param>
            <param name="process">The function that processes the element</param>
            <returns>The result of processing the element</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.CreateImageMoniker(Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImage,Microsoft.VisualStudio.Imaging.ProcessedManifest)">
            <summary>
            Creates a moniker from an Image
            </summary>
            <param name="image">The image</param>
            <param name="processedManifest">The object containing symbols</param>
            <returns>The moniker for the image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.CreateImageMoniker(Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageList,Microsoft.VisualStudio.Imaging.ProcessedManifest)">
            <summary>
            Creates a moniker from an ImageList
            </summary>
            <param name="imageList">The image list</param>
            <param name="processedManifest">The object containing symbols</param>
            <returns>The moniker for the image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.CreateImageMoniker(Microsoft.VisualStudio.Imaging.Serialization.ImageManifestImageListContainedImage,Microsoft.VisualStudio.Imaging.ProcessedManifest)">
            <summary>
            Creates a moniker from a ContainedImage
            </summary>
            <param name="contained">The contained image</param>
            <param name="processedManifest">The object containing symbols</param>
            <returns>The moniker for the image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.CreateImageMoniker(System.String,System.String,Microsoft.VisualStudio.Imaging.ProcessedManifest)">
            <summary>
            Creates a moniker from strings representing the Guid and the ID.  If the strings
            contain symbols, the symbols are resolved.
            </summary>
            <param name="guidString">The string for the moniker's Guid</param>
            <param name="idString">The string for the moniker's ID</param>
            <param name="processedManifest">The object containing symbols</param>
            <returns>The moniker for the image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.CreateSchemaValidationException(System.Object,System.Exception)">
            <summary>
            Creates a XmlSchemaValidationException for an invalid object that somehow made it
            past schema validation.
            </summary>
            <param name="obj">The object that violates the manifest schema</param>
            <param name="innerException">The inner exception</param>
            <returns>The exception</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.ToString(System.Object)">
            <summary>
            Converts our generated schema types to strings.  Ordinarily this would be implemented
            as ToString overrides on the types, but since they're generated we don't have that option.
            </summary>
            <param name="obj">The object to convert to a string</param>
            <returns>The string representation of the object</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.IsBuiltInSymbol(System.String)">
            <summary>
            Indicates whether <paramref name="symbol" /> is pre-defined, not defined in the manifest.
            </summary>
            <param name="symbol">The symbol to check</param>
            <returns>True if it's a built-in symbol, false if it's a user symbol</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ManifestReader.IsUserSymbol(System.String)">
            <summary>
            Indicates whether <paramref name="symbol" /> was defined in the manifest.
            </summary>
            <param name="symbol">The symbol to check</param>
            <returns>True if it's a user symbol, false if it's a built-in symbol</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.MonikerAttributeTuple.Moniker">
            <summary>
            The image moniker
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.MonikerAttributeTuple.Attributes">
            <summary>
            The image attributes
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.NativeResource">
            <summary>
            Describes the &lt;NativeResource&gt; sub-element of an image's &lt;Source&gt; 
            element in the image manifest
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.NativeResource.SerializationVersion">
            <summary>
            The version of the serialization stream.  This should be incremented every time the
            serialization format changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.NativeResource.Serialize(Microsoft.VisualStudio.Utilities.VersionedBinaryWriter)">
            <summary>
            Serializes the object to <paramref name="stream" />
            </summary>
            <param name="writer">The writer to serialize to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.NativeResource.#ctor(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.NativeResource.Deserialize(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserializes an instance of this type from <paramref name="stream" />
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.NativeResource.Id">
            <summary>
            The ID of the native resource
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.NativeResource.Kind">
            <summary>
            The kind of the native resource
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.NativeResource.IdIsIndex">
            <summary>
            Indicates whether the Id of the NativeResource is treated as an index rather
            than an identifier.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.NativeResource.ResourceLookupType">
            <summary>
            The resource type to use to look up the native resource with NativeMethods.FindResource.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.NativeResource.GetBytes(System.String)">
            <summary>
            Returns the bytes for the native resource
            </summary>
            <param name="filename">The name of the file containing the resource</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.NativeResource.LoadImageFromIcon(System.String,Microsoft.VisualStudio.Utilities.Int16Size)">
            <summary>
            Loads the image identified by the native icon resource
            </summary>
            <param name="filename">The name of the file containing the resource</param>
            <param name="size">The size of the image</param>
            <returns>The image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.NativeResource.MapIndexToId(System.IntPtr)">
            <summary>
            Maps this native resource's Id (when interpreted as an index) to a real resource ID.
            Used only when IdIsIndex is true.
            </summary>
            <param name="moduleHandle">The handle of the module containing the resource</param>
            <returns>The mapped-to identifier</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.NativeResource.EnumResources(System.IntPtr,System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            Enumerates all of the resources of this native resource's type in a module,
            calling <paramref name="callback" /> for each one.  Enumeration continues until
            either all of the resources of the appropriate type have been enumerated, or
            <paramref name="callback" /> returns false.
            </summary>
            <param name="moduleHandle">The handle of the module containing the resources</param>
            <param name="callback">The function to call for each enumerated resource</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.NativeResource.FindResource(System.IntPtr)">
            <summary>
            Returns the handle for the NativeResource's resource
            </summary>
            <param name="moduleHandle">The handle of the module containing the resource</param>
            <returns>The handle of the resource, IntPtr.Zero if not found</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.NativeResourceKind">
            <summary>
            Describes the valid values for the "Type" attribute of a &lt;NativeResource&gt; element
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.NativeResourceKind.XAML">
            <summary>
            The resource is XAML
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.NativeResourceKind.PNG">
            <summary>
            The resource is a PNG image
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.NativeResourceKind.Icon">
            <summary>
            The resource is an icon.  This is only used for images created from Windows registry
            settings via ImageLibrary.GetMonikerForProgId and ImageLIbrary.GetMonikerForExtension.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.PixelBuffer">
            <summary>
            Wrapper around a byte[] containing pixel color values with some helper functions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.PixelBuffer.AlphaBlendWithBackground(Microsoft.VisualStudio.Imaging.SimpleColor)">
            <summary>
            Convert every pixel in the bitmap to a full-opacity pixel by overlaying them on the given background color.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.PixelBuffer.ReplacePixels(System.Int32,System.Func{Microsoft.VisualStudio.Imaging.SimpleColor[],System.Boolean},System.Func{Microsoft.VisualStudio.Imaging.SimpleColor[],Microsoft.VisualStudio.Imaging.SimpleColor[]},Microsoft.VisualStudio.Imaging.SimpleColor)">
            <summary>
            Look for sequences of pixels matching a given predicate and apply a transformation to them.  Sequences can be
            upward, downward, leftward, or rightward.  Sequences may extend one pixel outside the image area, in which case
            they behave as if the image is surrounded by a border of color <paramref name="background" />.  This method
            repeatedly tests every sequence in the image until none match <paramref name="predicate" />.
            </summary>
            <param name="sequenceLength">The length, in pixels, of the sequences to test</param>
            <param name="predicate">A delegate that returns true for matching sequences</param>
            <param name="transform">A delegate that generates new pixel values for matching sequences</param>
            <param name="background">The background color for the "virtual" border</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.PixelBuffer.GetColor(System.Int32)">
            <summary>
            Gets the color of the pixel beginning at byte offset <paramref name="i" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.PixelBuffer.SetColor(System.Int32,Microsoft.VisualStudio.Imaging.SimpleColor)">
            <summary>
            Sets the color of the pixel beginning at byte offset <paramref name="i" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.PixelBuffer.PixelSequence.#ctor(Microsoft.VisualStudio.Imaging.PixelBuffer,System.Int32[])">
            <param name="indices">The byte index (into <paramref name="source" />.PixelBytes) of the first byte of each pixel in the sequence</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ProcessedManifest">
            <summary>
            Contains information about a processed manifest
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ProcessedManifest._regex">
            <summary>
            A regular expression for searching for symbol designators, e.g. "$(SymbolName)"
            The syntax is:
            
                1.  A dollar sign -- "\$"
                2.  followed by open paren -- "\("
                3.  followed by a single letter (any case) or an underscore -- "[a-zA-Z_]{1}"
                4.  followed by zero or more digits, letters (any case), or underscores -- "[0-9a-zA-Z_]*"
                5.  followed by close paren -- "\)"
            
            1 through 5 (the symbol designator) are captured as match.Groups[1]
            2 and 3 together (the symbol name) are captured as match.Groups[2]
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ProcessedManifest.#ctor(System.String,Microsoft.VisualStudio.Utilities.ITracer)">
            <summary>
            Constructs a ProcessedManifest
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ProcessedManifest.PackageGuid">
            <summary>
            The Guid of the manifest
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ProcessedManifest.Filename">
            <summary>
            The filename of the manifest
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ProcessedManifest.Symbols">
            <summary>
            The symbol table defined in the manifest
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ProcessedManifest.BuiltInSymbolCount">
            <summary>
            The number of symbols that are implicitly built into each manifest
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ProcessedManifest.UserSymbolCount">
            <summary>
            The number of symbols that are defined in manifest
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ProcessedManifest.SymbolCount">
            <summary>
            The total number of symbols
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ProcessedManifest.Images">
            <summary>
            The images defined in the manifest
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ProcessedManifest.ImageLists">
            <summary>
            The image lists defined in the manifest
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ProcessedManifest.Exceptions">
            <summary>
            The exceptions encountered while processing the manifest
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ProcessedManifest.AddUserSymbol(System.String,System.Object)">
            <summary>
            Adds a symbol defined in the manifest file to the processed manifest.
            If <paramref name="value" /> constains symbol references, those references
            are resolved before <paramref name="symbol" /> is added to the processed
            manifest.
            </summary>
            <param name="symbol">The symbol to add</param>
            <param name="value">The value for the symbol</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ProcessedManifest.AddBuiltInSymbol(System.String,System.String)">
            <summary>
            Adds a built-in symbol to the processed manifest
            </summary>
            <param name="symbol">The symbol to add</param>
            <param name="value">The value for the symbol</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ProcessedManifest.ResolveSymbols(System.String)">
            <summary>
            Resolves the symbols in <paramref name="s" />, returning a copy of <paramref name="s" />
            with symbol references replaced with their values.
            </summary>
            <param name="s">The string whose symbols are to be resolved</param>
            <returns>The string with symbols resolved</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ProcessedManifest.AddException(System.Exception)">
            <summary>
            Adds an exception
            to the processed manifest
            </summary>
            <param name="ex">The exception to add</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ProcessedManifest.Trace(System.Predicate{System.String},System.Boolean)">
            <summary>
            Traces the contents of a processed manifest
            </summary>
            <param name="symbolPredicate">The predicate that selects symbols to use</param>
            <param name="symbolsOnly">Indicates whether just symbols should be traced</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ProcessedManifest.TraceSymbols(System.Predicate{System.String})">
            <summary>
            Traces the contents of the processed manifest's Symbols collection
            </summary>
            <param name="symbolPredicate">The predicate that selects symbols to use</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ProcessedManifest.TraceImages">
            <summary>
            Traces the contents of the processed manifest's Images collection
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ProcessedManifest.TraceImageLists">
            <summary>
            Traces the contents of the processed manifest's ImageLists collection
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ProcessedManifest.TraceCount(System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Traces an integer count
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ProcessedManifest.TraceException(System.Exception)">
            <summary>
            Traces information about an exception
            </summary>
            <param name="ex">The exception</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.RealizedImageInformation">
            <summary>
            Contains information about an image returned from an image bundle
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.RealizedImageInformation.RequestedImage">
            <summary>
            The descriptor for the requested image
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.RealizedImageInformation.NativeImage">
            <summary>
            The descriptor for the native image.  Each image type has a "native" format
            in which it is naturally created.  If the requested image format isn't the
            same as the native format, the native format is realized first and then converted
            to the requested format.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.ResourceBundle">
             <summary>
             Container for all of the different resources realized for a given moniker.
            
             ResourceBundle has the following inheritance tree
             + ImageBundle - abstract representation of an image
               + SingleImageBundle - represents a single image, with possibly multiple source images for different DPIs
               + CompositeImageBundle - represents a composition of multiple other images into a new single image
               + SearchImageBundle - a bundle used exclusively for finding an index in a sorted list for a real ImageBundle
             + ImageListBundle - represents a list of images, where each individual image in the list comes from an ImageBundle
             </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.ResourceBundle.SerializationVersion">
            <summary>
            The version of the serialization stream.  This should be incremented every time the
            serialization format changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.Serialize(Microsoft.VisualStudio.Utilities.VersionedBinaryWriter)">
            <summary>
            Serializes this object to <paramref name="stream" />
            </summary>
            <param name="writer">The writer to serialize to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.SerializeCore(Microsoft.VisualStudio.Utilities.VersionedBinaryWriter)">
            <summary>
            Serializes this object to <paramref name="stream" />
            </summary>
            <param name="writer">The writer to serialize to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.#ctor(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.Deserialize(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserializes an instance of this type from <paramref name="stream" />
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.WriteSerializedType(System.IO.BinaryWriter)">
            <summary>
            Writes an indicator for the serialized type, so we know what to create when we deserialize.
            </summary>
            <param name="writer">The writer to use</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.ReadSerializedType(System.IO.BinaryReader)">
            <summary>
            Reads the indicator for the serialized type
            </summary>
            <param name="reader">The reader to use</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ResourceBundle.Moniker">
            <summary>
            The moniker for this bundle
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ResourceBundle.ManifestDescriptorIndex">
            <summary>
            The index of this bundle's manifest in the ImageLibrary's _manifestDescriptors collection.
            This will be InvalidManifestDescriptorIndex for custom bundles.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ResourceBundle.RealizedImageCount">
            <summary>
            The number of images entries in this bundle
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.ResourceBundle.RealizedImages">
             <summary>
             The collection of realized images for this bundle
            
             The backing field for the property isn't a Lazy&lt;ImageEntryCollection&gt; because
             it's likely that there will be a large number of these objects in use at any one
             time and we want to keep the size of this object as small as possible.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.GetImage(Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Returns the image resource matching <paramref name="attributes" />
            </summary>
            <param name="library">The image library</param>
            <param name="attributes">The attributes of the requested image resource</param>
            <returns>A structure describing the returned image, or null if the image couldn't be returned</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.GetResource(Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageAttributes,Microsoft.VisualStudio.Imaging.ImageFormat,Microsoft.VisualStudio.Imaging.ImageKind)">
            <summary>
            Returns the image at a given size, kind and format
            </summary>
            <param name="library">The image library</param>
            <param name="desiredAttributes">Describes the desired attributes for the resource</param>
            <param name="nativeFormat">The native ImageFormat for the resource</param>
            <param name="nativeKind">The native ImageKind for the resource</param>
            <returns>A structure describing the returned image, or null if the image couldn't be returned</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.GetResourceCore(Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageAttributes,Microsoft.VisualStudio.Imaging.ImageFormat,Microsoft.VisualStudio.Imaging.ImageKind)">
            <summary>
            Returns the image at a given size, kind and format
            </summary>
            <param name="library">The image library</param>
            <param name="desiredAttributes">Describes the desired attributes for the resource</param>
            <param name="nativeFormat">The native ImageFormat for the resource</param>
            <param name="nativeKind">The native ImageKind for the resource</param>
            <returns>A structure describing the returned image, or null if the image couldn't be realized</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.RealizeNativeFormatResource(Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Realizes the resource in its native format at a given size.
            </summary>
            <param name="library">The image library</param>
            <param name="attributes">The attributes of the resource</param>
            <returns>The realized resource</returns>
            <remarks>
            For testing purposes, implementers of this method are expected to call the
            RaiseBeforeImageRealized and RaiseAfterImageRealized events.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.ValidateImageType(System.Object,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Validates that the image type is what's expected for the given attributes
            </summary>
            <param name="image">The image</param>
            <param name="attributes">The attributes of the image</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.GetExpectedImageType(Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Returns the type that's expected to be returned for the given image format.
            </summary>
            <param name="attributes">The attributes of the image</param>
            <returns>The type that GetResouce should return for the format</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.ConvertImage(System.Object,Microsoft.VisualStudio.Imaging.ImageFormat,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Converts an image to the requested format
            </summary>
            <param name="image">The image to convert</param>
            <param name="originalFormat">The format to convert from</param>
            <param name="desiredAttributes">Describes the desired attributes of the image</param>
            <returns>The converted image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.CacheImage(Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageAttributeTuple)">
            <summary>
            Caches an image in the realized images collection
            </summary>
            <param name="library">The image library</param>
            <param name="tuple">Describes the image to be cached</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.ReferenceKindFromAttributes(Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Returns the ReferenceKind to use for <paramref name="attributes" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.ReferenceKindFromFormat(Microsoft.VisualStudio.Imaging.ImageFormat)">
            <summary>
            Returns the ReferenceKind to use for <paramref name="format" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.ConvertBitmap(System.Object,Microsoft.VisualStudio.Imaging.ImageFormat,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Converts a bitmap to the desired format
            </summary>
            <param name="image">The image to convert</param>
            <param name="originalFormat">The format to convert from</param>
            <param name="desiredAttributes">Describes the desired attributes of the image</param>
            <returns>The converted image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.ConvertIcon(System.Object,Microsoft.VisualStudio.Imaging.ImageFormat,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Converts an icon to the desired format
            </summary>
            <param name="image">The image to convert</param>
            <param name="originalFormat">The format to convert from</param>
            <param name="desiredAttributes">Describes the desired attributes of the image</param>
            <returns>The converted image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.ConvertImageList(System.Object,Microsoft.VisualStudio.Imaging.ImageFormat,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Converts an image list to the desired format
            </summary>
            <param name="image">The image to convert</param>
            <param name="originalFormat">The format to convert from</param>
            <param name="desiredAttributes">Describes the desired attributes of the image</param>
            <returns>The converted image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.ToString">
            <summary>
            Returns a string representation of this object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.Equals(Microsoft.VisualStudio.Imaging.ResourceBundle)">
            <summary>
            Compares this bundle to another, comparing by moniker
            </summary>
            <param name="other">The bundle to compare to</param>
            <returns>True if the monikers are equal, false if they are not</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.ResourceBundle.CompareTo(Microsoft.VisualStudio.Imaging.ResourceBundle)">
            <summary>
            Compares this bundle to another, comparing by moniker
            </summary>
            <param name="other">The bundle to compare to</param>
            <returns>
            If this bundle is less than <paramref name="other" />, returns a value less than zero.
            If this bundle is equal to <paramref name="other" />, returns zero.
            If this bundle is greater than <paramref name="other" />, returns a value greater than zero.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_CannotRemoveImageForProgId">
            <summary>
              Looks up a localized string similar to Cannot remove an image with a moniker generated by TryGetMonikerForExtension or TryGetMonikerForProgId.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_CannotRemoveManifestImage">
            <summary>
              Looks up a localized string similar to Cannot remove an image read from an image manifest.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_CannotRemoveManifestImageList">
            <summary>
              Looks up a localized string similar to Cannot remove an image list read from an image manifest.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_CannotReplaceExistingImage">
            <summary>
              Looks up a localized string similar to Cannot replace an existing image.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_CannotReplaceExistingImageList">
            <summary>
              Looks up a localized string similar to Cannot replace an existing image list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_DefaultImageLibraryAlreadyExists">
            <summary>
              Looks up a localized string similar to The default ImageLibrary already exists..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_DuplicateFormattingDescriptor">
            <summary>
              Looks up a localized string similar to A formatting descriptor has already been added for {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_DuplicateMoniker">
            <summary>
              Looks up a localized string similar to A bundle with moniker {0} already exists in the collection at index {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_EmptyImageSources">
            <summary>
              Looks up a localized string similar to The image source files cannot be empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InsufficientImageListImages">
            <summary>
              Looks up a localized string similar to Must specify at least one image moniker for the image list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InsufficientImageSources">
            <summary>
              Looks up a localized string similar to Must provide at least one source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidAttributesStructSize">
            <summary>
              Looks up a localized string similar to The StructSize field of the ImageAttributes structure is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidDpi">
            <summary>
              Looks up a localized string similar to Dpi must be non-negative.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidFlagsValue">
            <summary>
              Looks up a localized string similar to Invalid Flags value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidFormatString">
            <summary>
              Looks up a localized string similar to Invalid format string: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidHeightRange">
            <summary>
              Looks up a localized string similar to The minimum height must be less than or equal to the maximum height.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidImageFormat">
            <summary>
              Looks up a localized string similar to Invalid image format: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidImageFormatEnum">
            <summary>
              Looks up a localized string similar to Image format must be one of DF_Win32, DF_WinForms, or DF_WPF.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidImageHorizontalAlignment">
            <summary>
              Looks up a localized string similar to {0} is not a valid value for ImageHorizontalAlignment..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidImageKind">
            <summary>
              Looks up a localized string similar to Invalid image kind: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidImageMoniker">
            <summary>
              Looks up a localized string similar to A moniker of {0} cannot be used for an image or an image list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidImageSize">
            <summary>
              Looks up a localized string similar to Invalid image size: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidImageType">
            <summary>
              Looks up a localized string similar to "{0}" is an invalid image type for a {2} {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidImageTypeValue">
            <summary>
              Looks up a localized string similar to Invalid ImageType value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidImageVerticalAlignment">
            <summary>
              Looks up a localized string similar to {0} is not a valid value for ImageVerticalAlignment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidNativeResourceKind">
            <summary>
              Looks up a localized string similar to {0} is not a valid value for Kind.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidPackageGuid">
            <summary>
              Looks up a localized string similar to Error parsing the PackageGuid attribute: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_InvalidWidthRange">
            <summary>
              Looks up a localized string similar to The minimum width must be less than or equal to the maximum width.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_NonWhiteGrayscaleBiasColor">
            <summary>
              Looks up a localized string similar to Specifying non-white bias color is not supported for images with PixelFormat other than BGRA32, or larger than 128x128..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_NotIcon">
            <summary>
              Looks up a localized string similar to The native resource must be of Kind=Icon.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_NoWpfImageList">
            <summary>
              Looks up a localized string similar to Cannot return an image list in WPF format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_NoWpfImageList1">
            <summary>
              Looks up a localized string similar to IT_ImageList is incompatible with DF_WPF.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_PictureIsNotBitmap">
            <summary>
              Looks up a localized string similar to The supplied image is not a bitmap, or is not of the supported format..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_SymbolAlreadyDefined">
            <summary>
              Looks up a localized string similar to The symbol "{0}" is already defined, additional definition ignored.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_UndefinedSymbol">
            <summary>
              Looks up a localized string similar to Symbol "{0}" is not defined.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_UnexpectedImageType">
            <summary>
              Looks up a localized string similar to Image is not the expected type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_UnexpectedStreamFormat">
            <summary>
              Looks up a localized string similar to Unexpected stream format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_UnknownImage">
            <summary>
              Looks up a localized string similar to The image with moniker {0} doesn't exist in the library.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_UnknownImageList">
            <summary>
              Looks up a localized string similar to The image list with moniker {0} doesn't exist in the library.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_UnknownSerializationType">
            <summary>
              Looks up a localized string similar to Unknown serialization type: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_UnsupportedContentType">
            <summary>
              Looks up a localized string similar to Unsupported content type: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_UnsupportedElementType">
            <summary>
              Looks up a localized string similar to Unsupported element type.  The element must be a UIElement or a BitmapSource..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_UnsupportedImageConversionKind">
            <summary>
              Looks up a localized string similar to Converting {0} objects is not supported.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_UnsupportedImageFileType">
            <summary>
              Looks up a localized string similar to The only supported image file types are .png and .xaml.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_UnsupportedImageSourceType">
            <summary>
              Looks up a localized string similar to The only supported ImageSource types are BitmapSource and DrawingImage..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_UnsupportedNativeResourceType">
            <summary>
              Looks up a localized string similar to Unsupported native resource type: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_UnsupportedUri">
            <summary>
              Looks up a localized string similar to The Uri must be either a relative Uri or an absolute Uri using the file:// scheme.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_ValueNonreal">
            <summary>
              Looks up a localized string similar to Value must be a real number.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_ValueTooLarge">
            <summary>
              Looks up a localized string similar to Value must be less than {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.Error_ValueTooSmall">
            <summary>
              Looks up a localized string similar to Value must be greater than {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.ExcessBubbleCountFormat">
            <summary>
              Looks up a localized string similar to {0}+.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.GeneralSerializationError">
            <summary>
              Looks up a localized string similar to An error occurred during serialization.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.Resources.ValidateError_BitmapNotBgra32">
            <summary>
              Looks up a localized string similar to The supplied bitmap bits do not represent a complete BGRA32 bitmap..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.SimpleColor">
            <summary>
            This struct is meant to be used instead of System.Windows.Media.Color. It does not calculate the sRGB values on
            creation like System.Windows.Media.Color. The reason for avoiding sRGB calculation is that the majority of the
            time it's not needed, and doing that calculation results in a call to COMDouble.PowHelperSimple which can
            result in hangs.
            </summary>
            <remarks>
            Do not use the System.Math class in this struct
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.SimpleColor.ScaledChannelValues">
             <summary>
             Since the RGB channels of the Color struct are bytes, they have a finite and small number of values, so
             instead of at runtime constantly calculating the sRGB values used for luminance and constrast ratio
             calculation, just precalculate them and put them into a lookup table.
            
             The formula for generating these values comes from:
             https://www.w3.org/TR/WCAG20/#relativeluminancedef
             </summary>
             <remarks>
             Internal for unit testing
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SimpleColor.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new SimpleColor structure using the specified RGB alpha channel and color channel values.
            </summary>
            <param name="a">The alpha channel</param>
            <param name="r">The red channel</param>
            <param name="g">The green channel</param>
            <param name="b">The blue channel</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SimpleColor.FromRgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new SimpleColor structure using the specified RGB color channel values.
            </summary>
            <param name="r">The red channel</param>
            <param name="g">The green channel</param>
            <param name="b">The blue channel</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SimpleColor.FromRgba(System.UInt32)">
            <summary>
            Creates a new SimpleColor structure using the specified VS_RGBA uint value.
            </summary>
            <param name="rgba">A uint value representing a VS_RGBA (0xAABBGGRR)color value</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SimpleColor.BlendWith(Microsoft.VisualStudio.Imaging.SimpleColor)">
            <summary>
            Computes the result of alpha-blending the given <paramref name="foreground" /> onto the current SimpleColor
            using the algorithm described at https://en.wikipedia.org/wiki/Alpha_compositing.
            </summary>
            <param name="foreground">A foreground color which may be partially transparent</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SimpleColor.ContrastWith(Microsoft.VisualStudio.Imaging.SimpleColor)">
            <summary>
            Returns the contrast ratio between the given <paramref name="foreground" /> and the current SimpleColor
            according to https://www.w3.org/TR/WCAG20/#contrast-ratiodef.
            </summary>
            <param name="other">Another color which may be partially transparent</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.SingleImageBundle">
            <summary>
            Represents an image that has multiple sources at different resolutions.  When rendered,
            a source image (from a SourceDescriptor) that best matches the requested resolution will be chosen and rasterized,
            scaled, and themed as necessary.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.SingleImageBundle._sources">
            <summary>
            This is either a SourceDescriptor or a List&lt;SourceDescriptor&gt;.  Storing
            either a single or multiple items in a single field allows for frugal list
            usage (so that images with only a single SourceDescriptor do not require allocating
            a full List&lt;SourceDescriptor&gt;.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.SingleImageBundle._canTheme">
            <summary>
            Can the image be themed?  Individual SourceDescriptors can override this
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SingleImageBundle.#ctor(Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.SourceDescriptor,System.Boolean)">
            <summary>
            Constructs an ImageBundle
            </summary>
            <param name="moniker">The moniker for the bundle</param>
            <param name="sources">The sources for the image</param>
            <param name="canTheme">Can the image be themed?</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SingleImageBundle.#ctor(Microsoft.VisualStudio.Imaging.ImageMoniker,System.Collections.Generic.ICollection{Microsoft.VisualStudio.Imaging.SourceDescriptor},System.Boolean)">
            <summary>
            Constructs an ImageBundle
            </summary>
            <param name="moniker">The moniker for the bundle</param>
            <param name="sources">The sources for the image</param>
            <param name="canTheme">Can the image be themed?</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SingleImageBundle.Create(Microsoft.VisualStudio.Imaging.ImageMoniker,System.String,System.Int32,System.Boolean)">
            <summary>
            Creates an ImageBundle for the image defined by the icon resource located at filename/index.
            </summary>
            <param name="moniker">The moniker for the new bundle</param>
            <param name="filename">The file that contains the image resource</param>
            <param name="index">
            The index or ID of the resource.  If the index is greater than or equal to zero,
            it is treated as an index of the icon into the filename's icon table.  If it is
            less than zero, its absolute value is used as the resource ID for the icon.
            </param>
            <param name="canTheme">Can the image be themed?</param>
            <returns>A bundle that can be used for searching</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.SingleImageBundle.SerializationVersion">
            <summary>
            The version of the serialization stream.  This should be incremented every time the
            serialization format changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SingleImageBundle.SerializeCore(Microsoft.VisualStudio.Utilities.VersionedBinaryWriter)">
            <summary>
            Serializes the object to <paramref name="stream" />
            </summary>
            <param name="writer">The writer to serialize to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SingleImageBundle.#ctor(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SingleImageBundle.AddSource(Microsoft.VisualStudio.Imaging.SourceDescriptor)">
            <summary>
            Adds a new source to this bundle
            </summary>
            <param name="source">The source to add</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SingleImageBundle.GetAllSources">
            <summary>
            Returns an array of all source descriptors for this bundle
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SingleImageBundle.RealizeNativeFormatResource(Microsoft.VisualStudio.Imaging.ImageLibrary,Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Realizes the resource in its native format for the given attributes.
            </summary>
            <param name="library">The image library</param>
            <param name="attributes">The attributes of the resource</param>
            <returns>The realized resource</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SingleImageBundle.GetMatchingSources(Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Returns the source descriptors that can be used to realize the image for a
            given set of attributes.  The descriptors are ordered by how well they match
            the attributes, from best match to worst.
            </summary>
            <param name="attributes">The attributes of the resource</param>
            <returns>The collection of matching source descriptors</returns>
            <remarks>Internal access for unit testing</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SingleImageBundle.GetMatches(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Imaging.SourceDescriptor},Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Returns a collection of descriptors in <paramref name="sources" /> that match <paramref name="attributes" />
            </summary>
            <param name="sources">The collection of descriptors to search for matches</param>
            <param name="attributes">The attributes to match</param>
            <returns>The matching descriptors</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SingleImageBundle.Sort(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Imaging.SourceDescriptor},Microsoft.VisualStudio.Imaging.ImageAttributes)">
            <summary>
            Returns a collection of descriptors in <paramref name="sources" /> that match <paramref name="attributes" />
            </summary>
            <param name="sources">The collection of descriptors to search for matches</param>
            <param name="attributes">The attributes to match</param>
            <returns>The matching descriptors</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SingleImageBundle.SourceDescriptorComparer.Compare(Microsoft.VisualStudio.Imaging.SourceDescriptor,Microsoft.VisualStudio.Imaging.SourceDescriptor)">
            <summary>
            Compares two source descriptors
            </summary>
            <param name="s1">The first source descriptor</param>
            <param name="s2">The second source descriptor</param>
            <returns>
            A value less than zero if <paramref name="s1" /> is less than <paramref name="s2" />.
            Zero if <paramref name="s1" /> is equal to <paramref name="s2" />.
            A value greater than zero if <paramref name="s1" /> is greater than <paramref name="s2" />.
            </returns>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.SourceBackground.Any">
            <summary>
            The source can be used on any background
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.SourceBackground.Light">
            <summary>
            The source can be used on a light background
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.SourceBackground.Dark">
            <summary>
            The source can be used on a dark background
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.SourceBackground.HighContrast">
            <summary>
            The source can be used on any background in high contrast mode
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.SourceBackground.HighContrastLight">
            <summary>
            The source can be used on a light background in high contrast mode
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.SourceBackground.HighContrastDark">
            <summary>
            The source can be used on a dark background in high contrast mode
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.SourceDescriptor">
            <summary>
            Describes an image's &lt;Source&gt; element in the image manifest
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.SourceDescriptor.SerializationVersion">
            <summary>
            The version of the serialization stream.  This should be incremented every time the
            serialization format changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.Serialize(Microsoft.VisualStudio.Utilities.VersionedBinaryWriter)">
            <summary>
            Serializes this object to <paramref name="stream" />
            </summary>
            <param name="writer">The writer to serialize to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.SerializeCore(Microsoft.VisualStudio.Utilities.VersionedBinaryWriter)">
            <summary>
            Serializes this object to <paramref name="stream" />
            </summary>
            <param name="writer">The writer to serialize to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.#ctor(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserialization constructor
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.Deserialize(Microsoft.VisualStudio.Utilities.VersionedBinaryReader)">
            <summary>
            Deserializes an instance of this type from <paramref name="reader" />
            </summary>
            <param name="reader">The reader to deserialize from</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.WriteSerializedType(System.IO.BinaryWriter)">
            <summary>
            Writes an indicator for the serialized type, so we know what to create when we deserialize.
            </summary>
            <param name="writer">The writer to use</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.ReadSerializedType(System.IO.BinaryReader)">
            <summary>
            Reads the indicator for the serialized type
            </summary>
            <param name="reader">The reader to use</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.SourceDescriptor.MinDeviceSize">
            <summary>
            The minimum device size of the image, when loaded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.SourceDescriptor.MaxDeviceSize">
            <summary>
            The maximum device size of the image, when loaded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.SourceDescriptor.IsSizeKnown">
            <summary>
            Whether the image size is known.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.SourceDescriptor.NativeResource">
            <summary>
            The NativeResource from which the image is be loaded.  This can be null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.SourceDescriptor.IsNativeResource">
            <summary>
            Indicates whether the source is a native resource.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.SourceDescriptor.Background">
            <summary>
            The background for which the source is intended
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.SourceDescriptor.CanTheme">
            <summary>
            Indicates whether the image can be themed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.SourceDescriptor.IsAnyBackground">
            <summary>
            Indicates whether the image is intended to be used on any background.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.SourceDescriptor.IsDarkBackground">
            <summary>
            Indicates whether the image is intended to be used on a dark background.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.SourceDescriptor.IsHighContrast">
            <summary>
            Indicates whether the image is intended for use in high-contrast color schemes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.SourceDescriptor.IsLightBackground">
            <summary>
            Indicates whether the image is intended to be used on a light background.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.SourceDescriptor.IsSizeNeutral">
            <summary>
            Indicates whether this descriptor should be used when there isn't an appropriate
            size-specific descriptor available.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.GetNativeResourceBytes">
            <summary>
            Returns the bytes for this descriptor's native resource
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.LoadImageFromNativeIcon(Microsoft.VisualStudio.Utilities.Int16Size)">
            <summary>
            Returns the bytes for this descriptor's native resource
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.ToString">
            <summary>
            Returns a string representation of this object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.MatchesSize(Microsoft.VisualStudio.Utilities.Int16Size)">
            <summary>
            Indicates whether the descriptor can satisfy requests for images of the given size
            </summary>
            <param name="size">The size to test</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.SourceDescriptor.SizeString">
            <summary>
            The string representation of the size, used by ToString
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.LoadImage(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.Imaging.ImageMoniker,Microsoft.VisualStudio.Imaging.ImageAttributes,System.Boolean,System.Boolean,System.Windows.Media.Color)">
            <summary>
            Loads an image at a given size
            </summary>
            <param name="moniker">The moniker of the resource</param>
            <param name="attributes">The attributes of the resource</param>
            <param name="canTheme">Can the image be themed?</param>
            <param name="debugMode">If true, decorate the image before returning.</param>
            <param name="debugColor">The color used for drawing the debug pattern</param>
            <returns>The image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.LoadNativeImage(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.Utilities.Int16Size)">
            <summary>
            Loads a native resource
            </summary>
            <param name="source">The source for the image</param>
            <param name="deviceSize">The size of the returned image, in device units</param>
            <returns>The image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.LoadManagedImage(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.Utilities.Int16Size)">
            <summary>
            Loads a managed resource
            </summary>
            <param name="jtf">The joinable task factory to use for threading operations</param>
            <param name="deviceSize">The size of the returned image, in device units</param>
            <returns>The image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.LoadXamlImage(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Uri,Microsoft.VisualStudio.Utilities.Int16Size)">
            <summary>
            Loads a XAML-defined image at a given size
            </summary>
            <param name="jtf">The joinable task factory to use for threading operations</param>
            <param name="source">The source URI for the image</param>
            <param name="deviceSize">The size of the returned image, in device units</param>
            <returns>The image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.LoadXamlImage(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.IO.Stream,Microsoft.VisualStudio.Utilities.Int16Size)">
            <summary>
            Loads a XAML-defined image at a given size
            </summary>
            <param name="jtf">The joinable task factory to use for threading operations</param>
            <param name="stream">The BAML stream to load the image from</param>
            <param name="deviceSize">The size of the returned image, in device units</param>
            <returns>The image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.LoadXamlImage(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,Microsoft.VisualStudio.Utilities.Int16Size)">
            <summary>
            Loads an image defined in a XAML string at a given size
            </summary>
            <param name="jtf">The joinable task factory to use for threading operations</param>
            <param name="xaml">The XAML for the image</param>
            <param name="deviceSize">The size of the returned image, in device units</param>
            <returns>The image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.LoadXamlImage(System.Object,Microsoft.VisualStudio.Utilities.Int16Size)">
            <summary>
            Loads a XAML-defined image at a given size
            </summary>
            <param name="imageAsObject">The image object</param>
            <param name="deviceSize">The size of the returned image, in device units</param>
            <returns>The image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.LoadBitmappedImage(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.IO.Stream,Microsoft.VisualStudio.Utilities.Int16Size)">
            <summary>
            Loads a bitmapped image at a given size
            </summary>
            <param name="jtf">The joinable task factory to use for threading operations</param>
            <param name="stream">The stream to load the image from</param>
            <param name="deviceSize">The size of the returned image, in device units</param>
            <returns>The image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.LoadImageFromFile(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,Microsoft.VisualStudio.Utilities.Int16Size)">
            <summary>
            Load the bitmap source given the source file path for supported image file types.
            </summary>
            <param name="jtf">The joinable task factory to use for threading operations</param>
            <param name="filePath">The source file path for the image.</param>
            <param name="deviceSize">The size of the returned image, in device units</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.DetermineDeviceSizes(Microsoft.VisualStudio.Utilities.Int16Size@,Microsoft.VisualStudio.Utilities.Int16Size@)">
            <summary>
            Determine the device size of the image.
            </summary>
            <param name="minDeviceSize">The minimum device size of the image.</param>
            <param name="maxDeviceSize">The maximum device size of the image.</param>
            <remarks>Needs to be overridden by any derived class that supports delayed determination of image sizes.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.StretchImage(System.Windows.Media.Imaging.BitmapSource,Microsoft.VisualStudio.Utilities.Int16Size)">
            <summary>
            Stretches an image source to a given size.  If the image is already
            the requested size, the original image is returned.
            </summary>
            <param name="image">The original image</param>
            <param name="deviceSize">The size of the returned image, in device units</param>
            <returns>The stretched image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.SelectScalingMode(System.Int32)">
            <summary>
            Chooses the bitmap scaling mode to use for a given scaling percentage.
            </summary>
            <param name="scalingPercent">The percent by which an image will be scaled</param>
            <returns>The scaling mode to use</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.RasterizeElement(System.Windows.FrameworkElement,Microsoft.VisualStudio.Utilities.Int16Size)">
            <summary>
            Renders <paramref name="element" /> into a bitmap of a given size
            </summary>
            <param name="element">The element to render</param>
            <param name="deviceSize">The size of the returned image, in device units</param>
            <returns>The image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.ThemeImage(System.Windows.Media.Imaging.BitmapSource,Microsoft.VisualStudio.Imaging.ImageAttributes,System.Boolean)">
            <summary>
            Themes/grayscales <paramref name="image" /> according to the settings in <paramref name="attributes" />
            </summary>
            <param name="image">The image to theme</param>
            <param name="attributes">The attributes controlling the theming process</param>
            <param name="canTheme">Indicates whether the image is eligible for theming</param>
            <returns>The themed image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.AddDebugShading(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Color)">
             <summary>
             Adds a border and background shading for easier debugging
             </summary>
            
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.MakeAbsoluteUri(System.Uri)">
            <summary>
            Returns the absolute form of <paramref name="uri" />.
            </summary>
            <param name="uri">The Uri to make absolute</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.SourceDescriptor.CreateDefaultBaseUri">
            <summary>
            Create the DefaultBaseUri for ImageBundle
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.TelemetryEventArgs">
            <summary>
            Event argument to be used with the beginning event of a pair which includes context and an end event to call
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.TelemetryEventArgs.Context">
            <summary>
            Used to include additional data about the event
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.TelemetryEventArgs.Disposer">
            <summary>
            The object to dispose at the end of the duration of the event
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.TernaryStringTable">
             <summary>
             Stores strings in a ternary tree in order to reduce the amount of memory consumed. This should be used 
             if you have a large number of strings that share prefixes.
            
             We use this for UriSourceDescriptor because it has ~7,000 strings that share similar prefixes and 
             reduces memory from ~1.2MB down to less then 600KB.
            
             Microsoft.VisualStudio.ConnectedServices.Package2;Component/Resources/Xaml/AddConnectedService.xaml
             Microsoft.VisualStudio.ConnectedServices.Package2;Component/Resources/Xaml/ConnectedService.xaml
             Microsoft.VisualStudio.ImageCatalog;Component//Png/Abbreviation.16.16.png
             Microsoft.VisualStudio.ImageCatalog;Component//Png/AboutBox.16.16.png
             Microsoft.VisualStudio.ImageCatalog;Component//Png/AbsolutePosition.16.16.png
             Microsoft.VisualStudio.ImageCatalog;Component//Png/AbstractAssociation.16.16.png
             Microsoft.VisualStudio.ImageCatalog;Component//Png/AbstractClass.16.16.png
             Microsoft.VisualStudio.ImageCatalog;Component//Png/AbstractCube.16.16.png
             Microsoft.VisualStudio.ImageCatalog;Component//Png/Accelerator.16.16.png
             </summary>
             <example>
             If the following two strings are put into the table:
                 Microsoft.VisualStudio.ImageCatalog;Component//Png/Abbreviation.16.16.png
                 Microsoft.VisualStudio.ImageCatalog;Component//Png/AboutBox.16.16.png
            
             The following tree will be produced:
             
             [0]"Microsoft.VisualStudio.ImageCatalog;"
                   /(LowNodeId)  |(MidNodeId)     \(HighNodeId)
                  /              |                 \
                 /               |                  \
                ▼                |                   ▼
              NULL               ▼                  NULL
                         [1]"Component//"
                          /      |      \
                         /       |       \
                        ▼        |        ▼
                      NULL       |       NULL
                                 ▼
                             [2]"Png/"
                            /    |      \
                           ▼     |       ▼
                         NULL    |      NULL
                                 ▼
                        [3]"Abbreviation.16.16.png"
                            /    |                  \
                           ▼     ▼                   ▼
                         NULL   NULL               [4]"AboutBox.16.16.png"
                                                      /       |           \
                                                     ▼        ▼            ▼
                                                   NULL      NULL         NULL
             </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.TernaryStringTable.Intern(System.String)">
            <summary>
            Returns an integer that can be used to recreate the specified string at a later time by calling Get.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.TernaryStringTable.Get(System.Int32)">
            <summary>
            Gets a string for the specified index.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.TernaryStringTable.Split(System.String)">
            <summary>
            Splits the specified string into parts.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.TernaryStringTable.NewNode(System.Int32,System.String)">
            <summary>
            Creates a node with the specified parentId and returns its Id.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.TernaryStringTable.Node">
            <summary>
            Represents a node in a ternary tree.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.TryGetImageResult.Unknown">
            <summary>
            An unexpected code path was hit or error occurred.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.TryGetImageResult.MonikerNotFound">
            <summary>
            No bundle exists for the given moniker.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.TryGetImageResult.Failed">
            <summary>
            No image has been realized for the given attributes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.TryGetImageResult.Succeeded">
            <summary>
            An image has already been realized for the given attributes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.UriResourceType">
            <summary>
            An enum representing the supported resource stream types for UriSourceDescriptors
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.UriResourceType.Unknown">
            <summary>
            Unset or unsupported resource type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.UriResourceType.Png">
            <summary>
            UriSourceDescriptor wraps a PNG resource
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.UriResourceType.Baml">
            <summary>
            UriSourceDescriptor wraps a compiled XAML resource
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.UriResourceType.Xaml">
            <summary>
            UriSourceDescriptor wraps an uncompiled XAML resource
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Imaging.UriSourceDescriptor.Uri">
            <summary>
            The Uri from which the image is be loaded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.UriSourceDescriptor.ResetStringTable">
            <summary>
            For unit testing only
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Imaging.UriSourceDescriptor.SerializationVersion">
            <summary>
            The version of the serialization stream.  This should be incremented every time the
            serialization format changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Imaging.UriSourceDescriptor.IsFileUri(System.Uri)">
            <summary>
            Determines whether the input uri is in the "file://" form
            </summary>
            <param name="uri">The uri to check</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Imaging.WeakBundleCollection`1">
            <summary>
            Represents a collection of ResourceBundles where the ResourceBundle is stored
            weakly.  External parties are responsible for strongly-referencing the bundle
            to keep it in memory.
            </summary>
            <typeparam name="T">The type of resource bundle stored.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.GrayscaleBitmapSourceConverter">
            <summary>
            Converts an image <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> into a grayscale version of the same image.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.GrayscaleImageConverter">
            <summary>
            Converts a Gel image <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> into a grayscale version of the same image as an <see cref="T:System.Windows.Controls.Image" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ThemedImageConverter">
            <summary>
            Converts an input ImageSource into an Image control whose Source blends in with the target background.  
            This converter performs two conversions.  
            If the inputs are a source BitmapSource, the target background color, and a bool indicating whether or not
            the image should have an enabled appearance, based on these inputs, the following transformations are performed:
            1. The luminosity of the image is transformed so that the constant "halo" luminosity blends in with the background.  This
               has the effect of eliminating the halo visually.  The "halo" luminosity is an immutable constant, and is not calculated
               from the input image
            2. The image is converted to grayscale if the isEnabled parameter is false.  This uses the parameter (optional), which
               should be a "biasColor" used during grayscale transformation.  If the parameter is not specified, White is used as the bias color.
            If the input cannot be converted to a BitmapSource, no image manipulation is performed and the ImageSource is used directly 
            as the Source of the resulting Image control.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ThemedImageSourceConverter">
            <summary>
            Converts an ImageSource into another ImageSource.  If the input image ia a BitmapSource, the transformed 
            BitmapSource has its halo color mapped to the given background color and is conditionally rendered as disabled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities">
            <summary>
            Class containing utility methods for grayscaling and transforming color spaces
            within images.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.HaloLuminosity">
            <summary>
            The fixed luminosity used by halos in VS images
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.HighContrastCutOffLuminosity">
            <summary>
            The luminosity value used to increase contrast in HighContrast modes.
            The value should be less than 0.5, as the [HighContrastCutOffLuminosity, 1-HighContrastCutOffLuminosity] luminosity range is scaled to become [0,1]
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ImageBackgroundColorProperty">
            <summary>
            Gets or sets the Color used for image theming. This target color is used to map the "halo" color in an image with the target
            background color.  This value should be attached on the same UIElement that the Background color is set on when images
            are drawn directly on that Background.  The reason Background is not used directly is twofold:
            1. Backgrounds which are set to Transparent would require a visual tree walk to find the real background.
            2. Background is a Brush, not a Color, which would require interpretation to arrive at a Color instead.
            3. The ultimate background the image is drawn on may not be the desired image to use for theming, for example
               when a selection brush is conditionally shown in a TreeView.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ThemeScrollBarsProperty">
             <summary>
             Controls whether the ScrollBars of this element and its descendants have themed scrollbars:
            
               True  - ScrollBars are themed
               False - ScrollBars are not themed
               null  - ScrollBar theme state is inherited
            
             Attached to FrameworkElement
             </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ThemeScrollBarsChanged">
            <summary>
            Raised with the ThemeScrollBars property changes on a dependency object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.GrayscaleDIBits(System.Byte[],System.Int32,System.Windows.Media.Color)">
            <summary>
            Transforms a BGRA32 device-independent bitmap to grayscale.
            </summary>
            <param name="pixels">The raw pixels from the DIB.</param>
            <param name="biasColor">The bias color used to weight the grayscale image.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.GetOrCreateThemedBitmapSource(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Color,System.Boolean,System.Windows.Media.Color)">
            <summary>
            Converts an input BitmapSource into an BitmapSource that blends in with the target background.  This converter performs
            two conversions.
            1. The luminosity of the image is transformed so that the constant "halo" luminosity blends in with the background.  This
               has the effect of eliminating the halo visually.  The "halo" luminosity is an immutable constant, and is not calculated
               from the input image.
            2. The image is converted to grayscale if the isEnabled parameter is false.  This uses the "biasColor" to determine how
               to transform the image to grayscale.
            </summary>
            <param name="inputImage">The input BitmapSource.</param>
            <param name="backgroundColor">The color which the halo color should be targeted to match within the bitmap.</param>
            <param name="isEnabled">True if the bitmap should be rendered enabled, false if it should be disabled (grayscaled).</param>
            <param name="grayscaleBiasColor">The color used for biasing grayscale if the image is disabled.</param>
            <returns>A new BitmapSource with the requested transformations applied.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.GetOrCreateThemedBitmapSource(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Color,System.Boolean,System.Windows.Media.Color,System.Boolean,System.Boolean)">
            <summary>
            Converts an input BitmapSource into an BitmapSource that blends in with the target background.  This converter performs
            two conversions.
            1. The luminosity of the image is transformed so that the constant "halo" luminosity blends in with the background.  This
               has the effect of eliminating the halo visually.  The "halo" luminosity is an immutable constant, and is not calculated
               from the input image.
            2. The image is converted to grayscale if the isEnabled parameter is false.  This uses the "biasColor" to determine how
               to transform the image to grayscale.
            </summary>
            <param name="inputImage">The input BitmapSource.</param>
            <param name="backgroundColor">The color which the halo color should be targeted to match within the bitmap.</param>
            <param name="isEnabled">True if the bitmap should be rendered enabled, false if it should be disabled (grayscaled).</param>
            <param name="grayscaleBiasColor">The color used for biasing grayscale if the image is disabled.</param>
            <param name="isHighContrast">True if the image should be themed for high contrast. False if not.</param>
            <param name="enhanceContrastIfNecessary">Whether to render images with enhanced contrast when necessary to meet minimum contrast requirements</param>
            <returns>A new BitmapSource with the requested transformations applied.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.GetOrCreateThemedBitmapSource(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Color,System.Boolean,System.Windows.Media.Color,System.Boolean)">
            <summary>
            Converts an input BitmapSource into an BitmapSource that blends in with the target background.  This converter performs
            two conversions.
            1. The luminosity of the image is transformed so that the constant "halo" luminosity blends in with the background.  This
               has the effect of eliminating the halo visually.  The "halo" luminosity is an immutable constant, and is not calculated
               from the input image.
            2. The image is converted to grayscale if the isEnabled parameter is false.  This uses the "biasColor" to determine how
               to transform the image to grayscale.
            </summary>
            <param name="inputImage">The input BitmapSource.</param>
            <param name="backgroundColor">The color which the halo color should be targeted to match within the bitmap.</param>
            <param name="isEnabled">True if the bitmap should be rendered enabled, false if it should be disabled (grayscaled).</param>
            <param name="grayscaleBiasColor">The color used for biasing grayscale if the image is disabled.</param>
            <param name="isHighContrast">True if the image should be themed for high contrast. False if not.</param>
            <returns>A new BitmapSource with the requested transformations applied.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.GetThemedBitmap(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Creates a new Bitmap, based on the input one, but the new one blends in with the target background.
            </summary>
            <param name="source">The original bitmap, this bitmap is not changed or disposed in this function</param>
            <param name="backgroundColor">The background color(System.Drawing.Color)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.GetThemedBitmap(System.Drawing.Bitmap,System.Drawing.Color,System.Boolean)">
            <summary>
            Creates a new Bitmap, based on the input one, but the new one blends in with the target background.
            </summary>
            <param name="source">The original bitmap, this bitmap is not changed or disposed in this function</param>
            <param name="backgroundColor">The background color(System.Drawing.Color)</param>
            <param name="isHighContrast">If the bitmap should be themed for high contrast</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.GetThemedBitmap(System.Drawing.Bitmap,System.UInt32)">
            <summary>
            Creates a new Bitmap, based on the input one, but the new one blends in with the target background.
            </summary>
            <param name="source">The original bitmap, this bitmap is not changed or disposed in this function</param>
            <param name="backgroundColor">The background color in native ABGR format</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.GetThemedBitmap(System.Drawing.Bitmap,System.UInt32,System.Boolean)">
            <summary>
            Creates a new Bitmap, based on the input one, but the new one blends in with the target background.
            </summary>
            <param name="source">The original bitmap, this bitmap is not changed or disposed in this function</param>
            <param name="backgroundColor">The background color in native ABGR format</param>
            <param name="isHighContrast">If the bitmap should be themed for high contrast</param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.IsImageThemingEnabled">
            <summary>
            Indicates whether image theming is enabled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ThemeDIBits(System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.UInt32)">
            <summary>
            Transforms the given RGBA32 device-independent bitmap bits to try to match the fixed
            halo luminosity to the background luminosity (see TransformLuminosity).
            </summary>
            <param name="pixelCount">The number of pixels to theme</param>
            <param name="pixels">The pixels to theme</param>
            <param name="width">The width of the bitmap</param>
            <param name="height">The height of the bitmap</param>
            <param name="isTopDownBitmap">Indicates whether the bitmap's pixels have a top-down arrangement</param>
            <param name="backgroundRgba">The background color to theme to</param>
            <returns>
            True if the image bits were themed, and false if the image theming is disabled or
            if the image was not themed due to an opt-out pixel.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ThemeDIBits(System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean)">
            <summary>
            Transforms the given RGBA32 device-independent bitmap bits to try to match the fixed
            halo luminosity to the background luminosity (see TransformLuminosity).
            </summary>
            <param name="pixelCount">The number of pixels to theme</param>
            <param name="pixels">The pixels to theme</param>
            <param name="width">The width of the bitmap</param>
            <param name="height">The height of the bitmap</param>
            <param name="isTopDownBitmap">Indicates whether the bitmap's pixels have a top-down arrangement</param>
            <param name="backgroundRgba">The background color to theme to</param>
            <param name="isHighContrast">If the bitmap should be themed for high contrast</param>
            <returns>
            True if the image bits were themed, and false if the image theming is disabled or
            if the image was not themed due to an opt-out pixel.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ThemeDIBits(System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Transforms the given RGBA32 device-independent bitmap bits to try to match the fixed
            halo luminosity to the background luminosity (see TransformLuminosity).
            </summary>
            <param name="pixelCount">The number of pixels to theme</param>
            <param name="pixels">The pixels to theme</param>
            <param name="width">The width of the bitmap</param>
            <param name="height">The height of the bitmap</param>
            <param name="isTopDownBitmap">Indicates whether the bitmap's pixels have a top-down arrangement</param>
            <param name="backgroundRgba">The background color to theme to</param>
            <param name="isHighContrast">If the bitmap should be themed for high contrast</param>
            <param name="enhanceContrastIfNecessary">Whether to render images with enhanced contrast when necessary to meet minimum contrast requirements</param>
            <returns>
            True if the image bits were themed, and false if the image theming is disabled or
            if the image was not themed due to an opt-out pixel.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.IsOptOutPixelSet(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Determines if the opt-out pixel is set for a bitmap.  Cyan is the sentinel color for opting out of
            icon inversion.  If this pixel is set in the image, then icon inversion is disabled, and the image
            should not be inverted.
            </summary>
            <param name="pixels">The pixels of the bitmap</param>
            <param name="width">The width of the bitmap</param>
            <param name="height">The height of the bitmap</param>
            <param name="isTopDownBitmap">Indicates whether the bitmap's pixels have a top-down arrangement</param>
            <returns>True if the opt-out pixel is set, false if it is not set</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ClearOptOutPixel(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Clears the opt-out pixel in a bitmap, making it black for a 24-bit or less bitmap and
            transparent for a 32-bit bitmap with transparency.  Bitmaps that have a separate mask
            must deal with updating the mask bitmap themselves.
            </summary>
            <param name="pixels">The pixels of the bitmap</param>
            <param name="width">The width of the bitmap</param>
            <param name="height">The height of the bitmap</param>
            <param name="isTopDownBitmap">Indicates whether the bitmap's pixels have a top-down arrangement</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.SetOptOutPixel(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Adds a marker that will prevent ImageThemingUtilities.ThemeDIBits from theming the image a drawing context.
            The marker is a pixel in the top-right corner of the image that is set to #FF00FFFF.
            </summary>
            <param name="source">The bitmap whose opt-out pixel is to be set</param>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ModifyPixelCallback">
            <summary>
            Callback used to modify pixel data in a BitmapSource.
            </summary>
            <param name="originalSource">The BitmapSource whose pixels are being modified.</param>
            <param name="pixels">The Bgra32 pixel values from the BitmapSource</param>
            <returns>True if the bitmap was modified, false if no change were made.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ModifyBitmap(System.Windows.Media.Imaging.BitmapSource,Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ModifyPixelCallback)">
            <summary>
            Modifies a BitmapSource using a callback which recieves the raw pixel data from the BitmapSource,
            creating a new BitmapSource if changes were made.
            </summary>
            <param name="source">The BitmapSource to modify.</param>
            <param name="modifier">The callback which gets passed the pixel data from the bitmap in a Bgra32 format.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.SetOptOutPixel(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets the opt-out pixel in a bitmap.
            </summary>
            <param name="pixels">The pixels of the bitmap</param>
            <param name="width">The width of the bitmap</param>
            <param name="height">The height of the bitmap</param>
            <param name="isTopDownBitmap">Indicates whether the bitmap's pixels have a top-down arrangement</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ComputeOffsetToOptOutPixel(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the offset into a uint[] representing the pixels of a bitmap.
            The opt-out pixel is the top-right pixel in the bitmap.
            </summary>
            <param name="width">The width of the bitmap</param>
            <param name="height">The height of the bitmap</param>
            <param name="isTopDownBitmap">Indicates whether the bitmap's pixels have a top-down arrangement</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ThemePixel(System.Byte@,System.Byte@,System.Byte@,Microsoft.VisualStudio.Imaging.HslColor)">
            <summary>
            Themes the R, G, and B components of an individual pixel.
            </summary>
            <param name="r">The R component of the pixel</param>
            <param name="g">The G component of the pixel</param>
            <param name="b">The B component of the pixel</param>
            <param name="background">The background HSL color</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ThemePixel(System.Byte@,System.Byte@,System.Byte@,Microsoft.VisualStudio.Imaging.HslColor,System.Boolean)">
            <summary>
            Themes the R, G, and B components of an individual pixel.
            </summary>
            <param name="r">The R component of the pixel</param>
            <param name="g">The G component of the pixel</param>
            <param name="b">The B component of the pixel</param>
            <param name="isHighContrast">If the pixel should be themed for HC</param>
            <param name="background">The background HSL color</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ThemePixelWithoutExtraContrast(System.Byte@,System.Byte@,System.Byte@,Microsoft.VisualStudio.Imaging.HslColor,System.Boolean)" -->
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ThemePixelWithExtraContrast(System.Byte@,System.Byte@,System.Byte@,Microsoft.VisualStudio.Imaging.HslColor)">
            <summary>
            Themes the R, G, and B components of an individual pixel.  Use this if the results from <see cref="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.ThemePixel(System.Byte@,System.Byte@,System.Byte@,Microsoft.VisualStudio.Imaging.HslColor,System.Boolean)" />
            result in insufficient contrast with the background.
            </summary>
            <param name="r">The R component of the pixel</param>
            <param name="g">The G component of the pixel</param>
            <param name="b">The B component of the pixel</param>
            <param name="background">The background HSL color</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.TransformLuminosity(System.Double,System.Double,System.Double,Microsoft.VisualStudio.Imaging.HslColor)">
             <summary>
             This function maps a known fixed luminosity used by halos in VS images to the target
             background luminosity.  The net visual effect is that the halos become transparent
             even though they still exist in the image.
            
             To achieve this, we first determine if the background is "light" (luminosity &gt;= 0.5) or
             "dark" (luminosity &lt; 0.5).
            
             If the background is "light", the source luminosity is translated to the target luminosity
             using a piecewise function which is composed of the line segments through the points
             (0,0), (HaloLuminosity, backgroundLuminosity), (1,1).
            
             If the background is "dark", the source luminosity is inverted and translated to the target luminosity
             using a piecewise function which is composed of the line segments through the points
             (1,0), (HaloLuminosity, backgroundLuminosity), (1,0).
             </summary>
             <param name="hue">The hue of the source pixel</param>
             <param name="saturation">The saturation of the source pixel</param>
             <param name="luminosity">The luminosity of the source pixel</param>
             <param name="background">The color of the background</param>
             <returns>The transformed luminosity</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.IsDark(System.Windows.Media.Color)">
            <summary>
            Indicates whether the given color is "dark", based on luminosity and how the color contrasts
            with black/white.
            </summary>
            <param name="color">The color to test</param>
            <returns>True if the color is dark, false if the color is light.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.IsDark(Microsoft.VisualStudio.Imaging.SimpleColor)">
            <summary>
            Indicates whether the given color is "dark", based on luminosity and how the color contrasts
            with black/white.
            </summary>
            <param name="color">The color to test</param>
            <returns>True if the color is dark, false if the color is light.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.IsLight(System.Windows.Media.Color)">
            <summary>
            Indicates whether the given color is "dark", based on luminosity and how the color contrasts
            with black/white.
            </summary>
            <param name="color">The color to test</param>
            <returns>True if the color is light, false if the color is dark.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.Configuration.PixelLuminosityThreshold" -->
        <!-- Badly formed XML comment ignored for member "P:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.Configuration.BackgroundLuminosityInversionThreshold" -->
        <member name="P:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.Configuration.MinimumContrastRatio">
            <summary>
            Gets the minimum contrast ratio that should be considered to meet contrast requirements.  This should be a value greater than one.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.Configuration.MinimumPassingPixelRatio">
            <summary>
            Gets a value between 0 and 1 indicating the ratio of pixels that must meet contrast requirements in order for the entire image to be considered
            meeting contrast requirements.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.Configuration.MinimumContrastEvaluationAlpha">
            <summary>
            Gets a value between 0 and 255 indicating the minimum alpha value a pixel must have to be considered in contrast evaluation.  Pixels with
            alpha lower than this will be ignored as if they were transparent.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.Configuration.MinBlackAndWhiteBackgroundLuminosityRange" -->
        <!-- Badly formed XML comment ignored for member "P:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.Configuration.MaxBlackAndWhiteBackgroundLuminosityRange" -->
        <!-- Badly formed XML comment ignored for member "P:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.Configuration.ForceBlackAndWhite" -->
        <!-- Badly formed XML comment ignored for member "P:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.Configuration.UseBlackAndWhiteForHC" -->
        <member name="P:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.Configuration.ShowEdgePixels">
            <summary>
            Gets a value indicating whether "edge" pixels (those adjacent to the background) should be rendered as bright pink for debugging purposes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.Configuration.ShowLowContrastPixels">
            <summary>
            Gets a value indicating whether low contrast pixels should be rendered as bright pink for debugging purposes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.Configuration.UseBackgroundToChooseBlackAndWhite" -->
        <!-- Badly formed XML comment ignored for member "P:Microsoft.VisualStudio.PlatformUI.ImageThemingUtilities.Configuration.RequireAlphaChannelForBlackAndWhite" -->
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.RPC_E_SERVERCALL_RETRYLATER">
            <summary>
            HRESULTs that can be returned by failed RPC calls
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.RPC_E_SERVERCALL_REJECTED">
            <summary>
            HRESULTs that can be returned by failed RPC calls
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.RPC_E_RETRY">
            <summary>
            HRESULTs that can be returned by failed RPC calls
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.RPC_E_DISCONNECTED">
            <summary>
            HRESULTs that can be returned by failed RPC calls
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.RPC_E_SYS_CALL_FAILED">
            <summary>
            HRESULTs that can be returned by failed RPC calls
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.E_SHARING_VIOLATION">
            <summary>
            HRESULTs that can be returned by failed IO calls
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes the size, position, and z-order of a child, pop-up, or top-level window.
            </summary>
            <param name="hWnd">Handle to the window.</param>
            <param name="hWndInsertAfter">Handle to the window to precede the positioned window in the z-order.</param>
            <param name="x">Specifies the new position of the left side of the window, in client coordinates.</param>
            <param name="y">Specifies the new position of the top of the window, in client coordinates.</param>
            <param name="cx">Specifies the new width of the window, in pixels.</param>
            <param name="cy">Specifies the new height of the window, in pixels.</param>
            <param name="flags">Specifies the window sizing and positioning flags.</param>
            <returns>Nonzero indicates success. Zero indicates failure.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.NativeMethods.SyncObjectAccess">
            <summary>
            Security enumeration
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.CaseSensitiveSearch">
            <summary>
            The file system supports case-sensitive file names.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.CasePreservedNames">
            <summary>
            The file system preserves the case of file names when it places a name on disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.UnicodeOnDisk">
            <summary>
            The file system supports Unicode in file names as they appear on disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.PersistentACLS">
            <summary>
            The file system preserves and enforces access control lists (ACL).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.FileCompression">
            <summary>
            The file system supports file-based compression.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.VolumeQuotas">
            <summary>
            The file system supports disk quotas.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.SupportsSparseFiles">
            <summary>
            The file system supports sparse files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.SupportsReparsePoints">
            <summary>
            The file system supports re-parse points.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.VolumeIsCompressed">
            <summary>
            The specified volume is a compressed volume, for example, a DoubleSpace volume.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.SupportsObjectIDs">
            <summary>
            The file system supports object identifiers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.SupportsEncryption">
            <summary>
            The file system supports the Encrypted File System (EFS).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.NamedStreams">
            <summary>
            The file system supports named streams.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.ReadOnlyVolume">
            <summary>
            The specified volume is read-only.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.SequentialWriteOnce">
            <summary>
            The volume supports a single sequential write.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.FileSystemFeature.SupportsTransactions">
            <summary>
            The volume supports transactions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.RedrawWindowFlags.Invalidate">
            <summary>
            Invalidates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_INVALIDATE invalidates the entire window.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.RedrawWindowFlags.InternalPaint">
            <summary>Causes the OS to post a WM_PAINT message to the window regardless of whether a portion of the window is invalid.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.RedrawWindowFlags.Erase">
            <summary>
            Causes the window to receive a WM_ERASEBKGND message when the window is repainted.
            Specify this value in combination with the RDW_INVALIDATE value; otherwise, RDW_ERASE has no effect.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.RedrawWindowFlags.Validate">
            <summary>
            Validates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_VALIDATE validates the entire window.
            This value does not affect internal WM_PAINT messages.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.RedrawWindowFlags.NoErase">
            <summary>Suppresses any pending WM_ERASEBKGND messages.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.RedrawWindowFlags.NoChildren">
            <summary>Excludes child windows, if any, from the repainting operation.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.RedrawWindowFlags.AllChildren">
            <summary>Includes child windows, if any, in the repainting operation.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.RedrawWindowFlags.UpdateNow">
            <summary>Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values, to receive WM_ERASEBKGND and WM_PAINT messages before the RedrawWindow returns, if necessary.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.RedrawWindowFlags.EraseNow">
            <summary>
            Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values, to receive WM_ERASEBKGND messages before RedrawWindow returns, if necessary.
            The affected windows receive WM_PAINT messages at the ordinary time.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.NativeMethods.PictDescBitmap">
            <summary>
            A PICTDESC structure for a bitmap
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.NativeMethods.GetWindowPosFlags(System.IntPtr)">
            <summary>
            Helper method for obtaining flags from WINDOWPOS structure. Handles obtaining
            structure from an lParam pointer.
            </summary>
            <param name="lParam">Pointer to WINDOWPOS structure.</param>
            <returns>flags attribute from WINDOWPOS structure.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.NativeMethods.GetWindowPosSize(System.IntPtr)">
            <summary>
            Helper method for obtaining size from WINDOWPOS structure. Handles obtaining
            structure from an lParam pointer.
            </summary>
            <param name="lParam">Pointer to WINDOWPOS structure.</param>
            <returns>cx and cy attributes from WINDOWPOS structure as a Size object.</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.QS_KEY">
            <summary>
             Options for MsgWaitForMultipleObjectsEx mask
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.QS_MOUSEMOVE">
            <summary>
             Options for MsgWaitForMultipleObjectsEx mask
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.QS_MOUSEBUTTON">
            <summary>
             Options for MsgWaitForMultipleObjectsEx mask
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.QS_POSTMESSAGE">
            <summary>
             Options for MsgWaitForMultipleObjectsEx mask
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.QS_TIMER">
            <summary>
             Options for MsgWaitForMultipleObjectsEx mask
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.QS_PAINT">
            <summary>
             Options for MsgWaitForMultipleObjectsEx mask
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.QS_SENDMESSAGE">
            <summary>
             Options for MsgWaitForMultipleObjectsEx mask
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.QS_HOTKEY">
            <summary>
             Options for MsgWaitForMultipleObjectsEx mask
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.QS_ALLPOSTMESSAGE">
            <summary>
             Options for MsgWaitForMultipleObjectsEx mask
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.QS_MOUSE">
            <summary>
             Options for MsgWaitForMultipleObjectsEx mask
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.QS_INPUT">
            <summary>
             Options for MsgWaitForMultipleObjectsEx mask
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.QS_ALLEVENTS">
            <summary>
             Options for MsgWaitForMultipleObjectsEx mask
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.QS_ALLINPUT">
            <summary>
             Options for MsgWaitForMultipleObjectsEx mask
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.QS_EVENT">
            <summary>
             Options for MsgWaitForMultipleObjectsEx mask
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.PM_NOREMOVE">
            <summary>
            Options for PeekMessage
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.PM_REMOVE">
            <summary>
            Options for PeekMessage
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.PM_NOYIELD">
            <summary>
            Options for PeekMessage
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.MWMO_WAITALL">
            <summary>
             MWMO constants
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.MWMO_ALERTABLE">
            <summary>
             MWMO constants
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.MWMO_INPUTAVAILABLE">
            <summary>
             MWMO constants
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.DLGC_WANTARROWS">
            <summary>
            Options for WM_GETDLGCODE
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.DLGC_WANTTAB">
            <summary>
            Options for WM_GETDLGCODE
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.DLGC_WANTALLKEYS">
            <summary>
            Options for WM_GETDLGCODE
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.DLGC_WANTMESSAGE">
            <summary>
            Options for WM_GETDLGCODE
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.DLGC_HASSETSEL">
            <summary>
            Options for WM_GETDLGCODE
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.DLGC_DEFPUSHBUTTON">
            <summary>
            Options for WM_GETDLGCODE
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.DLGC_UNDEFPUSHBUTTON">
            <summary>
            Options for WM_GETDLGCODE
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.DLGC_RADIOBUTTON">
            <summary>
            Options for WM_GETDLGCODE
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.DLGC_WANTCHARS">
            <summary>
            Options for WM_GETDLGCODE
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.DLGC_STATIC">
            <summary>
            Options for WM_GETDLGCODE
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.NativeMethods.DLGC_BUTTON">
            <summary>
            Options for WM_GETDLGCODE
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.NativeResourceIdentifier">
            <summary>
            Represents an identifier for a native resource, which can be either a string or an integer
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.NativeResourceIdentifier.Id">
            <summary>
            The identifer for the native resource, either a string or an integer
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.NativeResourceIdentifier.IntegerId">
            <summary>
            The integer identifer for the native resource.  If this property is accessed on a
            NativeResourceIdentifer whose ID is not an integer, InvalidOperationException is thrown.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.NativeResourceIdentifier.StringId">
            <summary>
            The string identifer for the native resource.  If this property is accessed on a
            NativeResourceIdentifer whose ID is not a string, InvalidOperationException is thrown.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.NativeResourceIdentifier.IsIntegerId">
            <summary>
            Indicates whether the identifer for the native resource is an integer.
            True = integer ID, False = string ID
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.NativeResourceIdentifier.IsStringId">
            <summary>
            Indicates whether the identifer for the native resource is a string.
            True = string ID, False = integer ID
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.POINT">
            <summary>
            A point structure to match the Win32 POINT
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.Win32SIZE">
            <summary>
            A size structure to match the Win32 SIZE.
            The name is chosen to avoid ambiguity with Microsoft.VisualStudio.OLE.Interop.SIZE, which is commonly used elsewhere.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.Icon">
            <summary>get icon</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.DisplayName">
            <summary>get display name</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.TypeName">
            <summary>get type name</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.Attributes">
            <summary>get attributes</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.IconLocation">
            <summary>get icon location</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.ExeType">
            <summary>return exe type</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.SysIconIndex">
            <summary>get system icon index</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.LinkOverlay">
            <summary>put a link overlay on icon</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.Selected">
            <summary>show icon in selected state</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.Attr_Specified">
            <summary>get only specified attributes</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.LargeIcon">
            <summary>get large icon</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.SmallIcon">
            <summary>get small icon</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.OpenIcon">
            <summary>get open icon</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.ShellIconSize">
            <summary>get shell size icon</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.PIDL">
            <summary>pszPath is a pidl</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.UseFileAttributes">
            <summary>use passed dwFileAttribute</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.AddOverlays">
            <summary>apply the appropriate overlays</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SHGFI.OverlayIndex">
            <summary>Get the index of the overlay in the upper 8 bits of the iIcon</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.StreamConsts">
            <summary>
            Constants for stream usage.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StreamConsts.LOCK_WRITE">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StreamConsts.LOCK_EXCLUSIVE">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StreamConsts.LOCK_ONLYONCE">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StreamConsts.STATFLAG_DEFAULT">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StreamConsts.STATFLAG_NONAME">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StreamConsts.STATFLAG_NOOPEN">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StreamConsts.STGC_DEFAULT">
            <summary>IStream.Commit constant. You would use this value mainly to make your code more readable.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StreamConsts.STGC_OVERWRITE">
            <summary>IStream.Commit constant. The operation can overwrite existing data to reduce overall space requirements.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StreamConsts.STGC_ONLYIFCURRENT">
            <summary>IStream.Commit constant. Prevents multiple users of a storage object from overwriting each another's changes.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StreamConsts.STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE">
            <summary>IStream.Commit constant. Commits the changes to a write-behind disk cache, but does not save the cache to the disk.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StreamConsts.STREAM_SEEK_SET">
            <summary>IStream.Seek constant. The new seek pointer is an offset relative to the beginning of the stream.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StreamConsts.STREAM_SEEK_CUR">
            <summary>IStream.Seek constant. The new seek pointer is an offset relative to the current seek pointer location.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StreamConsts.STREAM_SEEK_END">
            <summary>IStream.Seek constant. The new seek pointer is an offset relative to the end of the stream.</summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper">
            <summary>
            An image helper class to assist getting image from IPicture/IPictureDisp. AxHost has a pair of protected static methods
            to work with IPicture/IPictureDisp. By extending AxHost, we can take advantage of the existing functions and conveniently
            access the images as managed image type.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.ImageFromIPicture(System.Object)">
            <summary>
            Get an image from an IPicture object.
            </summary>
            <returns>Result image.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.BitmapSourceFromIPicture(System.Object)">
            <summary>
            Converts an IPicture into a BitmapSource
            </summary>
            <param name="pic">Picture to convert</param>
            <returns>BitmapSource for the given picture</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.BitmapSourceFromBitmap(System.Drawing.Bitmap)">
            <summary>
            Converts a Bitmap into a BitmapSource
            </summary>
            <param name="bitmap">Bitmap to convert</param>
            <returns>BitmapSource for the given bitmap</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.BitmapSourceFromIconLocation(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a BitmapSource from a Windows shell-icon location [filename, index] tuple
            </summary>
            <param name="filename">The file containing the icon</param>
            <param name="index">The index of the icon to load</param>
            <param name="large">Indicates whether the large icon or the small icon is desired</param>
            <returns>A BitmapSource created from the icon, or null if it could not be loaded</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.TryParseIconLocation(System.String,System.String@,System.Int32@)">
            <summary>
            Attempt to parse a Windows shell-style resource string (e.g. "filename,index")
            </summary>
            <param name="resource">The string to parse</param>
            <param name="filename">The filename from <paramref name="resource" /></param>
            <param name="index">The index from <paramref name="resource" /></param>
            <returns>True if the string was successfully parsed, false if not</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.IPictureFromBitmapSource(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Converts a BitmapSource to an IPicture 
            </summary>
            <param name="bitmapSource">Image to convert</param>
            <returns>IPicture wrapped around the image</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.IPictureFromBitmap(System.Drawing.Bitmap)">
            <summary>
            Converts a Bitmap to an IPicture 
            </summary>
            <param name="bitmap">Image to convert</param>
            <returns>IPicture wrapped around the image</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.DIBFromBitmap(System.Drawing.Bitmap)">
            <summary>
            Creates a device-independent HBITMAP from a System.Drawing.Bitmap
            </summary>
            <param name="bitmap">Image to convert</param>
            <returns>Handle to the DIB</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.DIBFromBitmapSource(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Create a 32bpp HBITMAP from a bitmap source converting all transparent pixels to black
            Note: The version of TransparentBlt on XP does not support 32bit images and AlphaBlend
                  requires the transparent pixels to be black.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.BitmapFromBitmapSource(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Converts a BitmapSource to System.Drawing.Bitmap
            </summary>
            <param name="bitmapSource">Image to convert</param>
            <returns>Converted bitmap</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.GetBitmapSize(System.IntPtr)">
            <summary>
            Returns the size of the speficied bitmap
            </summary>
            <param name="bitmapHandle">The handle of the bitmap whose size needs to be returned</param>
            <returns>The bitmap size</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.GetIconSize(System.IntPtr)">
            <summary>
            Returns the size of the speficied icon
            </summary>
            <param name="iconHandle">The handle of the icon whose size needs to be returned</param>
            <returns>The icon size</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.BitmapSourceFromHandle(System.IntPtr,System.Windows.Int32Rect)">
            <summary>
            BitmapSourceFromHandle will extract a portion of a bitmap and return a Pbgra32 BitmapSource
            with corrected alpha using VS colors NearGreen and Magenta as fully transparent.
            </summary>
            <param name="handle"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.ReadBitmapFromFile(System.String)">
            <summary>
            Reads a file that contains a bitmap. If the PixelFormat is unsupported, we fall back to 
            using Bitmap.FromStream to try to read the bitmap.
            </summary>
            <param name="file">Name of the file that contains the image to be read.</param>
            <returns>System.Drawing.Bitmap representation of the image.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.TryConvertPixelFormat(System.Windows.Media.PixelFormat,System.Drawing.Imaging.PixelFormat@)">
            <summary>
            Converts a System.Windows.Media.PixelFormat to the coresponding System.Drawing.Imaging.PixelFormat.
            </summary>
            <param name="format">System.Windows.Media.PixelFormat to be converted.</param>
            <param name="drawingPixelFormat">Converted System.Drawing.Imaging.PixelFormat.</param>
            <returns>True if the conversion suceeded, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.GetBitmapBits(System.Drawing.Bitmap)">
            <summary>
            Returns the byte stream for a device-independent HBITMAP from a System.Drawing.Bitmap
            </summary>
            <param name="bitmap">Source bitmap</param>
            <returns>Bytes for the DIB</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.GetIconBits(System.Drawing.Icon,System.Drawing.Size)">
            <summary>
            Returns the byte stream for a device-independent HBITMAP from a System.Drawing.Icon
            of a particular size.  If the icon doesn't have a version that exactly matches the
            desired size, an exception is thrown.
            </summary>
            <param name="icon">Source icon</param>
            <param name="desiredSize">Desired size of the icon; if Empty, the native icon size is returned</param>
            <returns>Bytes for the DIB</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.GetIconBits(System.Drawing.Icon)">
            <summary>
            Returns the byte stream for a device-independent HBITMAP from a System.Drawing.Icon
            in its native size.
            </summary>
            <param name="icon">Source icon</param>
            <returns>Bytes for the DIB</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.GetBitmapSourceBits(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Returns the byte stream for a device-independent HBITMAP from a System.Windows.Media.Imaging.BitmapSource.
            </summary>
            <param name="icon">Source icon</param>
            <returns>Bytes for the DIB</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.ImageSourcesFromBitmap(System.Drawing.Bitmap)" -->
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.BitmapPaletteFromColorPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Converts System.Drawing.Imaging.ColorPalette to System.Windows.Media.Imaging.BitmapPalette.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ImageHelper.PixelFormatFromDrawingPixelFormat(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts System.Drawing.Imaging.PixelFormat to System.Windows.Media.Imaging.PixelFormat.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Enabled">
            <summary>
            The atom is present. CodeMarkers are enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Disabled">
            <summary>
            The atom is not present, but InitPerformanceDll has not yet been called.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.DisabledDueToDllImportException">
            <summary>
            Disabled because the CodeMarkers transport DLL could not be found or
            an import failed to resolve.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.Performance.CodeMarkers.IsEnabled">
            <summary>
            Are CodeMarkers enabled? Note that even if IsEnabled returns false, CodeMarkers
            may still be enabled later in another component.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarker(System.Int32)">
            <summary>
            Sends a code marker event
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Byte[])">
            <summary>
            Sends a code marker event with additional user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="aBuff">User data buffer. May not be null.</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
            <exception cref="T:System.ArgumentNullException">aBuff was null</exception>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.SetStateDLLException">
            <summary>
            Used by ManagedPerfTrack.cs to report errors accessing the DLL.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Guid)">
            <summary>
            Sends a code marker event with additional Guid user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="guidData">The additional Guid to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.String)">
            <summary>
            Sends a code marker event with additional String user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="stringData">The additional String to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.StringToBytesZeroTerminated(System.String)">
            <summary>
            Converts a string into a byte buffer including a zero terminator (needed for proper ETW message formatting)
            </summary>
            <param name="stringData">String to be converted to bytes</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt32)">
            <summary>
            Sends a code marker event with additional DWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="uintData">The additional DWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt64)">
            <summary>
            Sends a code marker event with additional QWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="ulongData">The additional QWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.UsePrivateCodeMarkers(System.String,Microsoft.Win32.RegistryView)">
            <summary>
            Checks the registry to see if code markers are enabled
            </summary>
            <param name="regRoot">The registry root</param>
            <param name="registryView">The registry view.</param>
            <returns>Whether CodeMarkers are enabled in the registry</returns>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerStartEnd">
            <summary>
            Use CodeMarkerStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerExStartEnd">
            <summary>
            Use CodeMarkerExStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>NvteWj38BtsdoHGUiICriFz9/rK+ug0jiS6GM6tzJA4=</DigestValue></Reference></SignedInfo><SignatureValue>Sds4/BKxVykicTAG2wsJMkQxMQa5N99zPxrpXNZAOFyV/RhxVwcLVclsnNUhmBAx7Xv5OEcxQNYbTaqRclwT9ILQZeBpA9auAfFuWVG4CTvfRWUPZhAQbwLR8cYwMR+KWNaXs4ny7WJheqp6Euw2nEK1zqkHcSLOhUaSN6mrxwn+QM2qO2i6Oer3aoNjDY1OldHAVJQiK/zRyvEuzOwu0KcPKkholjTDH22+K32fw+xa81XZ98sDKxrsrDkpEB0artimsX9fzMeWS/XFzL1KosugweTeAbcRD3tBaXM2qULZniUE/gtfd8Rbv/AlUrOnv7cKyXS2Khrofe/PQrG6RA==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>ok2x7OvGwA7zbnfezc3HT9M4dJka+FaQ7+vCqG40Bcm1QLlYIiDX/Whts0LVijaOvtl9iMeuShnAV7mchItKAVAABpyHuTuav2NCI9FsA8jFmlWndk3uK9RInNx1h1H4ojYxdBExyoN6muwwslKsLEfauUml7h5WAsDPpufTZd4yp2Jyiy384Zdd8CJlfQxfDe+gDZEciugWKHPSOoRxdjAk0GFm0OH14MyoYM4+M3mm1oH7vmSQohS5KIL3NEVW9Mdw7csTG5f93uORLvrJ/8ehFcGyWVb7UGHJnRhdcgGIbfiZzZlsAMS/DIBzM8RHKGNUNSbbLYmN/rt7pRjL4Q==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
