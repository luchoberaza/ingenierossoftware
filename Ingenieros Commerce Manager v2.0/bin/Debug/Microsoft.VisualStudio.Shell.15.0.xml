<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Shell.15.0</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Shell.AppliesToUIContextAttribute">
            <summary>
            Adds UIContext metadata to a MEF export to indicate when this export should be applied.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AppliesToUIContextAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.AppliesToUIContextAttribute" /> class.
            </summary>
            <param name="uiContextGuid">The UI context GUID. The MEF export should be applied when this context becomes active.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AppliesToUIContextAttribute.UIContextGuid">
            <summary>
            Gets the UI context GUID.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ExtensionPointAsyncPackage">
            <devdoc>
                Extended version of the AsyncPackage base class which implements
                IVsPackageExtensionProvider.
            </devdoc>
            <remarks>This class is mostly identical to ExtensionPointPackage but derives from AsyncPackage to support AsyncPackages</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointAsyncPackage.Microsoft#VisualStudio#Shell#Interop#IVsPackageExtensionProvider#CreateExtensionInstance(System.Guid@,System.Guid@)">
            <summary>
            Implements the generic extension point discovery mechanism.
            </summary>
            <param name="extensionPoint">The type of extension point</param>
            <param name="instance">The instance identifier of the extension point being requested</param>
            <returns>The requested extension point</returns>
            <exception cref="T:System.ArgumentException">The requested extension point was not found</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointAsyncPackage.CreateExtensionPoint(System.Guid,System.Guid)">
            <summary>
            Called by the base class in order to satisfy a request for an extension point.
            Extension points are implemented by packages and requested on demand by
            shared components.
            This is the reverse of the 'factory' pattern where packages register factories
            with a central service.
            The base class implements discovery mechanisms for well-known extension points.
            Derived classes may override this and optionally call the base class.
            </summary>
            <param name="extensionPoint">The requested extension point type</param>
            <param name="instance">Instance identifier of the requested extension point</param>
            <returns>The requested extension point or null on failure. If null is returned
            the package will throw an ArgumentException to its caller.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointAsyncPackage.CreateDiagnosticsProvider(System.Guid)">
            <summary>
            Creates the diagnostics provider for the given registered provider GUID. This is called
            by the base class in response to a request for the ExtId_VsComponentDiagnostics extension
            point. The base implementation searches for ProvideComponentDiagnostics attributes on the
            package class and instantiates the appropriate provider. May be overridden.
            </summary>
            <param name="provider">The GUID of the requested diagnostics provider</param>
            <returns>The requested diagnostics provider</returns>
            <exception cref="T:System.ArgumentException">The requested provider was not found</exception>
            <exception cref="T:System.InvalidCastException">The requested provider does not implement the IVsDiagnosticsProvider interface</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointAsyncPackage.CreateSearchProvider(System.Guid)">
            <summary>
            Creates the global search provider for the given registered provider GUID. This is called
            by the base class in response to a request for the IVsSearchProvider extension
            point. The base implementation searches for ProvideSearchProvider attributes on the
            package class and instantiates the appropriate provider. May be overridden.
            </summary>
            <param name="provider">The GUID of the requested search provider</param>
            <returns>The requested search provider</returns>
            <exception cref="T:System.ArgumentException">The requested provider was not found</exception>
            <exception cref="T:System.InvalidCastException">The requested provider does not implement the IVsSearchProvider interface</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointAsyncPackage.CreateCodeContainerProvider(System.Guid)">
            <summary>
            Creates a code container provider for the given registered provider Guid.This is called by the base class
            in response to a request for the ICodeContainer extension point. The base implementation searches for 
            ProvideCodeContainerProviderAttribute attributes on the package class and instantiates the appropriate provider.
            May be overridden.
            </summary>
            <param name="provider">The guid of the requested code container provider</param>
            <returns>The requested code container provider</returns>
            <exception cref="T:System.ArgumentException">The requested provider was not found</exception>
            <exception cref="T:System.ArgumentException">The requested provider does not implement the ICodeContainer interface</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointAsyncPackage.CreateExtensionPointProvider``2(System.Guid)">
            <summary>
            Create the extension provider declared with the attribute TAttribute on the package, implementing
            an extension point of type TInterface
            </summary>
            <param name="provider"></param>
            <returns>The requested extension provider</returns>
            <exception cref="T:System.ArgumentException">The requested provider was not found</exception>
            <exception cref="T:System.InvalidCastException">The requested provider does not implement the TInterface interface</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.#ctor">
            <summary>
            AsyncPackage default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AsyncPackage.DisposalToken">
            <summary>
            Exposes a <see cref="T:System.Threading.CancellationToken" /> that can be used to check if the package has been disposed.
            This can happen for async tasks that are running on a background thread when Visual Studio has started to shut down.
            Use <see cref="P:Microsoft.VisualStudio.Shell.VsShellUtilities.ShutdownToken" /> for an earlier indication that VS is shutting down.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AsyncPackage.JoinableTaskFactory">
            <summary>
            Gets the factory to use for asynchronous tasks started by this package.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AsyncPackage.JoinableTaskCollection">
            <summary>
            Gets the collection of asynchronous tasks started by this package.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.InitializeAsync(System.Threading.CancellationToken,System.IProgress{Microsoft.VisualStudio.Shell.ServiceProgressData})">
            <summary>
            The async initialization portion of the package initialization process. This method is invoked from a background thread.
            </summary>
            <param name="cancellationToken">A cancellation token to monitor for initialization cancellation, which can occur when VS is shutting down.</param>
            <returns>A task representing the async work of package initialization, or an already completed task if there is none. Do not return null from this method.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.OnAfterPackageLoadedAsync(System.Threading.CancellationToken)">
            <summary>
            When overridden by a derived type, may initiate operations with side effects that are not strictly
            a part of package load that would belong to <see cref="M:Microsoft.VisualStudio.Shell.AsyncPackage.InitializeAsync(System.Threading.CancellationToken,System.IProgress{Microsoft.VisualStudio.Shell.ServiceProgressData})" />
            but that should happen soon after package load (e.g. updating command status).
            </summary>
            <param name="cancellationToken">The package's <see cref="P:Microsoft.VisualStudio.Shell.AsyncPackage.DisposalToken" />.</param>
            <returns>A task that indicates completion of the extra work.</returns>
            <remarks>
            <para>This method is invoked on a threadpool thread.</para>
            <para>The base <see cref="M:Microsoft.VisualStudio.Shell.AsyncPackage.OnAfterPackageLoadedAsync(System.Threading.CancellationToken)" /> method has an empty implementation,
            so direct derivations of <see cref="T:Microsoft.VisualStudio.Shell.AsyncPackage" /> needn't call the base method as part of their override method.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.InternalQueryService(System.Guid@,System.Guid@,System.IntPtr@)">
            <summary>
            This method is called by IServiceProvider.QueryService in order to implement service retrieval.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.GetBuiltInObjectForGuid(System.Guid@)">
            <summary>
            Gets a built in service (i.e. non-registered service) whose id matches <paramref name="sid" />, or null if none exist.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.Microsoft#VisualStudio#Shell#Interop#COMAsyncServiceProvider#IAsyncServiceProvider#QueryServiceAsync(System.Guid@)">
            <summary>
            Get an async initializing service that is offered by this package.
            </summary>
            <param name="guidService">The GUID of the service to retrieve.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTask" /> representing the service retrieval.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.Microsoft#VisualStudio#Shell#Interop#IAsyncLoadablePackageInitialize#Initialize(Microsoft.VisualStudio.Shell.Interop.COMAsyncServiceProvider.IAsyncServiceProvider,Microsoft.VisualStudio.Shell.Interop.IProfferAsyncService,Microsoft.VisualStudio.Shell.Interop.IAsyncProgressCallback)">
            <summary>
            Async version of SetSite, called from a b/g thread.
            </summary>
            <returns>A task which represents the async initialization work.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.GetServiceAsync(System.Type)">
            <summary>
            Retrieves an async service.
            </summary>
            <param name="serviceType">The type representing the registered service type to retrieve.</param>
            <returns>A task representing the service retrieval whose result is the service, or null if the retrieval failed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.GetServiceAsync(System.Type,System.Boolean)">
            <summary>
            Retrieves an async services but allows the caller to hint that exceptions may not have to be swallowed. It does not guarantee exceptions will be thrown however for failure cases.
            </summary>
            <param name="serviceType">Service to get</param>
            <param name="swallowExceptions">When this parameter is true GetServiceAsync will swallow exceptions thrown during the GetServiceAsync call and return null. When this is false exceptions thrown during the get service call may be thrown out of the method. A setting of false does not guarantee exceptions will be thrown for all services failures, or all service types </param>
            <returns>A task representing the service retrieval whose result is the service, or null if the retrieval failed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.AddService(System.Type,Microsoft.VisualStudio.Shell.AsyncServiceCreatorCallback)">
            <summary>
            Adds an async service to this package. This service will not be visible outside of this package.
            </summary>
            <param name="serviceType">The service type to be used as the identifier used for retrieving this service.</param>
            <param name="callback">The creation callback to be invoked when an instance of the service is needed. This is only invoked one time and the result is cached.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.AddService(System.Type,Microsoft.VisualStudio.Shell.AsyncServiceCreatorCallback,System.Boolean)">
            <summary>
            Adds an async service to this package. This service may or may not be visible outside of this package, depending on the
            value of <paramref name="promote" />.
            </summary>
            <param name="serviceType">The service type to be used as the identifier used for retrieving this service.</param>
            <param name="callback">The creation callback to be invoked when an instance of the service is needed. This is only invoked one time and the result is cached.</param>
            <param name="promote">True if this service should be visible outside this package, otherwise false.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.AddService(System.Type,Microsoft.VisualStudio.Shell.AsyncServiceCreatorWithProgressCallback,System.Boolean)">
            <summary>
            Adds an async service to this package that supports progress updates during initialization. This service may or may not be visible outside of this package, depending on the
            value of <paramref name="promote" />.
            </summary>
            <param name="serviceType">The service type to be used as the identifier used for retrieving this service.</param>
            <param name="callback">The creation callback to be invoked when an instance of the service is needed. This is only invoked one time and the result is cached.</param>
            <param name="promote">True if this service should be visible outside this package, otherwise false.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.AddService(System.Type,Microsoft.VisualStudio.Shell.AsyncServiceCreatorWithProgressCallback)">
            <summary>
            Adds an async service to this package that supports progress updates during initialization. This service will not be visible outside of this package.
            </summary>
            <param name="serviceType">The service type to be used as the identifier used for retrieving this service.</param>
            <param name="callback">The creation callback to be invoked when an instance of the service is needed. This is only invoked one time and the result is cached.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.RemoveService(System.Type)">
            <summary>
            Removes an async service registered with this package.
            </summary>
            <param name="serviceType">The service type the service was registered under in <see cref="M:Microsoft.VisualStudio.Shell.AsyncPackage.AddService(System.Type,Microsoft.VisualStudio.Shell.AsyncServiceCreatorCallback)" /> or <see cref="M:Microsoft.VisualStudio.Shell.AsyncPackage.AddService(System.Type,Microsoft.VisualStudio.Shell.AsyncServiceCreatorCallback,System.Boolean)" />/&gt;.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.RemoveService(System.Type,System.Boolean)">
            <summary>
            Removes an async service registered with this package.
            </summary>
            <param name="serviceType">The service type the service was registered under in <see cref="M:Microsoft.VisualStudio.Shell.AsyncPackage.AddService(System.Type,Microsoft.VisualStudio.Shell.AsyncServiceCreatorCallback)" /> or <see cref="M:Microsoft.VisualStudio.Shell.AsyncPackage.AddService(System.Type,Microsoft.VisualStudio.Shell.AsyncServiceCreatorCallback,System.Boolean)" />/&gt;.</param>
            <param name="ignored">This parameter is ignored and exists only for symmetry with <see cref="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)" />.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.GetAsyncToolWindowFactory(System.Guid)">
            <summary>
            Returns the asynchronous tool window factory interface for the tool window identified by
            <paramref name="toolWindowType" />, if asynchronous creation is supported for the tool window.
            If asynchronous creation is not supported, null is returned.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <returns>The asynchronous factory interface, or null if not supported</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.Microsoft#VisualStudio#Shell#Interop#IVsAsyncToolWindowFactory#InitializeToolWindowAsync(System.Guid,System.UInt32)">
            <summary>
            Performs initialization in preparation for creating the tool window identified by
            <paramref name="toolWindowType" />.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">The instance identifier for the tool window</param>
            <returns>
            A task representing the initialization work.  The result of the task is a context
            object that will be passed to the passed to the <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" /> constructor.
            If no object needs to be passed to the pane constructor, null can be returned.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.Microsoft#VisualStudio#Shell#Interop#IVsAsyncToolWindowFactory#CreateToolWindow(System.Guid,System.UInt32,System.Object)">
            <summary>
            Creates a tool window of the specified type with the specified ID.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID or 0 for single instance toolwindows</param>
            <param name="context">Tool window creation context (passed to <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" /> constructor)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.Microsoft#VisualStudio#Shell#Interop#IVsAsyncToolWindowFactory#GetToolWindowTitle(System.Guid,System.UInt32)">
            <summary>
            Returns the title string to use for the tool window.  If null is returned, the tool
            window's type name is used for the title.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID or 0 for single instance toolwindows</param>
            <returns>The title string</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.CreateToolWindowAsync(System.Type,System.Int32,Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a tool window asynchronously.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID or 0 for single instance toolwindows</param>
            <param name="tool">The registration attribute on the package class defining the toolwindow configuration</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation</param>
            <returns>A task returning the tool window</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.CreateToolWindowCoreAsync(System.Type,System.Int32,Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute,Microsoft.VisualStudio.Shell.Interop.IVsAsyncToolWindowFactory,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Creates a tool window asynchronously.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID or 0 for single instance toolwindows</param>
            <param name="tool">The registration attribute on the package class defining the toolwindow configuration</param>
            <param name="factory">The tool window factory</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation</param>
            <returns>A task returning the tool window</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.CompleteToolWindowCreationAsync(System.Type,System.Int32,System.UInt32,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsAsyncToolWindowFactory,Microsoft.VisualStudio.PlatformUI.PendingInitializationPlaceholderPane,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Completes the second phase of async tool window creation.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID or 0 for single instance toolwindows</param>
            <param name="flags">The creation flags for the tool window</param>
            <param name="persistenceGuid">The persistence Guid for the tool window</param>
            <param name="placeholderPane">A <see cref="T:Microsoft.VisualStudio.PlatformUI.PendingInitializationPlaceholderPane" /> with the results of the tool window placeholder creation</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation</param>
            <returns>A task for the asynchronous operation</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.InitializeToolWindowAsync(System.Type,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Performs initialization in preparation for creating the tool window identified by
            <paramref name="toolWindowType" />.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">The instance identifier for the tool window</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation</param>
            <returns>
            A task representing the initialization work.  The result of the task is a context
            object that will be passed to the passed to the matching <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" />
            constructor. If no object needs to be passed to the pane constructor,
            <see cref="F:Microsoft.VisualStudio.Shell.Package.ToolWindowCreationContext.Unspecified" /> can be returned.  In this case,
            the pane's default constructor will be invoked.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.GetToolWindowTitle(System.Type,System.Int32)">
            <summary>
            Returns the title string to use for the tool window.  If null is returned, the tool
            window's type name is used for the title.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID or 0 for single instance toolwindows</param>
            <returns>The title string</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.AsyncPackage.InitializeTaskCancellationHelper">
            <summary>
            Helper class that will listen to events on window frame and cancel a cancellation
            token source if the frame emits a FRAMESHOW_DestroyMultiInst notification.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.InitializeTaskCancellationHelper.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame2,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a <see cref="T:Microsoft.VisualStudio.Shell.AsyncPackage.InitializeTaskCancellationHelper" />
            </summary>
            <param name="frame">The window frame to observe</param>
            <param name="cts">The <see cref="T:System.Threading.CancellationTokenSource" /> to cancel if the frame is destroyed</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.FindToolWindowAsync(System.Type,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously locates the tool window corresponding to the specified type and ID.
            If it does not exist, it creates and returns one if <paramref name="create" /> is
            true, or returns null if <paramref name="create" /> is false.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID</param>
            <param name="create">Create if none exist?</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation</param>
            <returns>
            A task returning either an instance of a class derived from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" /> or
            null if the tool window doesn't derive from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" />.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.FindWindowPaneAsync(System.Type,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously locates the window pane corresponding to the specified type and ID.
            If it does not exist, it creates and returns one if <paramref name="create" /> is
            true, or returns null if <paramref name="create" /> is false.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID</param>
            <param name="create">Create if none exist?</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation</param>
            <returns>A task returning an instance of a class derived from <see cref="T:Microsoft.VisualStudio.Shell.WindowPane" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.ShowToolWindowAsync(System.Type,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously shows the tool window corresponding to the specified type and ID.
            If it does not exist, it creates and returns one if <paramref name="create" /> is
            true, or returns null if <paramref name="create" /> is false.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID</param>
            <param name="create">Create if none exist?</param>
            <param name="cancellationToken">The cancellation token for the asynchronous operation</param>
            <returns>
            A task returning either an instance of a class derived from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" /> or
            null if the tool window doesn't derive from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" />.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncPackage.GetService(System.Type)">
            <summary>
            Retrieves a service registered with this package. This method is synchronous and even async services retrieved this way
            will be retrieved synchronously.
            </summary>
            <param name="serviceType">The type representing the registered service type to retrieve.</param>
            <returns>The service object, or null on failure.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.AsyncSaveResult">
            <summary>
            Represents the results of an asynchronous save operation
            </summary>
            <remarks>
            A default-constructed <see cref="T:Microsoft.VisualStudio.Shell.AsyncSaveResult" /> describes a completed save operation
            with no data loss, saved to its original filename (i.e. <see cref="P:Microsoft.VisualStudio.Shell.AsyncSaveResult.FileName" /> is <c>null</c>).
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.AsyncSaveResult.Success">
            <summary>
            Represents a a completed save operation with no data loss, saved to
            its original filename (i.e. <see cref="P:Microsoft.VisualStudio.Shell.AsyncSaveResult.FileName" /> is <c>null</c>).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.AsyncSaveResult.Canceled">
            <summary>
            Represents a save operation that was canceled.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.AsyncSaveResult.FromInterface(Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Shell.AsyncSaveResult" /> whose contents mirror those of an
            <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult" />.
            </summary>
            <param name="result">The result to mirror.</param>
            <returns>The new async save result.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AsyncSaveResult.DataLossIncurred">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AsyncSaveResult.SaveCanceled">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.AsyncSaveResult.FileName">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.PropertyPageTypeConverterAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\Attributes.uex" path="docs/doc[@for=&quot;PropertyPageTypeConverterAttribute&quot;]" />
            <summary>
            Defines our type converter.
            </summary>
            <remarks>This is needed to get rid of the type TypeConverter type that could not give back the Type we were passing to him.
            We do not want to use reflection to get the type back from the  ConverterTypeName. Also the GetType mthos does not spwan converters from other assemblies.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PropertyPageTypeConverterAttribute.#ctor(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Attributes.uex" path="docs/doc[@for=&quot;PropertyPageTypeConverterAttribute.PropertyPageTypeConverterAttribute&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.PropertyPageTypeConverterAttribute.ConverterType">
            <!-- Failed to insert some or all of included XML --><include file="doc\Attributes.uex" path="docs/doc[@for=&quot;PropertyPageTypeConverterAttribute.ConverterType&quot;]" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.LocDisplayNameAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\Attributes.uex" path="docs/doc[@for=&quot;LocDisplayNameAttribute&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LocDisplayNameAttribute.#ctor(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Attributes.uex" path="docs/doc[@for=&quot;LocDisplayNameAttribute.LocDisplayNameAttribute&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.LocDisplayNameAttribute.DisplayName">
            <!-- Failed to insert some or all of included XML --><include file="doc\Attributes.uex" path="docs/doc[@for=&quot;LocDisplayNameAttribute.DisplayName&quot;]" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.BulkFileOperation">
            <summary>
            BulkFileOperation provides functionality to safely perform operations with bulk of files, currently opened in the solution. One of the example is SCC.
            Before operation consumer should provide estimated set of files and folders where changes are expected. This class takes care about "hands-off" logic
            for all these files. Once operation done BulkFileOperation does all neccessary job for "hands-on" logic and make a decision on what to reload (project/solution/nothing).
            Order of operations is the following:
            QueryBulkFileOperationAsync
            BeginAsync (optional)
            EndAsync (optional, but BeginAsync is required to complete before this)
            Dispose
            This API is very strict to inappropriate usage, for example calling EndAsync without waiting for BeginAsync is done, or calling the same method twice and so on.
            In this case exception will be thrown.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BulkFileOperation.SolutionFileReloadOptimizerKey">
            <summary>
            Solution file change based solution reload optimizer key in remote settings.
            If enabled uses the new optimizations to reduce solution reload during branch switch.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BulkFileOperation.somethingInProgress">
            <summary>
            We are going to use very simple verification that any operation is in progress.
            If this is equal to 1 - some operation is in progress, otherwise - 0.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.BulkFileOperation.bfoInProgressCount">
            <summary>
            Gets count of in progress BFOs
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.BulkFileOperation.Begin">
            <summary>
            Sends Begin signal when BulkFileOperation begin and we processed all pending FileChange service signals and pause it.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.BulkFileOperation.BeforeFlushPendingFileChangeNotification">
            <summary>
            Sends BeforeFlushPendingFileChangeNotification signal when BulkFileOperation ends before we resume FileChange service.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.BulkFileOperation.End">
            <summary>
            Sends End signal when BulkFileOperation ends at the very end.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BulkFileOperation.IsInProgress">
            <summary>
            Gets indication whether some BulkFileOperation is in progress right now.
            It would be useful in several cases:
            - to avoid getting exception if you want to run new BulkFileOperation;
            - to not lost current context, when subscibes on Begin/End events.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BulkFileOperation.UnsavedFiles">
            <summary>
            The subset of document file paths which are currently in use.
            </summary>
            <remarks>
            This is the intersection of the input file paths used to construct
            this <see cref="T:Microsoft.VisualStudio.Shell.BulkFileOperation" />, and documents present in the RDT in 'Dirty' state.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BulkFileOperation.ProjectsToReload">
            <summary>
            Gets list of the full path to the project files which will have to be reloaded/updated with requested bulk file operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BulkFileOperation.TelemetryInfo">
            <summary>
            Get information about statistics for the current BulkFileOperation.
            It is possible to attach it to the event and have additional information about timings and counts.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BulkFileOperation.IsSynchronousUpdateNeeded">
            <summary>
            Gets value whether synchronous update will be needed after bulk file operation is done.
            </summary>
            <remarks>
            This flag indicates that UI will be blocked for some time after the operation to refresh solution state. For example, to reload solution completely.
            It can be used by API customers to make a decision on blocking UI during operation to avoid user frustration when operation is done.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.QueryBulkFileOperationAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Start bulk file operation. This method is called by customer prior start some bulk file operation, for example git checkout.
            </summary>
            <param name="changingFiles">Expected list of files to modify. Each entry is a full path to file</param>
            <param name="changingFolders">Expected list of folders to modify. Each entry is a full path to folder. It does mean all files under this folder could be changed.</param>
            <param name="cancellationToken">To cancel this operation</param>
            <returns>BulkFileOperation instance which is ready to Begin bulk file operation</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.#ctor(System.IServiceProvider,Microsoft.VisualStudio.Shell.IRunningDocumentTableLightweightProxy,Microsoft.VisualStudio.Shell.IBulkFileOperationFileWatcher)">
            <summary>
            Constructor for the BulkFileOperation. The only correct way to get an object of this class is to call QueryBulkFileOperationAsync.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.BeginAsync(System.Threading.CancellationToken)">
            <summary>
            Start bulk file operation based on the previous QueryBulkFileOperationAsync method.
            </summary>
            <param name="cancellationToken">Cancellation token to cancel operation</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.EndAsync">
            <summary>
            Completes bulk file operation. Makes necessary decisions on what to reload (project/solution/nothing).
            Does all hands-on logic and adds files/folders on track. This method is not cancellable,
            because otherwise system will be in unknown state:
             - some files were handed-on, some not;
             - if projects/solution file were updated, and solution were not reloaded, which is the bad UX experience.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.ResetState">
            <summary>
            Reset BulkFileOperation state for UnitTest purposes
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.DisposeManagedResources">
            <summary>
            There is no protection from calling this method while other methods are in progress.
            For example, if BeginAsync is in progress and customer calls Dispose() it will silently dispose resources
            and moves object to Disposed state.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.BulkFileOperationBeginAsync(System.Threading.CancellationToken)">
            <summary>
            Send Begin signal, when we start BulkFileOperation and activate appropriate UIContext.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.BulkFileOperationBeforeResumeFileWatcher">
            <summary>
            Send events after we almost completed BulkFileOperation, but before we flush all pending fileservice events,
            which were paused when operation began.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.BulkFileOperationEndAsync(System.Threading.CancellationToken)">
            <summary>
            Send End event, when BulkFileOperation is completed and deactivate appropriate UIContext.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.Reload(Microsoft.VisualStudio.Shell.IRunningDocumentInfo)">
            <summary>
            Reloads documents.
            </summary>
            <param name="rdif">Reference to RunningDocumentInfo structure</param>
            <returns>true if document content was reloaded</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.EstimateImpactAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Make initial estimation of the impact on currently loaded solution (if any).
            </summary>
            <param name="changingFiles">Estimate set of files to be change. Full path.</param>
            <param name="changingFolders">Estimate set of folders to be change. Full path.</param>
            <param name="cancellationToken">Cancellation token in the case of cancelled.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.ReadAllRemoteSettingsAsync(System.Threading.CancellationToken)">
            <summary>
            Read all remote settings related to bulk file operation at once
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.BuildCoveredListOfFiles(System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String},System.Collections.Generic.IReadOnlyCollection{System.String},System.Threading.CancellationToken)">
            <summary>
            Build and return list of covered files. All comparison is case insensitive
            </summary>
            <param name="pathsToChange">List of files to change</param>
            <param name="normalizedFoldersToChange">List of normalized folders to change</param>
            <param name="inputPaths">List of input files</param>
            <param name="cancellationToken"></param>
            <returns>List of covered paths or empty list</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.UpdateListOfChangedFilesAsync(System.Threading.CancellationToken)">
            <summary>
            Updates list of the files changed by the BulkFileOperation.
            </summary>
            <param name="cancellationToken"></param>
            <returns>true if update was successfull</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.IsSharedProjectFileUpdated">
            <summary>
            Check whether at least one shared project file is updated during BulkFileOperation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.MonitoredItemComparer.#ctor">
            <summary>
            Private default constructor in order to protect from
            creating instance of this class other than using Instance method.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.BulkFileOperation.ProcessingContext">
            <summary>
            Helper class for the calling custom action on Dispose. Can be used in 'using'.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.BulkFileOperation.BulkFileOperationFirstUserAction">
            <summary>
            First user action tracker, which send event once user does any action
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.Microsoft#Internal#VisualStudio#Shell#Interop#IVsSolutionReloadBatchHandler2#CanGiveControl(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.Microsoft#Internal#VisualStudio#Shell#Interop#IVsSolutionReloadBatchHandler#CanGiveControl(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.Microsoft#Internal#VisualStudio#Shell#Interop#IVsSolutionReloadBatchHandler2#CanTakeControl(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.Microsoft#Internal#VisualStudio#Shell#Interop#IVsSolutionReloadBatchHandler#CanTakeControl(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.Microsoft#Internal#VisualStudio#Shell#Interop#IVsSolutionReloadBatchHandler2#CanCommitBatch(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch,System.UInt32,System.UInt32,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.Microsoft#Internal#VisualStudio#Shell#Interop#IVsSolutionReloadBatchHandler#CanCommitBatch(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch,System.UInt32,System.UInt32,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.Microsoft#Internal#VisualStudio#Shell#Interop#IVsSolutionReloadBatchHandler2#CanCommitBatchUI(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch,System.UInt32,System.UInt32,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.Microsoft#Internal#VisualStudio#Shell#Interop#IVsSolutionReloadBatchHandler#CanCommitBatchUI(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch,System.UInt32,System.UInt32,System.UInt32@)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.Microsoft#Internal#VisualStudio#Shell#Interop#IVsSolutionReloadBatchHandler2#ExecuteReloadUI(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch,System.UInt32,System.Guid[],System.UInt32[])">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperation.Microsoft#Internal#VisualStudio#Shell#Interop#IVsSolutionReloadBatchHandler2#ExecuteReloadWithProjectDefinitionsUI(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch,System.UInt32,System.Guid[],Microsoft.Internal.VisualStudio.Shell.Interop.IVsProjectDefinitionInSolution[],System.UInt32[])">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BulkFileOperation.Microsoft#Internal#VisualStudio#Shell#Interop#IVsSolutionReloadBatchHandler2#HandlerId">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.BulkFileOperationFileWatcher">
            <summary>
            Use custom FileWatcher to track file changes because platform IVsFileChange service stop listening for file changes after hands-off.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BulkFileOperationFileWatcher.UpdatedFiles">
            <summary>
            Gets list of updated files between the ResetAndStartListening() and StopListening() calls.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.BulkFileOperationFileWatcher.IsBufferOverflowed">
            <summary>
            Indicates whether InternalBufferException happened during the listening.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.BulkFileOperationFileWatcher.CalculateBufferSizeAsync">
            <summary>
            Gets internal buffer size from 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FileUtilities.NormalizeFolderPath(System.String)">
             <summary>
             Normalizes full folder path to the path with standard separators '\\'
             and ensure that path has '\\' at the end.
             </summary>
             <remarks>
             Example1:
              - input: c:/my/folder
              - output: c:\my\folder\
            
             Example 2:
               - input: d:\
               - output: d:\
             </remarks>
             <param name="fullFolderPath">Input fully qualified folder path</param>
             <returns>Normalized fully qualified folder path</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IBulkFileOperationFileWatcher.UpdatedFiles">
            <summary>
            Gets list of updated files between the ResetAndStartListening() and StopListening() calls.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IBulkFileOperationFileWatcher.IsBufferOverflowed">
            <summary>
            Indicates whether InternalBufferException happened during the listening.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.IRunningDocumentTableLightweightProxy.EditorModifierCount">
            <summary>
            Gets current count of document windows open/close. Used to understand whether reopening document window is needed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RunningDocumentTableLightweightProxy">
            <summary>
            Provides lightweight functionality for the RunningDocumentTable.
            It keeps actual information in RDT from the creation and until disposing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RunningDocumentTableLightweightProxy.EditorModifierCount">
            <summary>
            Gets current count of document windows open/close. Used to understand whether reopening document window is needed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTableLightweightProxy.#ctor(System.IServiceProvider)">
            <summary>
            Constructor should be called on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTableLightweightProxy.DisposeManagedResources">
            <summary>
            We should unsubscribe of all RDT events here.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RunningDocumentTableLightweightProxy.RunningDocumentInfoRef">
            <summary>
            Need this ref to avoid create copies of the RunningDocumentInfo structures or having 'ref' in all methods
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SolutionFileDiffTelemetryComplexObject">
            <summary>
            This class is serialized to json and is sent to telemetry as is.
            It is ok to add fields, but changing and rename properties could break telemetry. Example of generated property
            {
            "FormatVersionChanged":false,
            "VisualStudioVersionChanged":true,
            "MinimumVisualStudioVersionChanged":false,
            "AddedProjectCount":10,
            "RemovedProjectCount":10,
            "RenamedProjectCount":10,
            "UpdatedSolutionItemsForProjectCount":10,
            "UpdatedInformationForProjectCount":9,
            "GlobalTeamFoundationVersionControlUpdated":false,
            "GlobalSolutionConfigurationPlatformsUpdated":false,
            "GlobalSolutionPropertiesUpdated":false,
            "GlobalExtensibilityUpdated":false,
            "GlobalSectionsUpdated":["ProjectConfigurationPlatforms"],
            "GlobalSectionsNotInOrder":[],
            "GlobalSectionsAdded":["SharedMSBuildProjectFiles"],"GlobalSectionsRemoved":[]
            }
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SolutionFile.CommentLineParser">
            <summary>
            Parses any comment line in the solution file. Example:
            # Visual Studio 2013
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SolutionFile.FormatVersionLineParser">
            <summary>
            Parses format version line in solution file. Example:
            Microsoft Visual Studio Solution File, Format Version 12.00
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SolutionFile.GlobalLineParser">
            <summary>
            Parses Global section in solution file. Example:
            GlobalSection(SolutionProperties) = preSolution
              HideSolutionNode = FALSE
            EndGlobalSection
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SolutionFile.ILineParser.TryParseLine(System.String,Microsoft.VisualStudio.Shell.SolutionFile.SolutionFileBuilder,System.Boolean@)">
            <summary>
            Try to parse line by concrete parser.
            </summary>
            <param name="line">Input line</param>
            <param name="sfb">Solution file builder</param>
            <param name="needMoreLines">If this parser need more lines this will be true, otherwise this will be false</param>
            <returns>True, in the case of successful parsing of this line. False, if we don't recognize this line.
            In case this parser needs more line this should be treated as solution file parsing failure.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SolutionFile.LineParserHelper">
            <summary>
            Serves to provide common functionality for concrete line parsers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SolutionFile.LineParserHelper.TryParseSectionLine(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}@)">
            <summary>
            Parse section line in the format "SectionName(SectionId) = SectionInitType".
            Examples:
             ProjectSection(ProjectDependencies) = postProject
             GlobalSection(TeamFoundationVersionControl) = preSolution
            </summary>
            <param name="line">input line</param>
            <returns>KeyValuePair. Key is a SectionId, Value is a SectionInitType</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SolutionFile.LineParserHelper.ParseArrayOfStrings(System.String)">
            <summary>
            Parser array of string into the C# array of strings.
            </summary>
            <param name="line">Input line should be in format: "item1", "item2", "item3", ..., "item last"</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SolutionFile.MinimumVisualStudioVersionLineParser">
            <summary>
            Parses Minimum Visual Studio Version Line. Example:
            MinimumVisualStudioVersion = 10.0.40219.1
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SolutionFile.ProjectLineParser">
             <summary>
             Parse Project section. It is of the following format:
             Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Solution Items", "Solution Items", "{BCE760BF-2F2F-4CDE-965D-A125430CE1FD}"
               ProjectSection(SolutionItems) = preProject
                 dirs.proj = dirs.proj
               EndProjectSection
             EndProject
            
             'ProjectSection' optional element
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SolutionFile.SectionDefinitionLineParser">
            <summary>
            Parser section in the format:
            SectionType(SectionId) = InitType
              Key1 = Value1
              Key2 = Value2
              ...
              KeyN = ValueN
            EndSectionType
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SolutionFile.VisualStudioVersionLineParser">
            <summary>
            Parses VisualStudioVersion line. Example:
            VisualStudioVersion = 12.0.20720.0
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SolutionFile.ProjectDefinition.ProjectType">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SolutionFile.ProjectDefinition.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SolutionFile.ProjectDefinition.Moniker">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SolutionFile.ProjectDefinition.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SolutionFile.ProjectDefinition.ProjectConfig">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SolutionFile.ProjectDefinition.Parent">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SolutionFile.ProjectDefinition.InnerProjectSections">
            <summary>
            Project sections array. Key is an Id of the section.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SolutionFile.SolutionFile.FormatVersion">
            <summary>
            Gets from the first line of the solution file.
            Example: "Microsoft Visual Studio Solution File, Format Version 11.00"
            In that case format version will be "11.00"
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SolutionFile.SolutionFile.VisualStudioVersion">
            <summary>
            Gets from the line like: "VisualStudioVersion = 14.0.23107.0"
            In that case VS Version will be "14.0.23107.0"
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SolutionFile.SolutionFile.MinimumVisualStudioVersion">
            <summary>
            Gets from the line like: "MinimumVisualStudioVersion = 10.0.40219.1"
            In that case minimum VS Version will be "10.0.40219.1"
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SolutionFile.SolutionFile.Projects">
            <summary>
            Definition of projects. Read from the following section:
            Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Solution Items", "Solution Items", "{BCE760BF-2F2F-4CDE-965D-A125430CE1FD}"
              ProjectSection(SolutionItems) = preProject
                dirs.proj = dirs.proj
              EndProjectSection
            EndProject
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SolutionFile.SolutionFile.Global">
            <summary>
            Global section. Format like this:
            GlobalSection(SolutionConfigurationPlatforms) = preSolution
                VSMSBuild|Any CPU = VSMSBuild | Any CPU
            EndGlobalSection
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SolutionFile.SolutionFileDiff">
            <summary>
            Represents difference between 2 solution files.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerRegistry">
            <summary>
            A type that represents the main Registry employed by the Shell for keeping 
            track of all the Code Containers it accesses.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerRegistry.IsRoamed">
            <summary>
            Keep the underlying data stored locally, i.e. don't roam it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerRegistry.SettingsListName">
            <summary>
            The name of the underlying store used to persist the data on this Registry.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStorageManager">
            <summary>
            The primary type responsible for managing the records of the Code Containers accessed by the Shell.
            It is mainly responsible for (a) bookkeeping of the Code Containers accessed by the Shell and (b)
            roaming of information related to the online presence of such Code Containers on the web
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStorageManager.#ctor(Microsoft.VisualStudio.Shell.ObservableSettingsListBase{Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer},Microsoft.VisualStudio.Shell.ObservableSettingsListBase{Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainer})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStorageManager" />.
            </summary>
            <param name="mainRegistry">The primary registry used to persist Code Container info</param>
            <param name="remoteRegistry">The registry used to roam Remote Code Containers</param>
            <exception cref="T:System.ArgumentNullException">Thrown if either <paramref name="mainRegistry" /> or <paramref name="remoteRegistry" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStorageManager.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the <see cref="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer" /> whose Full-Path is equal to <paramref name="fullPath" />
            if it has been previously opened by the Shell. Returns null otherwise.
            </summary>
            <param name="fullPath">Full path</param>
            <param name="cancellationToken">Cancellation token</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="fullPath" /> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="fullPath" /> is empty.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStorageManager.AddOrUpdateAsync(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer,System.Threading.CancellationToken)">
            <summary>
            Adds or updates the records of the Shell for the supplied <paramref name="codeContainer" />.
            Also roams the associated <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.Remote" /> if any.
            </summary>
            <param name="codeContainer">The container to be added or updated</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The revision number assigned to this change</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="codeContainer" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStorageManager.RemoveAsync(Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer,System.Threading.CancellationToken)">
            <summary>
            Removes the records of the Shell for the supplied <paramref name="codeContainer" /> and unroams
            the <see cref="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer.Remote" /> associated with it if any.
            </summary>
            <param name="codeContainer">The container to remove</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The revision number assigned to this change</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="codeContainer" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStorageManager.SubscribeAsync(System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.Shell.StatefulReadOnlyList{Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainer,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
            <summary>
            Allows <paramref name="targetBlock" /> to receive updates about Code Containers accessed by the Shell.
            </summary>
            <param name="targetBlock">The target block to which updates will be sent.</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>An <see cref="T:System.IDisposable" /> that unsubscribes <paramref name="targetBlock" /> upon disposal.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="targetBlock" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeContainerManagement.CodeContainerStorageManager.Complete">
            <summary>
            Do not use. This method is intended for unit testing purposes only.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainerRegistry">
            <summary>
            A type that represents the Registry employed by the Shell for the purposes of tracking and roaming 
            of information related to the online presence and hosting of Code Containers on the web.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainerRegistry.IsRoamed">
            <summary>
            Keep the underlying data stored locally and on the cloud, i.e. roam it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeContainerManagement.RemoteCodeContainerRegistry.SettingsListName">
            <summary>
            The name of the underlying store used to persist the data on this Registry.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1">
            <summary>
            A base type for observable <see cref="T:Microsoft.VisualStudio.Settings.ISettingsList" /> instances of strongly-typed values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1.SubscriberCount">
            <summary>
            The number of subscribers to the Registry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1.IsPurging">
            <summary>
            A flag that indicates whether the Registry is currently in the process of purging its entries
            because the max number of entries has been reached.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1.SettingsListName">
            <summary>
            Determines the name of the ISettingsList the Registry will employ to store its data.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1.IsRoamed">
            <summary>
            A flag that indicates whether the underlying settings list will be roamed to other devices or not.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1.SettingsList">
            <summary>
            The actual settings list where the Code Container data is persisted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the Code Container associated with <paramref name="key" /> if any. Returns null otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1.AddOrUpdateAsync(System.String,`0,System.Object,System.Threading.CancellationToken)">
            <summary>
            Adds or updates <paramref name="value" /> to the Registry under the supplied <paramref name="key" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1.RemoveAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Removes the value stored under the supplied <paramref name="key" /> if any.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1.ClearAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Clears all keys and values stored on the list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1.SubscribeAsync(System.Threading.Tasks.Dataflow.ITargetBlock{Microsoft.VisualStudio.Shell.StatefulReadOnlyList{`0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Allows <paramref name="targetBlock" /> to receive updates of the list of items stored on the list
            and receive up-to-date versions of it whenever it gets modified.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1.SuspendUpdatesAsync">
            <summary>
            Suspends sending updates to any subscribed observers. This is useful in case multiple changes
            are made to the list cause it keeps the list from pushing updates to subscribers every single
            time a change is made. Any updates made to the underlying list during suspension will cause an
            up-to-date copy to be pushed to subscribers as soon as suspensions are disposed of.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1.Complete">
            <summary>
            Do NOT use. Intended for unit testing only.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1.CodeContainerSettingsList_CollectionChangedAsync(System.Object,Microsoft.VisualStudio.Settings.SettingsListChangedEventArgs)">
            <summary>
            An event-handler that is fired whenever changes to the underlying ISettingsList maintained by the Registry are made.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ObservableSettingsListBase`1.PurgeIfNecessaryAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Removes a fixed number of the least-accessed values to keep the underlying ISettingsList from growing indefinitely.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.EnumerableComCollection`2">
            <summary>
            Generic base class for types that provide an IEnumerable wrapper around
            COM-style IEnumXXX interfaces.
            </summary>
            <remarks>
            Classes that derive from this class adapt a COM-style IEnumXXX interface
            into an form that can be processed by a foreach statement.  Ideally this
            generic class would be sufficient on its own without the need for a derived
            class to do the job, but the rigor with which C# generics must be defined
            prevents that.
            
            This class must call methods on the COM enumerator that it wraps (Next,
            Skip, etc.), but generic types can only access properties and methods on
            their parameterized types that are specified in the parameterized types'
            constraints.  Specifically, we can only call TComEnumerator.Next if we
            specify a constraint on TComEnumerator that tells the compiler that 
            TComEnumerator implements Next.
            
            COM IEnumXXX interfaces are strongly typed (i.e. IEnumXXX.Next returns an
            array of XXX objects) and do not have a common base class, so we can't
            place a constraint on TComEnumerator directly.  This is where IComEnumeratorRelay
            comes in: EnumerableComCollection requires that its derived class implements the
            strongly-typed IComEnumeratorRelay interface which allows the generic type
            to call into the COM enumerator without having to place a constraint on
            TComEnumerator.
            </remarks>
            <typeparam name="TComEnumerator">COM enumerator type (e.g. IEnumString)</typeparam>
            <typeparam name="TEnumerated">
            Type enumerated by <typeparamref name="TComEnumerator" /> (e.g. string)
            </typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.EnumerableComCollection`2.Enumerator.MoreItems">
            <summary>
            Are there items that haven't been enumerated yet?
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.EnumerableComCollection`2.Enumerator.NeedToFetch">
            <summary>
            Do we need to fetch more items from the wrapped enumerator?
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.EnumerableComCollection`2.Enumerator.Fetch">
            <summary>
            Fetches the next chunk of items from the wrapped enumerator.
            </summary>
            <returns>True if there are more items, false if there are no more items</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CommonMessagePump">
            <summary>
            CommonMessagePump allows callers to block the current thread until a handle or handles have been signaled.
            During the wait the IDE will be placed in a modal state to prevent reentrancy. 
            If the wait takes more than 2 secs a wait dialog is presented to the user which can be canceled (by default).
            Callers can call the default behaviour which will show default text in the wait dialog or they can 
            provide custom values for things like the dialog text, status bar text, timeout values etc.
            Callers can also provide a custom implementation of IVsCommonMessagePumpClientEvents which allows
            the client to run code when certain events occur such as messages being processed, timeout or a handle
            being signaled. This interface can also be used to detemine if the wait should continue or return.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.ModalWaitForHandles(System.IntPtr[],Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePumpClientEvents)">
            <summary>
            Blocks the current thread by pumping messages until either a timeout 
            or one of the specified handles has been signaled.
            </summary>
            <param name="handles">Array of handles to wait on.</param>
            <param name="client">Callers implementation of IVsCommonMessagePumpClientEvents</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.ModalWaitForHandles(System.IntPtr[],System.Int32@)">
            <summary>
            Blocks the current thread by pumping messages until either a timeout 
            or one of the specified handles has been signaled.
            </summary>
            <param name="handles">Array of handles to wait on.</param>
            <param name="handleSignaledIndex">Index to the handle that was signaled.</param>
            <returns>An exit code indicating why the wait ended.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.ModalWaitForHandles(System.Threading.WaitHandle)">
            <summary>
            Blocks the current thread by pumping messages until either a timeout 
            or the specified handle has been signaled.
            </summary>
            <param name="handle">Handle to wait on.</param>
            <returns>An exit code indicating why the wait ended.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.ModalWaitForHandles(System.Threading.WaitHandle[],System.Int32@)">
            <summary>
            Blocks the current thread by pumping messages until either a timeout 
            or one of the specified handles has been signaled.
            </summary>
            <param name="handles">Array of handles to wait on.</param>
            <param name="handleSignaledIndex">Index to the handle that was signaled.</param>
            <returns>An exit code indicating why the wait ended.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.ModalWaitForHandles(System.Threading.WaitHandle[],Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePumpClientEvents)">
            <summary>
            Blocks the current thread by pumping messages until either a timeout 
            or one of the specified handles has been signaled.
            </summary>
            <param name="handles">Array of handles to wait on.</param>
            <param name="client">Caller implementation of IVsCommonMessagePumpClientEvents</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CommonMessagePump.Timeout">
            <summary>
            Set the timeout value for the modal wait. 
            Use TimeSpan.MaxValue for an infinite wait.
            </summary>
            <remarks>This may be set before calling ModalWaitForHandles or
            during one of the callbacks in ModalWaitForHandlesWithClient.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CommonMessagePump.AllowCancel">
            <summary>
            Controls if the wait dialog has an enabled cancel button.
            </summary>
            <remarks>This may be set before calling ModalWaitForHandles or
            during one of the callbacks in ModalWaitForHandlesWithClient.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CommonMessagePump.WaitText">
            <summary>
            Wait dialog text for what we are waiting on.
            </summary>
            <remarks>This may be set before calling ModalWaitForHandles or
            during one of the callbacks in ModalWaitForHandlesWithClient.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CommonMessagePump.WaitTitle">
            <summary>
            Title of the wait dialog
            </summary>
            <remarks>This may be set before calling ModalWaitForHandles or
            during one of the callbacks in ModalWaitForHandlesWithClient.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CommonMessagePump.StatusBarText">
            <summary>
            Text of the status bar during the wait.
            </summary>
            <remarks>This may be set before calling ModalWaitForHandles or
            during one of the callbacks in ModalWaitForHandlesWithClient.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CommonMessagePump.EnableRealProgress">
            <summary>
            Determines what type of progress control to use in the Wait Dialog.
            true indicates a percentage progress.
            false indicates a marquee stype progress.
            Only has an effect before calling the ModalWait functions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CommonMessagePump.TotalSteps">
            <summary>
            Total number of steps for the progress control of the wait dialog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CommonMessagePump.CurrentStep">
            <summary>
            Current step for the progress control of the wait dialog.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#Shell#Interop#IVsCommonMessagePump#ModalWaitForObjects(System.IntPtr[],System.UInt32,System.UInt32@)">
            <summary>
            Blocks the current thread by pumping messages until either a timeout 
            or one of the specified handles has been signaled.
            </summary>
            <param name="handles">Array of handles to wait on.</param>
            <param name="handleCount">Count of handles</param>
            <param name="waitResult">WAIT_TIMEOUT if the wait timed out OR the index to the signaled handle.</param>
            <returns>    
            S_OK      - the wait condition was met; pdwWaitResult 
                        parameter will contain more information about 
                        the wait result.
            E_PENDING - the method had to quit because user cancelled 
                        the wait operation.
            E_ABORT   - likely WM_QUIT was received.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#Shell#Interop#IVsCommonMessagePump#ModalWaitForObjectsWithClient(System.IntPtr[],System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCommonMessagePumpClientEvents)">
            <summary>
            Blocks the current thread by pumping messages until either a timeout 
            or one of the specified handles has been signaled.
            </summary>
            <param name="handles">Array of handles to wait on.</param>
            <param name="handleCount">Count of handles</param> 
            <param name="client">Caller implementation of IVsCommonMessagePumpClientEvents</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#Shell#Interop#IVsCommonMessagePump#SetTimeout(System.UInt32)">
            <summary>
            Set the timeout value for the modal wait. 
            Use 0xFFFFFFFF for an infinite wait.
            </summary>
            <remarks>This may be set before calling ModalWaitForHandles or
            during one of the callbacks in ModalWaitForHandlesWithClient.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#Shell#Interop#IVsCommonMessagePump#SetAllowCancel(System.Boolean)">
            <summary>
            Controls if the wait dialog has an enabled cancel button.
            </summary>
            <remarks>This may be set before calling ModalWaitForHandles or
            during one of the callbacks in ModalWaitForHandlesWithClient.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#Shell#Interop#IVsCommonMessagePump#SetWaitText(System.String)">
            <summary>
            Wait dialog text for what we are waiting on.
            </summary>
            <remarks>This may be set before calling ModalWaitForHandles or
            during one of the callbacks in ModalWaitForHandlesWithClient.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#Shell#Interop#IVsCommonMessagePump#SetWaitTitle(System.String)">
            <summary>
            Title of the wait dialog
            </summary>
            <remarks>This may be set before calling ModalWaitForHandles or
            during one of the callbacks in ModalWaitForHandlesWithClient.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CommonMessagePump.Microsoft#VisualStudio#Shell#Interop#IVsCommonMessagePump#SetStatusBarText(System.String)">
            <summary>
            Text of the status bar during the wait.
            </summary>
            <remarks>This may be set before calling ModalWaitForHandles or
            during one of the callbacks in ModalWaitForHandlesWithClient.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.DefaultCommonMessagePumpClientImpl">
            <summary>
            Default implementation of the IVsCommonMessagePumpClientEvents interface
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DefaultCommonMessagePumpClientImpl.OnHandleSignaled(System.UInt32,System.Boolean@)">
            <summary>
            Callback function for when a handle is signaled.
            </summary>
            <param name="handleIndex">Index to the handle being signaled from the array of handles passed to method that beagn the wait.</param>
            <param name="shouldContinue">Out param inidcating if the common message pump should continue waiting.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DefaultCommonMessagePumpClientImpl.OnTimeout(System.Boolean@)">
            <summary>
            Callback function for when the wait timeout has expired.
            </summary>
            <param name="shouldContinue">Out param inidcating if the common message pump should continue waiting.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DefaultCommonMessagePumpClientImpl.OnAfterMessageProcessed(System.Boolean@)">
            <summary>
            Callback function after a single message has been processed on the message queue.
            </summary>
            <param name="shouldContinue">Out param inidcating if the common message pump should continue waiting.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ComUtilities">
            <summary>
            A class providing miscellaneous methods used when interacting with unmanaged code (COM objects) and interop types
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ComUtilities.IsSameComObject(System.Object,System.Object)">
            <summary>
            Verify that object represent the same instance of an object.
            This essentially compares the IUnkown pointers of the 2 objects.
            This is needed in scenario where aggregation is involved.
            </summary>
            <param name="object1">Can be an object, interface or IntPtr</param>
            <param name="object2">Can be an object, interface or IntPtr</param>
            <returns>True if the 2 items represent the same thing</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ComUtilities.QueryInterfaceIUnknown(System.Object)">
            <summary>
            Retrieve the IUnknown for the managed or COM object passed in.
            </summary>
            <param name="object1">Managed or COM object.</param>
            <returns>Pointer to the IUnknown interface of the object.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1">
            <summary>
            Provides the base class for a generic IReadOnlyObservableSet.
            </summary>
            <typeparam name="T">The type of items stored in the set.</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})" -->
        <member name="M:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1.AddItem(`0)">
            <summary>
            Adds the specified element to a set.
            </summary>
            <param name="item">The element to add to the set.</param>
            <returns>true if the element is added to the <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" /> object; false if the element is already present.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1.ClearItems">
            <summary>
            Removes all elements from a <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" /> object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1.RemoveItem(`0)">
            <summary>
            Removes the specified element from a <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" /> object.
            </summary>
            <param name="item">The element to remove from the set.</param>
            <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if item is not found in the <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" /> object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1.OnItemAdded(`0)">
            <summary>
            Invoked when an element is added to the set.
            </summary>
            <param name="item">The element that was added to the set.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1.OnItemRemoved(`0)">
            <summary>
            Invoked when an element is removed from the set.
            </summary>
            <param name="item">The element that was removed from the set.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1.OnItemsCleared(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Invoked when the set is cleared.
            </summary>
            <param name="clearedItems">The elements that were cleared from the set.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invoked when the collection is changed.
            </summary>
            <param name="eventArgs">Arguments of the event being raised, describing the changes made to the set.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1.Contains(System.Object)">
            <summary>
            Determines whether an element is in the <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" />.</param>
            <returns>true if item is found in the <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" />; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" />.</param>
            <returns>true if item is found in the <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" />; otherwise, false.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" />. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" />.
            </summary>
            <returns>An enumerator object for the <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" /> object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" />.
            </summary>
            <returns>An enumerator object for the <see cref="T:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1" /> object.</returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.ReadOnlyObservableSet`1.CollectionChanged">
            <summary>
            Occurs when an item is added, removed, changed, moved, or the entire set is refreshed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\DefaultRegistryRootAttribute.uex" path="docs/doc[@for=&quot;DefaultRegistryRootAttribute&quot;]" />
            <devdoc>
                This attribute defines the default registry root this package was designed to work with.  
                This attribute exists on the Package base class and contains the root for the version of 
                Visual Studio the package was copiled for.  The various path and registry methods on 
                Package make use of this attribute, as does default registration code that setup will 
                use to register packages. 
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute.#ctor(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DefaultRegistryRootAttribute.uex" path="docs/doc[@for=&quot;DefaultRegistryRootAttribute.DefaultRegistryRootAttribute&quot;]" />
            <devdoc>
                Creates a new DefaultRegistryRootAttribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DefaultRegistryRootAttribute.Root">
            <!-- Failed to insert some or all of included XML --><include file="doc\DefaultRegistryRootAttribute.uex" path="docs/doc[@for=&quot;DefaultRegistryRootAttribute.Root&quot;]" />
            <devdoc>
                Returns the default registry root.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor">
            <summary>
            The purpose of DesignPropertyDescriptor is to allow us to customize the
            display name of the property in the property grid.  None of the CLR
            implementations of PropertyDescriptor allow you to change the DisplayName.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.DisplayName">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.ComponentType">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.IsReadOnly">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.PropertyType">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.GetEditor(System.Type)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.Converter">
            <summary>
            Return type converter for property
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.GetTypeFromNameProperty(System.String)">
            <summary>
            Convert name to a Type object.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Delegates to base.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Constructor.  Copy the base property descriptor and also hold a pointer
            to it for calling its overridden abstract methods.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogContainerWithToolbar.uex" path="docs/doc[@for=&quot;DialogContainerWithToolbar&quot;]/*" />
            <devdoc>
            This class is the base class for forms that need to be displayed as modal dialogs inside VisualStudio.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.WindowPaneAdapter">
            <devdoc>
            This class is used to change the control contained by the form to a
            IVsWindowPane. This is expecially needed if the control is a form,
            because WinForms will not allow us to make it child of another form.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor(System.IServiceProvider,System.Windows.Forms.Control,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogContainerWithToolbar.uex" path="docs/doc[@for=&quot;DialogContainerWithToolbar.DialogContainerWithToolbar&quot;]/*" />
            <devdoc>
            Constructor of the DialogContainerWithToolbar. This constructor allow the caller to set a IServiceProvider,
            the conatined control and an additional IOleCommandTarget implementation that will be chained to the one
            implemented by OleMenuCommandTarget.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor(System.IServiceProvider,System.Windows.Forms.Control)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogContainerWithToolbar.uex" path="docs/doc[@for=&quot;DialogContainerWithToolbar.DialogContainerWithToolbar1&quot;]/*" />
            <devdoc>
            Constructor of the DialogContainerWithToolbar. This constructor allow the caller to set a IServiceProvider and
            the conatined control.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogContainerWithToolbar.uex" path="docs/doc[@for=&quot;DialogContainerWithToolbar.DialogContainerWithToolbar2&quot;]/*" />
            <devdoc>
            Constructor of the DialogContainerWithToolbar. This constructor allow the caller to set a IServiceProvider.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogContainerWithToolbar.uex" path="docs/doc[@for=&quot;DialogContainerWithToolbar.DialogContainerWithToolbar3&quot;]/*" />
            <devdoc>
            Constructor of the DialogContainerWithToolbar.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.SetSite(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogContainerWithToolbar.uex" path="docs/doc[@for=&quot;DialogContainerWithToolbar.SetSite&quot;]/*" />
            <devdoc>
            Set the site for this window.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.Dispose(System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogContainerWithToolbar.uex" path="docs/doc[@for=&quot;DialogContainerWithToolbar.Dispose&quot;]/*" />
            <devdoc>
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ToolbarID">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogContainerWithToolbar.uex" path="docs/doc[@for=&quot;DialogContainerWithToolbar.ToolbarID&quot;]/*" />
            <devdoc>
            Gets or Sets the CommandID of the toolbar contained in this dialog.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ToolbarLocation">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogContainerWithToolbar.uex" path="docs/doc[@for=&quot;DialogContainerWithToolbar.ToolbarLocation&quot;]/*" />
            <devdoc>
            Location of the toolbar (Top, left, right ot bottom).
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ToolbarDropTarget">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogContainerWithToolbar.uex" path="docs/doc[@for=&quot;DialogContainerWithToolbar.ToolbarDropTarget&quot;]/*" />
            <summary>
            If the toolwindow has a ToolBar, allows intercepting drag and drop operations on the toolbar.
            Otherwise this is null
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ToolbarHost">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogContainerWithToolbar.uex" path="docs/doc[@for=&quot;DialogContainerWithToolbar.ToolbarHost&quot;]/*" />
            <devdoc>
            Gets the IVsToolWindowToolbarHost interface for this window.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.CommandService">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogContainerWithToolbar.uex" path="docs/doc[@for=&quot;DialogContainerWithToolbar.CommandService&quot;]/*" />
            <devdoc>
            Returns the command service used to check the status or execute
            the toolbar's commands.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogContainerWithToolbar.ShowDialog">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogContainerWithToolbar.uex" path="docs/doc[@for=&quot;DialogContainerWithToolbar.ShowDialog&quot;]/*" />
            <devdoc>
            Show this window as modal dialog.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.DialogKeyEventArgs">
            <summary>
            Event args used by <see cref="F:Microsoft.VisualStudio.Shell.UIElementDialogPage.DialogKeyPendingEvent" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DialogKeyEventArgs.Key">
            <summary>
            Gets the key being pressed within the UIElementDialogPage.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.DialogPage">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage&quot;]" />
            <devdoc>
                DialogPage encompasses a tools dialog page.  The default dialog page
                examines itself for public properties, and offers these properties
                to the user in a property grid.  You can customize this behavior,
                however by overriding various methods on the page.  The dialog
                page will automatically persist any changes made to it to the user's
                section of the registry, provided that those properties provide
                support for to/from string conversions on their type converter.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.DialogPage&quot;]" />
            <devdoc>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Shell.DialogPage" /> whose settings are stored locally, not synchronized with the
            Connected Environment.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskContext)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Shell.DialogPage" />.
            </summary>
            <param name="joinableTaskContext">The context used to track async operations in this page.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskContext,Microsoft.VisualStudio.Settings.ISettingsManager2)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Shell.DialogPage" />.
            </summary>
            <param name="joinableTaskContext">The context used to track async operations in this page.</param>
            <param name="settingsManager">The settings manager used for persisting settings.  If null, it's retrieved via the full-access service broker.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DialogPage.AutomationObject">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.AutomationObject&quot;]" />
            <devdoc>
                The object the dialog page is going to browse.  The
                default returns "this", but you can change it to
                browse any object you want.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DialogPage.Site">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage&quot;.Site]" />
            <devdoc>
                Override for the site property.  This override is used so we can
                load and save our settings at the appropriate time.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DialogPage.Window">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage&quot;.Window]" />
            <devdoc>
                The window this dialog page will use for its UI.
                This window handle must be constant, so if you are
                returning a Windows Forms control you must make sure
                it does not recreate its handle.  If the window object
                implements IComponent it will be sited by the
                dialog page so it can get access to global services.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.GetServiceThreadSafe``2">
            <summary>
            Unlike <see cref="M:System.ComponentModel.Container.GetService(System.Type)" />, this is safe to call from a background thread.
            It transitions to the UI thread internally before getting the service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.Dispose(System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.Dispose&quot;]" />
            <devdoc>
                Disposes this object.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.LoadSettingsFromStorage">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.LoadSettingsFromStorage&quot;]" />
            <devdoc>
                This method is called when the dialog page should load
                its default settings from the backing store.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.DoCancelableOperationWithProgressUI(System.Action,System.String)">
            <summary>
            Executes an operation with cancelable progress UI if invoked on the UI thread when the Options dialog is open.
            </summary>
            <param name="action">The action to invoke.  Should throw if <see cref="P:Microsoft.VisualStudio.Shell.DialogPage.CancellationToken" /> is activated.</param>
            <param name="message">The message to show in the progress UI.</param>
            <returns>True if the operation completed successfully; false if it was canceled.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Shell.DialogPage.DoCancelableOperationWithProgressUI(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.String)" -->
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.LoadSettingFromStorage(System.ComponentModel.PropertyDescriptor)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.LoadSettingFromStorage&quot;]" />
            <devdoc>
                This method is called when the dialog page should load
                its default settings from the backing store.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.LoadSettingsFromXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.LoadSettingsFromXml&quot;]" />
            <devdoc>
                This method is called when the dialog page should load
                its default settings from the profile XML file.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.ResetSettings">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.ResetSettings&quot;]" />
            <devdoc>Override this method in order to reset your settings to your default values.</devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.HookProperties(System.Boolean)">
            <devdoc>
            This function hooks property change events so that we automatically serialize
            if the value changes outside of UI and loading
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.MapSerializablePropertyDescriptor(System.ComponentModel.PropertyDescriptor,System.Object@,System.ComponentModel.PropertyDescriptor@)">
            <summary>
            Allows a different property to be observed for changes, instead of the property
            described by <paramref name="descriptor" /> on the <see cref="P:Microsoft.VisualStudio.Shell.DialogPage.AutomationObject" />.
            </summary>
            <param name="descriptor">
            Describes the property that will be observed on <see cref="P:Microsoft.VisualStudio.Shell.DialogPage.AutomationObject" />
            </param>
            <param name="mappedObject">
            The object whose property will be observed instead of <see cref="P:Microsoft.VisualStudio.Shell.DialogPage.AutomationObject" />,
            or null if no change should be made.
            </param>
            <param name="mappedDescriptor">
            Describes the property that will be observed on <paramref name="mappedObject" />,
            or null if no change should be made.
            </param>
            <returns>
            True if <paramref name="mappedObject" /> and <paramref name="mappedDescriptor" /> have been
            returned, false if they haven't (which indicates that the default object and property
            should be observed.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnActivate(System.ComponentModel.CancelEventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.OnActivate&quot;]" />
            <devdoc>
                This method is called when VS wants to activate this
                page.  If true is returned, the page is activated.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnClosed(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.OnClosed&quot;]" />
            <devdoc>
                This event is raised when the page is closed.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnDeactivate(System.ComponentModel.CancelEventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.OnDeactivate&quot;]" />
            <devdoc>
                This method is called when VS wants to deatviate this
                page.  If true is returned, the page is deactivated.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnApply(Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.OnApply&quot;]" />
            <devdoc>
                This method is called when VS wants to save the user's
                changes then the dialog is dismissed.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.InvokeEmptyOrServiceProviderConstructor(System.Type)">
            <summary>
            Looks for a constructor on the given type taking an IServiceProvider argument, and invokes it (with our Site property)
            if present; otherwise, looks for one taking no arguments and invokes that.
            </summary>
            <returns>The object constructed, or null if neither constructor was found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.IsPropertyValueMachineLocal(System.Object,System.String,System.Type)">
            <summary>
            Creates an ISettingsMachineLocalityEvaluator instance matching the given type and asks it whether the property value
            is machine local.  Returns false if the type doesn't implement  ISettingsMachineLocalityEvaluator or there was no
            appropriate constructor.
            </summary>
            <param name="evaluatorType">A type that implements ISettingsMachineLocalityEvaluator.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.IsPropertyValueMachineLocal(System.ComponentModel.PropertyDescriptor,System.Object,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.IsPropertyValueMachineLocal&quot;]" />
            <summary>
            Returns whether a given value from a property on the AutomationObject is local to this machine (vs. being roamable to other machines)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.SaveSettingsToStorage">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.SaveSettingsToStorage&quot;]" />
            <devdoc>
                This method does the reverse of LoadSettingsFromStorage.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.SaveSetting(System.ComponentModel.PropertyDescriptor)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.SaveSetting&quot;]" />
            <devdoc>
                This method saves an individual property to storage.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.SaveSettingsToXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.SaveSettingsToXml&quot;]" />
            <devdoc>
                This method does the reverse of LoadSettingsFromXml.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DialogPage.SettingsRegistryPath">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.SettingsRegistryPath&quot;]" />
            <devdoc>
            This is where the settings are stored under [UserRegistryRoot]\DialogPage, the default
            is the full type name of your AutomationObject.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DialogPage.SharedSettingsStorePath">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.SharedSettingsStorePath&quot;]" />
            <devdoc>
            This is where the settings are stored in the shared settings store.  It's based on the
            SharedSettingsAttribute on your AutomationObject, or the full type name if the attribute is
            not specified.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.GetSharedSettingsStorePath(System.ComponentModel.PropertyDescriptor)">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.GetSharedSettingsStorePath&quot;]" />
            <summary>
            Returns the shared settings store path for the given property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DialogPage.System#Windows#Forms#IWin32Window#Handle">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.IWin32Window.Handle&quot;]/*" />
            <internalonly />
            <devdoc>
            IWin32Window implementation.  This just delegates to the Window property.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.SearchStringChanged(System.String)">
            <summary>
            Called when the Tools/Options search box's search term changes or is cleared. Can be overridden to allow
            pages to filter their options content based on the search term. Base implementation does nothing and does
            not need to be called.
            </summary>
            <param name="searchString">
            The search string. When the search is cleared this value can be either null or string.Empty.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.ApplyKind&quot;]/*" />
            <devdoc>
            Apply behavior.  Allows the OnApply event to be canceled with optional navigation instructions.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind.Apply">
            <summary>
            Apply - Allows the changes to be applied
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind.Cancel">
            <summary>
            CancelNavigate - Cancels the apply event and navigates to the page cancelling the event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind.CancelNoNavigate">
            <summary>
            CancelNoNavigate - Cancels the apply event and returns the active page, not the page cancelling the event.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.PageApplyEventArgs&quot;]/*" />
            <devdoc>
            Event arguments to allow the OnApply method to indicate how to handle the apply event.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs.ApplyBehavior">
            <!-- Failed to insert some or all of included XML --><include file="doc\DialogPage.uex" path="docs/doc[@for=&quot;DialogPage.AutomationObject.ApplyBehavior&quot;]" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.DialogPage.DialogContainer">
            <devdoc>
                This class derives from container to provide a service provider
                connection to the dialog page.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.DialogContainer.#ctor(System.IServiceProvider)">
            <devdoc>
                Creates a new container using the given service provider.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.DialogContainer.GetService(System.Type)">
            <devdoc>
                Override to GetService so we can route requests
                to the package's service provider.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.DialogPage.DialogSubclass">
            <devdoc>
                This class derives from NativeWindow to provide a hook
                into the window handle.  We use this hook so we can
                respond to property sheet window messages that VS
                will send us.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.DialogSubclass.#ctor(Microsoft.VisualStudio.Shell.DialogPage)">
            <devdoc>
                Create a new DialogSubclass
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.DialogPage.DialogSubclass.WndProc(System.Windows.Forms.Message@)">
            <devdoc>
                Override for WndProc to handle our PSP messages
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsQueryRemoveFileFlags">
            <summary>
            VSQUERYREMOVEFILEFLAGS, VSQUERYREMOVEFILEFLAGS2 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsQueryRemoveDirectoryFlags">
            <summary>
            VSQUERYREMOVEDIRECTORYFLAGS, VSQUERYREMOVEDIRECTORYFLAGS2 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsRemoveFileFlags">
            <summary>
            VSREMOVEFILEFLAGS, VSREMOVEFILEFLAGS2 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsRemoveDirectoryFlags">
            <summary>
            VSREMOVEDIRECTORYFLAGS, VSREMOVEDIRECTORYFLAGS2 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsFrameMode">
            <summary>
            VSFRAMEMODE, VSFRAMEMODE2 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsRdtFlags">
            <summary>
            _VSRDTFLAGS, _VSRDTFLAGS2
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsRdtSaveOptions">
            <summary>
            __VSRDTSAVEOPTIONS, __VSRDTSAVEOPTIONS2
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsQuerySaveFlags">
            <summary>
            tagVSQuerySaveFlags, __VSQuerySaveFlags2
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQuerySaveFlags.DefaultOperation">
            <summary>
            Normal operation: put up UI if necessary
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQuerySaveFlags.SilentMode">
            <summary>
            No UI is put up
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQuerySaveFlags.DetectAnyChangedFile">
            <summary>
            Detect changes in any file involved in the operation and return QER_Changed if any file was changed on disk.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsQueryEditFlags">
            <summary>
            __VSQueryEditFlags, __VSQueryEditFlags2
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQueryEditFlags.AllowInMemoryEdits">
            <summary>
            In-memory edits are allowed
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQueryEditFlags.ForceInMemoryEdits">
            <summary>
            In-memory edits are allowed regardless
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQueryEditFlags.DisallowInMemoryEdits">
            <summary>
            In-memory edits are disallowed regardless
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQueryEditFlags.SilentMode">
            <summary>
            No UI is put up, but silent operations may be performed to make files editable
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQueryEditFlags.ImplicitEdit">
            <summary>
            Use this flag carefully: this flag disables the cancel button on the checkout dialog; the cancel action is interpreted as the user choice for allowing in memory editing
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQueryEditFlags.ReportOnly">
            <summary>
            No UI is put up, and no action is taken; return values indicate if an edit would be allowed, modulo user interaction, option settings and external conditions
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQueryEditFlags.NoReload">
            <summary>
            Disallow edit if it would cause a reload to occur
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQueryEditFlags.ForceEdit_NoPrompting">
            <summary>
            Perform operations to make files editable, regardless of option settings, and without user interaction
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQueryEditFlags.AllowUnopenedProjects">
            <summary>
            Allows to call QueryEditFiles for project files of unloaded projects or projects that are still being loaded and might not have IVsHierarchy yet.
            QEF_SilentMode is assumed for the flag, i.e. there will never be any UI shown for files of unopened projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQueryEditFlags.CheckoutLocalVersion">
            <summary>
            Attempt to checkout local version
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQueryEditFlags.CheckoutLatestVersion">
            <summary>
            Attempt to checkout latest version
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsQueryEditFlags.DetectAnyChangedFile">
            <summary>
            Detect changes in any file involved in the operation and return QER_Changed if any file was changed on disk.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsHierarchyPropID">
            <summary>
            __VSHPROPID, __VSHPROPID2, __VSHPROPID3, __VSHPROPID4
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsSolutionPropID">
            <summary>
            __VSPROPID, __VSPROPID52, __VSPROPID53, __VSPROPID54, __VSPROPID5
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsFramePropID">
            <summary>
            __VSFPROPID, __VSFPROPID2, __VSFPROPID3, __VSFPROPID4, __VSFPROPID5
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.EventSinkCollection">
            <!-- Failed to insert some or all of included XML --><include file="doc\EventSinkCollection.uex" path="docs/doc[@for=&quot;EventSinkCollection&quot;]/*" />
            <summary>
            Maps objects to and from integer "cookies".  This helps in the implementation
            of VS interfaces that have Advise/Unadvise methods, for example, IVsHierarchy,
            IVsCfgProvider2, IVsBuildableProjectCfg and so on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\EventSinkCollection.uex" path="docs/doc[@for=&quot;EventSinkCollection.EventSinkCollection&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.EventSinkCollection.Count">
            <!-- Failed to insert some or all of included XML --><include file="doc\EventSinkCollection.uex" path="docs/doc[@for=&quot;EventSinkCollection.Count&quot;]/*" />
            <devdov>
            Returns the total number of sinks in the collection.  Some of these might be null though.
            </devdov>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.Add(System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EventSinkCollection.uex" path="docs/doc[@for=&quot;EventSinkCollection.Add&quot;]/*" />
            <devdov>
            Add an event sink and return it's cookie which can be used in the RemoveAt method.
            </devdov>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.Remove(System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EventSinkCollection.uex" path="docs/doc[@for=&quot;EventSinkCollection.Remove&quot;]/*" />
            <devdov>
            Remove the specified event sink from the collection
            </devdov>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.RemoveAt(System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EventSinkCollection.uex" path="docs/doc[@for=&quot;EventSinkCollection.RemoveAt&quot;]/*" />
            <devdov>
            Remove the specified event sink by the cookie integer returned from the Add method.
            </devdov>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.SetAt(System.UInt32,System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EventSinkCollection.uex" path="docs/doc[@for=&quot;EventSinkCollection.SetAt&quot;]/*" />
            <devdov>
            Update the event sink associated with the given cookie.
            </devdov>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.EventSinkCollection.Item(System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\EventSinkCollection.uex" path="docs/doc[@for=&quot;EventSinkCollection.this&quot;]/*" />
            <devdov>
            Indexor access to the event sink.  Cookie is 1-based.
            </devdov>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.Clear">
            <!-- Failed to insert some or all of included XML --><include file="doc\EventSinkCollection.uex" path="docs/doc[@for=&quot;EventSinkCollection.Clear&quot;]/*" />
            <devdov>
            Remove all event sinks.
            </devdov>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.EventSinkCollection.System#Collections#IEnumerable#GetEnumerator">
            <!-- Failed to insert some or all of included XML --><include file="doc\EventSinkCollection.uex" path="docs/doc[@for=&quot;EventSinkCollection.IEnumerable.GetEnumerator&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.EventSource.Reset">
            <summary>
            Internal visibility for unit tests
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Events.EventSource.HandleExceptionsInEventSinks">
            <summary>
            Internal visibility for unit tests
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.EventSource.Advise">
            <summary>
            Called when the first event sink is added to the event source.
            The derived class should advise the VS events it is wrapping at this point.
            This method will always be called on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.EventSource.Unadvise">
            <summary>
            Called when the last event sink is removed from the event source.
            The derived class should unadvise the VS events it is wrapping at this point.
            This method will always be called on the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.EventSource.RaiseEvent``1(System.Object,``0,System.String)">
            <summary>
            Raises the event identified by <paramref name="key" />.  All event handlers are called,
            regardless of whether an individual handler throws an exception.
            </summary>
            <typeparam name="TEventArgs">The type of the argument passed with the event.</typeparam>
            <param name="eventArgs">The arguments to pass with the event</param>
            <param name="key">The key identifying the event to send</param>
            <returns>The HRESULT for the event</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.EventSource.DispatchCallbacks(System.Collections.Generic.IEnumerable{System.Delegate},System.Object,System.EventArgs,System.String,System.Collections.Generic.Dictionary{System.Delegate,Microsoft.VisualStudio.Shell.VsExecutionContextTrackerHelper.CapturedContext})">
            <summary>
            Calls a series of event delegates safely (i.e. an exception in one delegate doesn't
            affect whether other delegates get called).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.EventSource.AddHandler(System.Delegate,System.String)">
            <summary>
            Adds an event handler for the specified key
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.EventSource.RemoveHandler(System.Delegate,System.String)">
            <summary>
            Removes an event handler for the specified key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.EventSource.AddSolitaryHandler``1(``0,System.Collections.Generic.List{``0}@,System.Delegate,System.String)">
            <summary>
            Adds a single event handler for an event to an EventSource.
            </summary>
            <typeparam name="T">The EventSource-derived type exposing managed events for shell COM events</typeparam>
            <param name="primaryEventSource">The primary instance of <typeparamref name="T" /></param>
            <param name="secondaryEventSources">The collection of secondary instances of <typeparamref name="T" /></param>
            <param name="handler">The event handler to add</param>
            <param name="key">The key identifying the event to be handled</param>
            <remarks>
            Some events (e.g. IVsSolutionEvents.OnAfterOpenProject) are handled in a special way by
            the shell.  In order to remain responsive during ASL, sinks handling OnAfterOpenProject
            are called in batches, taking no more than a small amount of time per batch.  If any
            sinks remain to be called when the batch's timeslice is up, a task will be created to
            handle the next batch and so on.
            
            EventSource objects are single event sinks as far as the shell is concerned, but
            ordinary .NET events can have multiple handlers.  These handlers cannot be timesliced 
            by the shell in the way normal shell event sinks (e.g. IVsSolutionEvents) can.  
            To allow EventSource objects to participate in advanced repsonsiveness optimizations
            such as those implemented for IVsSolutionEvents.OnAfterOpenProject, Add/RemoveSolitaryHandler
            arrange for an EventSource event to have at most a single managed handler.  If we 
            get additional managed handlers for the event, we'll create secondary instances 
            of <typeparamref name="T" /> for those managed handlers, and those instances will handle
            *only* the solitary event(s).
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.EventSource.RemoveSolitaryHandler``1(``0,System.Collections.Generic.List{``0}@,System.Delegate,System.String)">
            <summary>
            Removes a single event handler for an event to an EventSource.
            </summary>
            <typeparam name="T">The EventSource-derived type exposing managed events for shell COM events</typeparam>
            <param name="primaryEventSource">The primary instance of <typeparamref name="T" /></param>
            <param name="secondaryEventSources">The collection of secondary instances of <typeparamref name="T" /></param>
            <param name="handler">The event handler to add</param>
            <param name="key">The key identifying the event to be handled</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.EventSource.GetHandler(System.String)">
            <summary>
            Returns the handler for the given key, or null if none exists.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.EventSource.HasHandler(System.String)">
            <summary>
            Indicates whether the event identified by the given key has at least one handler
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Events.EventSource.IsAdvised">
            <summary>
            Indicates whether this EventSource is advised on its VS event source
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.EventSource.SetHandledEventCount(System.Int32)">
            <summary>
            Updates the number of this source's events that have handlers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Events.FolderEventArgs.FolderPath">
            <summary>
            The name of the folder
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Events.ProjectInRunningDocumentTableEventArgs.ProjectId">
            <summary>
            The project's Guid
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Events.ProjectInRunningDocumentTableEventArgs.Filename">
            <summary>
            The fully qualified name of the project file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Events.ProjectInRunningDocumentTableEventArgs.Cookie">
            <summary>
            The Running Document Table cookie for the project file.  This will be
            <see cref="F:Microsoft.VisualStudio.VSConstants.VSCOOKIE_NIL" /> if the project file is not yet in the
            Running Document Table.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Events.QueryCloseFolderEventArgs.FolderPath">
            <summary>
            The name of the folder
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Events.RenameSolutionEventArgs.OldName">
            <summary>
            The old name of the solution
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Events.RenameSolutionEventArgs.NewName">
            <summary>
            The new name of the solution
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Events.SingletonEventSource`1">
            <summary>
            Base class for singleton event sources.  Classes deriving from SingletonEventSource
            should expose static events rather than instance events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.SingletonEventSource`1.Reset">
            <summary>
            Internal visibility for unit tests
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Events.SingletonEventSource`1.Instance">
            <summary>
            The singleton instance of the event source.  We have to create an
            instance to act as the event sink for VS, but since the derived
            class's events are exposed as statics, we don't need to expose the
            Instance property to users of the derived class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Events.SingletonEventSource`1.IsInstanceCreated">
            <summary>
            Indicates whether the singleton instance of TDerived has been created yet.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Events.SolutionEvents">
            <summary>
            Managed-friendly wrapper for IVsSolutionEvents
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Events.SolutionEvents._secondaryInstances">
            <summary>
            Collection of secondary SolutionEvents instances used for tracking multiple
            handlers of OnAfterOpenProject.  See <see cref="M:Microsoft.VisualStudio.Shell.Events.EventSource.AddSolitaryHandler``1(``0,System.Collections.Generic.List{``0}@,System.Delegate,System.String)" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.SolutionEvents.Reset">
            <summary>
            Internal visibility for unit tests
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Events.SolutionEvents.IsPrimaryInstance">
            <summary>
            Indicates whether this is the primary instance of SolutionEvents
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Events.SolutionEvents.IsSecondaryInstance">
            <summary>
            Indicates whether this is a secondary instance of SolutionEvents
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.SolutionEvents.RaiseEvent``1(``0,System.Boolean,System.String)">
            <summary>
            Raises the event identified by <paramref name="key" />.
            </summary>
            <typeparam name="T">The type of the argument passed with the event.</typeparam>
            <param name="eventArgs">The arguments to pass with the event</param>
            <param name="failForSecondaryInstance">
            If true, E_NOTIMPL is returned when this method is called on a secondary
            instance of SolutionEvents.  If false, the event is raised for primary and
            secondary instances of SolutionEvents.
            </param>
            <param name="key">The key identifying the event to send</param>
            <returns>The HRESULT for the event</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.SolutionEvents.Advise">
            <summary>
            Advises solution events when the first event sink is added.
            This method is guaranteed to be called on the UI thread, so
            no synchronization is required to protect _cookie.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Events.SolutionEvents.Unadvise">
            <summary>
            Unadvises solution events when the last event sink is removed.
            This method is guaranteed to be called on the UI thread, so
            no synchronization is required to protect _cookie.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ExtensionPointPackage">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package&quot;]" />
            <devdoc>
                Extended version of the Package base class which implements
                IVsPackageExtensionProvider.
                This was not added to the base "Package" class since
                IVsPackageExtensionProvider is introduced in version 11
                of the Visual Studio interops
                (Microsoft.VisualStudio.Shell.Interop.11.0) and requiring
                that assembly reference when using the Package class would
                cause widespread build breaks.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointPackage.Microsoft#VisualStudio#Shell#Interop#IVsPackageExtensionProvider#CreateExtensionInstance(System.Guid@,System.Guid@)">
            <summary>
            Implements the generic extension point discovery mechanism.
            </summary>
            <param name="extensionPoint">The type of extension point</param>
            <param name="instance">The instance identifier of the extension point being requested</param>
            <returns>The requested extension point</returns>
            <exception cref="T:System.ArgumentException">The requested extension point was not found</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointPackage.CreateExtensionPoint(System.Guid,System.Guid)">
            <summary>
            Called by the base class in order to satisfy a request for an extension point.
            Extension points are implemented by packages and requested on demand by
            shared components.
            This is the reverse of the 'factory' pattern where packages register factories
            with a central service.
            The base class implements discovery mechanisms for well-known extension points.
            Derived classes may override this and optionally call the base class.
            </summary>
            <param name="extensionPoint">The requested extension point type</param>
            <param name="instance">Instance identifier of the requested extension point</param>
            <returns>The requested extension point or null on failure. If null is returned
            the package will throw an ArgumentException to its caller.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointPackage.CreateDiagnosticsProvider(System.Guid)">
            <summary>
            Creates the diagnostics provider for the given registered provider GUID. This is called
            by the base class in response to a request for the ExtId_VsComponentDiagnostics extension
            point. The base implementation searches for ProvideComponentDiagnostics attributes on the
            package class and instantiates the appropriate provider. May be overridden.
            </summary>
            <param name="provider">The GUID of the requested diagnostics provider</param>
            <returns>The requested diagnostics provider</returns>
            <exception cref="T:System.ArgumentException">The requested provider was not found</exception>
            <exception cref="T:System.InvalidCastException">The requested provider does not implement the IVsDiagnosticsProvider interface</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointPackage.CreateSearchProvider(System.Guid)">
            <summary>
            Creates the global search provider for the given registered provider GUID. This is called
            by the base class in response to a request for the IVsSearchProvider extension
            point. The base implementation searches for ProvideSearchProvider attributes on the
            package class and instantiates the appropriate provider. May be overridden.
            </summary>
            <param name="provider">The GUID of the requested search provider</param>
            <returns>The requested search provider</returns>
            <exception cref="T:System.ArgumentException">The requested provider was not found</exception>
            <exception cref="T:System.InvalidCastException">The requested provider does not implement the IVsSearchProvider interface</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointPackage.CreateCodeContainerProvider(System.Guid)">
            <summary>
            Creates a code container provider for the given registered provider Guid.This is called by the base class
            in response to a request for the ICodeContainer extension point. The base implementation searches for 
            ProvideCodeContainerProviderAttribute attributes on the package class and instantiates the appropriate provider.
            May be overridden.
            </summary>
            <param name="provider">The guid of the requested code container provider</param>
            <returns>The requested code container provider</returns>
            <exception cref="T:System.ArgumentException">The requested provider was not found</exception>
            <exception cref="T:System.ArgumentException">The requested provider does not implement the ICodeContainer interface</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointPackage.CreateExtensionPointProvider``2(System.Guid)">
            <summary>
            Create the extension provider declared with the attribute TAttribute on the package, implementing
            an extension point of type TInterface
            </summary>
            <param name="provider"></param>
            <returns>The requested extension provider</returns>
            <exception cref="T:System.ArgumentException">The requested provider was not found</exception>
            <exception cref="T:System.InvalidCastException">The requested provider does not implement the TInterface interface</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointPackageUtilities.CreateExtensionPointProvider``2(Microsoft.VisualStudio.Shell.Package,System.Guid)">
            <summary>
            Create the extension provider declared with the attribute TAttribute on the package, implementing
            an extension point of type TInterface
            </summary>
            <param name="provider"></param>
            <returns>The requested extension provider</returns>
            <exception cref="T:System.ArgumentException">The requested provider was not found</exception>
            <exception cref="T:System.InvalidCastException">The requested provider does not implement the TInterface interface</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.FindAllReferences.DefinitionBucket">
            <summary>
            A helper class that implements <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket2" /> for buckets that correspond to the definition of a symbol
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindAllReferences.DefinitionBucket.#ctor(System.String,System.String,System.String,System.Object,System.StringComparer,System.Boolean)">
            <summary>
            Constructor for an instance an instance of <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket" /> that is displayed using a string.
            </summary>
            <param name="name">Localized name used to display the group header.</param>
            <param name="sourceTypeIdentifier">Name used as the <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.SourceTypeIdentifier" /> when finding <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor" /> to raise events when the user interacts with the bucket.</param>
            <param name="identifier">Name used as the <see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource.Identifier" /> when finding <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor" /> to raise events when the user interacts with the bucket.</param>
            <param name="tooltip">ToolTip to be displayed over the group's header (can be null).</param>
            <param name="comparer">String comparison used to compare two different groups.</param>
            <param name="expandedByDefault">Whether this bucket is initially expanded.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.FindAllReferences.DefinitionBucket.TryCreateColumnContent(System.Windows.FrameworkElement@)">
            <summary>
            Get the <see cref="T:System.Windows.FrameworkElement" /> used to display the group.
            </summary>
            <param name="content">The <see cref="T:System.Windows.FrameworkElement" /> to display the group.</param>
            <returns>true if the group should be displayed using a <see cref="T:System.Windows.FrameworkElement" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject&quot;]/*" />
            <devdoc>
            A project that is a subtype/flavor of an inner project.
            The default behavior of all methods is to delegate to the
            inner project. For any behavior you want to change, simply
            handle the request yourself.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase._innerVsAggregatableProject">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject._innerVsAggregatableProject&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase._innerVsHierarchy">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject._innerVsHierarchy&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase._innerVsUIHierarchy">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject._innerVsUIHierarchy&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase._innerOleCommandTarget">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject._innerOleCommandTarget&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.serviceProvider">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.serviceProvider&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.FlavoredProject&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.GetComInterface``1">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.GetComInterface&quot;]/*" />
            <devdoc>
            A project derived from this base class will be aggregated with a native COM component (the ProjectAggregator object) 
            that can also aggregate an inner project in case of flavoring.
            Because of this structure, all the request for interfaces exposed to COM must be handled by the external object that 
            has a special implementation of QueryInterface that handles both inner and outer projects. 
            If you don’t use this helper method when requesting an interface you can get unexpected InvalidCast exceptions.
            Note that if you want to get the implementation of an interface implemented by your FlavoredProjectBase-derived
            object, then you must use the standard cast operator.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Flavor#IVsAggregatableProjectCorrected#SetInnerProject(System.IntPtr)">
            <devdoc>
            This is where all QI for interface on the inner object should happen
            Then set the inner project
            wait for InitializeForOuter to be called to do the real initialization
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.SetInnerProject(System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.SetInnerProject&quot;]/*" />
            <devdoc>
            This is were all QI for interface on the inner object should happen
            Then set the inner project
            wait for InitializeForOuter to be called to do the real initialization
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Flavor#IVsAggregatableProjectCorrected#InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
            <devdoc>
            Do the initialization here (such as loading flavor specific
            information from the project)
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Boolean@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.InitializeForOuter&quot;]/*" />
            <devdoc>
            Allow the project to initialize itself.
            At this point it possible to call the inner project
            Also allow canceling the project creation
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Flavor#IVsAggregatableProjectCorrected#OnAggregationComplete">
            <devdoc>
            This is called when all object in aggregation have received InitializeForOuter calls.
            At this point the aggregation is complete and fully functional.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.OnAggregationComplete">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.OnAggregationComplete&quot;]/*" />
            <devdoc>
            This is called when all object in aggregation have received InitializeForOuter calls.
            At this point the aggregation is complete and fully functional.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Flavor#IVsAggregatableProjectCorrected#SetAggregateProjectTypeGuids(System.String)">
            <devdoc>
            This must be delegetated to the inner most project
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Microsoft#VisualStudio#Shell#Flavor#IVsAggregatableProjectCorrected#GetAggregateProjectTypeGuids(System.String@)">
            <devdoc>
            This must be delegetated to the inner most project
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.AdviseHierarchyEvents&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.Close&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.GetCanonicalName(System.UInt32,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.GetCanonicalName&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.GetGuidProperty(System.UInt32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.GetGuidProperty&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.GetNestedHierarchy&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.GetProperty(System.UInt32,System.Int32,System.Object@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.GetProperty&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.GetSite">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.GetSite&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.ParseCanonicalName(System.String,System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.ParseCanonicalName&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.QueryClose">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.QueryClose&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.SetGuidProperty&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.UnadviseHierarchyEvents(System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.UnadviseHierarchyEvents&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.SetProperty(System.UInt32,System.Int32,System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.SetProperty&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Unused0">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.Unused0&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Unused1">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.Unused1&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Unused2">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.Unused2&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Unused3">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.Unused3&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.Unused4">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.Unused4&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.QueryStatusCommand&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.ExecCommand&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.EventHandler`1">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.EventHandler&quot;]/*" />
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.FileAdded">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.FileAdded&quot;]/*" />
            <devdoc>
            Called after a file was added to this project.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.FileRemoved">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.FileRemoved&quot;]/*" />
            <devdoc>
            Called after a file was remove from this project.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.FileRenamed">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.FileRenamed&quot;]/*" />
            <devdoc>
            Called after a file was renamed in this project.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.DirectoryAdded">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.DirectoryAdded&quot;]/*" />
            <devdoc>
            Called after a directory was added to this project.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.DirectoryRemoved">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.DirectoryRemoved&quot;]/*" />
            <devdoc>
            Called after a directory was remove from this project.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.DirectoryRenamed">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.DirectoryRenamed&quot;]/*" />
            <devdoc>
            Called after a directory was renamed in this project.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.SccStatusChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.SccStatusChanged&quot;]/*" />
            <devdoc>
            Called after the source code control status of a file in this project changed.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.GetTrackProjectDocuments">
            <devdoc>
            Used to subscribe/unsubscribe to those events
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.GenerateEvents(Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectBase.EventHandler{Microsoft.VisualStudio.Shell.Flavor.ProjectDocumentsChangeEventArgs},Microsoft.VisualStudio.Shell.Flavor.ProjectDocumentsChangeEventArgs)">
            <devdoc>
            Look at the list of projects and files and for each file that is part of this
            project, set the MkDocument on the event argument and trigger the event.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactoryBase.uex" path="docs/doc[@for=&quot;FlavoredProjectFactoryBase&quot;]/*" />
            <devdoc>
            The project factory for the project flavor.
            Note that this is also known as Project Subtype
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.serviceProvider">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactoryBase.uex" path="docs/doc[@for=&quot;FlavoredProjectFactoryBase.ServiceProvider&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactoryBase.uex" path="docs/doc[@for=&quot;FlavoredProjectFactoryBase.FlavoredProjectFactoryBase&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.CanCreateProject(System.String,System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactoryBase.uex" path="docs/doc[@for=&quot;FlavoredProjectFactoryBase.CanCreateProject&quot;]/*" />
            <devdoc>
            This is called to ask the factory if it can create a project based on the current parameters
            </devdoc>
            <returns>True if the project can be created</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.Microsoft#VisualStudio#Shell#Interop#IVsProjectFactory#CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
            <devdoc>
            This is not expected to be called unless using an extension other then the base project
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactoryBase.uex" path="docs/doc[@for=&quot;FlavoredProjectFactoryBase.CreateProject&quot;]/*" />
            <devdoc>
            If you want to use your own extension, you will need to call IVsCreateAggregatedProject.CreateAggregatedProject()
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.Dispose(System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactoryBase.uex" path="docs/doc[@for=&quot;FlavoredProjectFactoryBase.Dispose&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.Initialize">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactoryBase.uex" path="docs/doc[@for=&quot;FlavoredProjectFactoryBase.Initialize&quot;]/*" />
            <devdoc>
            Called by SetSite after setting our service provider
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.PreCreateForOuter(System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactoryBase.uex" path="docs/doc[@for=&quot;FlavoredProjectFactoryBase.PreCreateForOuter&quot;]/*" />
            <devdoc>
            This function returns an instance of the project. This is just creating the object,
            VS will later call SetInner and InitializeForOuter to initialize it.
            </devdoc>
            <param name="outerProjectIUnknown" />
            <returns>The project subtype</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactoryBase.ProjectTypeGuids(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactoryBase.uex" path="docs/doc[@for=&quot;FlavoredProjectFactoryBase.ProjectTypeGuids&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject&quot;]/*" />
            <devdoc>
            A project that is a subtype/flavor of an inner project.
            The default behavior of all methods is to delegate to the
            inner project. For any behavior you want to change, simply
            handle the request yourself.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.innerVsAggregatableProject">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.innerVsAggregatableProject&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.innerVsHierarchy">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.innerVsHierarchy&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.innerVsUIHierarchy">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.innerVsUIHierarchy&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.innerOleCommandTarget">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.innerOleCommandTarget&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.serviceProvider">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.serviceProvider&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.FlavoredProject&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsAggregatableProject#SetInnerProject(System.Object)">
            <devdoc>
            This is were all QI for interface on the inner object should happen
            Then set the inner project
            wait for InitializeForOuter to be called to do the real initialization
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SetInnerProject(System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.SetInnerProject&quot;]/*" />
            <devdoc>
            This is were all QI for interface on the inner object should happen
            Then set the inner project
            wait for InitializeForOuter to be called to do the real initialization
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsAggregatableProject#InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
            <devdoc>
            Do the initialization here (such as loading flavor specific
            information from the project)
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Boolean@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.InitializeForOuter&quot;]/*" />
            <devdoc>
            Allow the project to initialize itself.
            At this point it possible to call the inner project
            Also allow canceling the project creation
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsAggregatableProject#OnAggregationComplete">
            <devdoc>
            This is called when all object in aggregation have received InitializeForOuter calls.
            At this point the aggregation is complete and fully functional.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.OnAggregationComplete">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.OnAggregationComplete&quot;]/*" />
            <devdoc>
            This is called when all object in aggregation have received InitializeForOuter calls.
            At this point the aggregation is complete and fully functional.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsAggregatableProject#SetAggregateProjectTypeGuids(System.String)">
            <devdoc>
            This must be delegetated to the inner most project
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Microsoft#VisualStudio#Shell#Interop#IVsAggregatableProject#GetAggregateProjectTypeGuids(System.String@)">
            <devdoc>
            This must be delegetated to the inner most project
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.AdviseHierarchyEvents&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.Close&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetCanonicalName(System.UInt32,System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.GetCanonicalName&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetGuidProperty(System.UInt32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.GetGuidProperty&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.GetNestedHierarchy&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetProperty(System.UInt32,System.Int32,System.Object@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.GetProperty&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetSite">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.GetSite&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.ParseCanonicalName(System.String,System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.ParseCanonicalName&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.QueryClose">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.QueryClose&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.SetGuidProperty&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.UnadviseHierarchyEvents(System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.UnadviseHierarchyEvents&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SetProperty(System.UInt32,System.Int32,System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.SetProperty&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused0">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.Unused0&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused1">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.Unused1&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused2">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.Unused2&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused3">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.Unused3&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.Unused4">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.Unused4&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.QueryStatusCommand&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.ExecCommand&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.EventHandler`1">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.EventHandler&quot;]/*" />
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.FileAdded">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.FileAdded&quot;]/*" />
            <devdoc>
            Called after a file was added to this project.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.FileRemoved">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.FileRemoved&quot;]/*" />
            <devdoc>
            Called after a file was remove from this project.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.FileRenamed">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.FileRenamed&quot;]/*" />
            <devdoc>
            Called after a file was renamed in this project.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.DirectoryAdded">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.DirectoryAdded&quot;]/*" />
            <devdoc>
            Called after a directory was added to this project.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.DirectoryRemoved">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.DirectoryRemoved&quot;]/*" />
            <devdoc>
            Called after a directory was remove from this project.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.DirectoryRenamed">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.DirectoryRenamed&quot;]/*" />
            <devdoc>
            Called after a directory was renamed in this project.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.SccStatusChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProject.uex" path="docs/doc[@for=&quot;FlavoredProject.SccStatusChanged&quot;]/*" />
            <devdoc>
            Called after the source code control status of a file in this project changed.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GetTrackProjectDocuments">
            <devdoc>
            Used to subscribe/unsubscribe to those events
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.GenerateEvents(Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.EventHandler{Microsoft.VisualStudio.Shell.Flavor.ProjectDocumentsChangeEventArgs},Microsoft.VisualStudio.Shell.Flavor.ProjectDocumentsChangeEventArgs)">
            <devdoc>
            Look at the list of projects and files and for each file that is part of this
            project, set the MkDocument on the event argument and trigger the event.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Flavor.ProjectDocumentsChangeEventArgs">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProjectDocumentsChangeEventArgs.uex" path="docs/doc[@for=&quot;ProjectDocumentsChangeEventArgs&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Flavor.ProjectDocumentsChangeEventArgs.MkDocument">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProjectDocumentsChangeEventArgs.uex" path="docs/doc[@for=&quot;ProjectDocumentsChangeEventArgs.MkDocument&quot;]/*" />
            <devdoc>
            Unique name of the Project item that was changed.
            Use IVsProject.IsDocumentInProject() to map to an itemid.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactory.uex" path="docs/doc[@for=&quot;FlavoredProjectFactory&quot;]/*" />
            <devdoc>
            The project factory for the project flavor.
            Note that this is also known as Project Subtype
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.serviceProvider">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactory.uex" path="docs/doc[@for=&quot;FlavoredProjectFactory.ServiceProvider&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactory.uex" path="docs/doc[@for=&quot;FlavoredProjectFactory.FlavoredProjectFactory&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.CanCreateProject(System.String,System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactory.uex" path="docs/doc[@for=&quot;FlavoredProjectFactory.CanCreateProject&quot;]/*" />
            <devdoc>
            This is called to ask the factory if it can create a project based on the current parameters
            </devdoc>
            <returns>True if the project can be created</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Microsoft#VisualStudio#Shell#Interop#IVsProjectFactory#CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
            <devdoc>
            This is not expected to be called unless using an extension other then the base project
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactory.uex" path="docs/doc[@for=&quot;FlavoredProjectFactory.CreateProject&quot;]/*" />
            <devdoc>
            If you want to use your own extension, you will need to call IVsCreateAggregatedProject.CreateAggregatedProject()
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Dispose(System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactory.uex" path="docs/doc[@for=&quot;FlavoredProjectFactory.Dispose&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Initialize">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactory.uex" path="docs/doc[@for=&quot;FlavoredProjectFactory.Initialize&quot;]/*" />
            <devdoc>
            Called by SetSite after setting our service provider
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.PreCreateForOuter(System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactory.uex" path="docs/doc[@for=&quot;FlavoredProjectFactory.PreCreateForOuter&quot;]/*" />
            <devdoc>
            This function returns an instance of the project. This is just creating the object,
            VS will later call SetInner and InitializeForOuter to initialize it.
            </devdoc>
            <param name="outerProject" />
            <returns>The project subtype</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.ProjectTypeGuids(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\FlavoredProjectFactory.uex" path="docs/doc[@for=&quot;FlavoredProjectFactory.ProjectTypeGuids&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.HelperMethods">
            <summary>
            Static helper class that contains common routines.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.HelperMethods.CheckNullArgument(System.Object,System.String)">
            <summary>
            Checks if the argument passed is null. If so, it throws ArgumentNullException.
            </summary>        
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.HelperMethods.CheckNullOrEmptyString(System.String,System.String)">
            <summary>
            Checks if the string argument is null or empty. If it is null, it throws ArgumentNullException
            and if it is empty, it throws ArgumentException.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.HierarchyManipulationStateScope">
            <summary>
            Simple class to facilitate deterministic restoration of an IVsHierarchyManipulationStateContext.
            </summary>
            <example>
                // Set up a context where changes to the hierarchy are considered "system" changes and not "user" changes.
                using (new HierarchyManipulationStateScope (__VSHIERARCHYMANIPULATIONSTATE.HMS_System))
                {
                    // Manipulate the hierarchy
                }
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.HierarchyManipulationStateScope.#ctor(System.UInt32)">
            <summary>
            Creates a new HierarchyManipulationStateScope.
            </summary>
            <param name="hierarchyManipulationState">The hierarchy manipulation state, typically specified with __VSHIERARCHYMANIPULATIONSTATE flags.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.HierarchyTreeFilterProvider">
            <summary>
            Base class which implements some of the boilerplate parts of an ISolutionTreeFilterProvider.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.HierarchyTreeFilterProvider.HierarchyTreeFilter">
            <summary>
            Base class which implements some of the boilerplate parts of an ISolutionTreeFilter.
            This includes behavior to ensure newly added hierarchy items are always visible
            through the filtered view, even if those items do not match the filter.
            Derived types must still implement the logic for constructing the set of
            included items.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.HierarchyTreeFilterProvider.HierarchyTreeFilter.#ctor">
            <summary>
            Initializes a new instance of the HierarchyTreeFilter class.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.HierarchyTreeFilterProvider.HierarchyTreeFilter.Initialized">
            <summary>
            Occurs when initialization of the component is completed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.HierarchyTreeFilterProvider.HierarchyTreeFilter.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.HierarchyTreeFilterProvider.HierarchyTreeFilter.IncludedItems">
            <summary>
            Gets the set of items that are included by the filter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.HierarchyTreeFilterProvider.HierarchyTreeFilter.IsInitialized">
            <summary>
            Gets a value indicating whether the component is initialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.HierarchyTreeFilterProvider.HierarchyTreeFilter.CancellationToken">
            <summary>
            Gets a CancellationToken that will be cancelled when this filter is disposed.
            </summary>
            <remarks>
            You should use this CancellationToken for asynchronous operations performed by your filter.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.HierarchyTreeFilterProvider.HierarchyTreeFilter.GetFilterDescendantsBehavior(System.Object)">
            <summary>
            Decide whether to include descendents if none are exlicitly specified.
            </summary>
            <remarks>
            Default implementation includes for non-hierarchy items.  For hierarchies, it excludes for folder and project nodes and includes for typical member files
            </remarks>
            <param name="item">The item to decide for</param>
            <returns>Whether to exclude or include by default</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.HierarchyTreeFilterProvider.HierarchyTreeFilter.DisposeManagedResources">
            <summary>
            Allows derived classes to provide custom dispose handling for managed resources
            </summary>
            <remarks>
            Derived classes are expected to override this method to dispose their managed resources, then call the base class.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.HierarchyTreeFilterProvider.HierarchyTreeFilter.GetIncludedItemsAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Shell.IVsHierarchyItem})">
            <summary>
            Asynchronously initializes and returns the set of items that are included by the filter.
            </summary>
            <remarks>
            Use CancellationToken to respond to a cancellation request resulting from the
            filter being disabled.
            </remarks>
            <param name="rootItems">The current collection of root hierarchy items in the tree.</param>
            <returns>A task that represents the asynchronous included items initialization.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.HierarchyTreeFilterProvider.CreateFilter(System.Collections.IEnumerable)">
            <summary>
            Creates a new filter for the given collection of root items.
            </summary>
            <param name="rootItems">The current collection of root items in the tree.</param>
            <returns>An ISolutionTreeFilter instance that can be applied to the tree to control
            which items are included in the tree's filtered subset.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.HierarchyTreeFilterProvider.CreateFilter">
            <summary>
            Creates a new filter for the given collection of root hierarchy items.
            </summary>
            <returns>A HierarchyTreeFilter instance that can be applied to the tree to control
            which items are included in the tree's filtered subset.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.HierarchyTreeFilterProvider.IsFilteringSupported(System.Collections.IEnumerable)">
            <summary>
            Determines whether or not this type of filter is supported when the given collection of items
            are at the root of the tree.
            </summary>
            <param name="rootItems">The current collection of root items in the tree.</param>
            <returns>True if the filter is supported, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IConfigureToolboxItem">
            <!-- Failed to insert some or all of included XML --><include file="doc\IConfigureToolboxItem.uex" path="docs/doc[@for=&quot;IConfigureToolboxItem&quot;]" />
            <devdoc>
               This interface can be implemented on a creatable object.  The toolbox service will call
               ConfigureToolboxItem on this interface when a new toolbox item is first added to the
               toolbox.  This gives an external party a chance to add additional data to the toolbox item's
               Properties dictionary.  This data then gets serialized as a permanent part of the toolbox item.
            
               Objects that implement this interface should be declared through a 
               ProvideToolboxItemConfigurationAttribute attached to the package.  This attribute will register 
               the object under the local CLSID hive in the VS registry and also add a reference to the GUID in
               VSREGROOT\ToolboxItemConfiguration.  The data contained in this registry entry
               is as follows:
            
               VSREGROOT\ToolboxItemConfiguration
                   AssemblyName
                        ConfigurationTypeName={guid}
            
               As an example:
            
               VSREGROOT\ToolboxItemConfiguration
                   System, Version=2.0.3500
                       CompactFrameworkProvider = {GUID}
            
            
               The assembly name is parsed and the various keys are matched.  Keys can have a
               "*" in them to be taken as wildcards.  So, for example, to cover all versions
               of System.WindowsForms you would specify:
            
               System.Windows.Forms, Version=*, PublicKeyToken=969...
            
               The assembly name may also be a wildcard to load the configuration object
               for all toolbox items (not recommended).
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IConfigureToolboxItem.ConfigureToolboxItem(System.Drawing.Design.ToolboxItem)">
            <!-- Failed to insert some or all of included XML --><include file="doc\IConfigureToolboxItem.uex" path="docs/doc[@for=&quot;IConfigureToolboxItem.ConfigureToolboxItem&quot;]" />
            <devdoc>
                Adds extra configuration information to thish toolbox item.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.InfoBarActionItem">
            <summary>
            Represents a button or hyperlink inside an InfoBarModel's text spans or action items.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.InfoBarActionItem.#ctor(System.String,System.Object)">
            <summary>
            Creates a new action item with optional formatting options.
            </summary>
            <param name="text">The text for the span.</param>
            <param name="actionContext">An optional tag which identifies this action item.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InfoBarActionItem.IsButton">
            <summary>
            Gets whether or not this action item should be rendered as a button.  Action items
            can only be rendered as a button when placed in the ActionItems collection of the InfoBarModel.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InfoBarActionItem.ActionContext">
            <summary>
            Gets the context associated with this action item, used to identify the action when it's invoked.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.InfoBarActionItemEventArgs">
            <summary>
            Event arguments about an action on an IVsInfoBarUIElement.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InfoBarActionItemEventArgs.ActionItem">
            <summary>
            Gets the action item the event refers to.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.InfoBarButton">
            <summary>
            Represents a button inside an InfoBarModel's ActionItems collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.InfoBarButton.#ctor(System.String,System.Object)">
            <summary>
            Creates a new button with optional formatting options.
            </summary>
            <param name="text">The text for the span.</param>
            <param name="actionContext">An optional tag which identifies this action item.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.InfoBarEventArgs">
            <summary>
            Event arguments about an IVsInfoBarUIElement.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InfoBarEventArgs.InfoBarUIElement">
            <summary>
            Gets the UIElement associated with the event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InfoBarEventArgs.InfoBarModel">
            <summary>
            Gets the info bar model associated with the event.  This may be null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.InfoBarHyperlink">
            <summary>
            Represents a hyperlink inside an InfoBarModel's ActionItems collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.InfoBarHyperlink.#ctor(System.String,System.Object)">
            <summary>
            Creates a new hyperlink with optional formatting options.
            </summary>
            <param name="text">The text for the span.</param>
            <param name="actionContext">An optional tag which identifies this action item.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.InfoBarModel">
            <summary>
            Creates a data model implementing IVsInfoBar, for use with IVsInfoBarUIFactory.CreateInfoBar.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.InfoBarModel.#ctor(System.String,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.Boolean)">
            <summary>
            Constructs an info bar with a simple message.
            </summary>
            <param name="text">The message to display.</param>
            <param name="image">The image to display next to the message.</param>
            <param name="isCloseButtonVisible">True if the info bar can be closed by the user, otherwise false.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.InfoBarModel.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Shell.Interop.IVsInfoBarTextSpan},Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.Boolean)">
            <summary>
            Constructs an info bar with a message involving formatted text.
            </summary>
            <param name="textSpans">The message to display.</param>
            <param name="image">The image to display next to the message.</param>
            <param name="isCloseButtonVisible">True if the info bar can be closed by the user, otherwise false.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.InfoBarModel.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Shell.Interop.IVsInfoBarActionItem},Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.Boolean)">
            <summary>
            Constructs an info bar with a simple message and a separate panel of action buttons or links.
            </summary>
            <param name="text">The message to display.</param>
            <param name="actionItems">The buttons or links to display on the panel, separate from the message.</param>
            <param name="image">The image to display next to the message.</param>
            <param name="isCloseButtonVisible">True if the info bar can be closed by the user, otherwise false.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.InfoBarModel.#ctor(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Shell.Interop.IVsInfoBarTextSpan},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Shell.Interop.IVsInfoBarActionItem},Microsoft.VisualStudio.Imaging.Interop.ImageMoniker,System.Boolean)">
            <summary>
            Constructs an info bar with a message involving formatted text and a separate panel of action buttons or links.
            </summary>
            <param name="textSpans">The message to display.</param>
            <param name="actionItems">The buttons or links to display on the panel, separate from the message.</param>
            <param name="image">The image to display next to the message.</param>
            <param name="isCloseButtonVisible">True if the info bar can be closed by the user, otherwise false.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InfoBarModel.ActionItems">
            <summary>
            Gets the collection of buttons or links to display.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InfoBarModel.IsCloseButtonVisible">
            <summary>
            Gets whether or not the info bar can be closed by the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InfoBarModel.TextSpans">
            <summary>
            Gets the message to display in the info bar.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InfoBarModel.Image">
            <summary>
            Gets the moniker for the image to display in the info bar.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.InfoBarTextSpan">
            <summary>
            Represents a span of text inside an InfoBarModel.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.InfoBarTextSpan.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new text span with optional formatting options.
            </summary>
            <param name="text">The text for the span.</param>
            <param name="bold">Whether or not the span should be bolded.</param>
            <param name="italic">Whether or not the span should be italicized.</param>
            <param name="underline">Whether or not the span should be underlined.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InfoBarTextSpan.Bold">
            <summary>
            Gets whether or not the span of text should be bolded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InfoBarTextSpan.Italic">
            <summary>
            Gets whether or not the span of text should be italicized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InfoBarTextSpan.Text">
            <summary>
            Gets the text for the span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InfoBarTextSpan.Underline">
            <summary>
            Gets whether or not the span of text should be underlined.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntity">
            <summary>
            Represents an entry on the file system used for building the file enumeration service's cache.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntity.FileEntity">
            <summary>
            Gets the entry that is returned by the file enumeration services.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntity.FileName">
            <summary>
            Gets the file name of the <see cref="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntity.FileEntity" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntity.Type">
            <summary>
            Gets some special information about this entry related to Solution Explorer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntity.ProjectId">
            <summary>
            Gets the ID of the project this entity is part of. <see cref="F:System.Guid.Empty" /> is used if it isn't related to any project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntity.#ctor(Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntity,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntityProjectSpecificInfoType,System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntity" /> class.
            </summary>
            <param name="fileEntity">The entry that is returned by the file enumeration services.</param>
            <param name="type">Some special information about this entry related to Solution Explorer.</param>
            <param name="projectId">The ID of the project this entity is part of. <see cref="F:System.Guid.Empty" /> is used if it isn't related to any project.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntity.#ctor(Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntityKind,System.String,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntityProjectSpecificInfoType,System.Guid,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFilePathCaseResolver)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntity" /> class.
            </summary>
            <param name="fullPath">Defines the full path to the file or folder.</param>
            <param name="kind">(optional) Defines what kind of entry it is.</param>
            <param name="hasCaseBeenResolved">(optional) Defines whether the values of this object are case sensitive.</param>
            <param name="type">Some special information about this entry related to Solution Explorer.</param>
            <param name="projectId">The ID of the project this entity is part of. <see cref="F:System.Guid.Empty" /> is used if it isn't related to any project.</param>
            <param name="filePathCaseResolver">(optional) Defines an object designed to resolve the case sensitiveness of this entry. This argument isn't kept if <paramref name="hasCaseBeenResolved" /> is <c>False</c>.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntityProjectSpecificInfoType">
            <summary>
            Describes some special cases for solution items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntityProjectSpecificInfoType.None">
            <summary>
            The item appears normally in Solution Explorer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntityProjectSpecificInfoType.IsHidden">
            <summary>
            The item is hidden, meaning that in the scenario of an opened solution, the item are listen in the sln or csproj, but do not appear in the Solution Explorer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntityProjectSpecificInfoType.IsExternal">
            <summary>
            The item is external, meaning that in the scenario of an opened solution, the item comes from outside of the solution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntityProjectSpecificInfoType.IsMiscellaneous">
            <summary>
            The item is a miscellaneous file, in a solution.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheInvalidationEventArgs">
            <summary>
            Represents the event data for when the file enumeration service's cache is being invalidated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheInvalidationEventArgs.CacheUpdateStrategy">
            <summary>
            Gets the kind of update that should be applied to the cache.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheInvalidationEventArgs.TargetState">
            <summary>
            Gets whether the solution or open folder cache should be updated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheInvalidationEventArgs.DelayCacheFilling">
            <summary>
            Indicates whether the cache update should be delayed.
            </summary>
            <remarks>
            <para>
            This information is useful when we know that multiple updates are about to happen within
            a very short amount of time or when bulking updates. By enabling this option, when triggering multiple
            updates within a few milliseconds, the file enumeration service will enumerate file items only once.
            </para>
            <para>
            This option can only be enabled when <see cref="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheInvalidationEventArgs.CacheUpdateStrategy" /> is <see cref="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheUpdateStrategy.Incremental" />.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheInvalidationEventArgs.Tag1">
            <summary>
            An object that will be passed to <see cref="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource.TryGetSingleCacheFileEntityAsync(System.Object,System.Threading.CancellationToken)" />
            if needed.
            </summary>
            <remarks>
            <para>
            This parameter is only useful when <see cref="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheInvalidationEventArgs.CacheUpdateStrategy" /> is <see cref="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheUpdateStrategy.AddSingleItem" />,
            <see cref="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheUpdateStrategy.RemoveSingleItem" /> or <see cref="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheUpdateStrategy.RenameSingleItem" />.
            </para>
            <para>
            When <see cref="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheInvalidationEventArgs.CacheUpdateStrategy" /> is <see cref="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheUpdateStrategy.RenameSingleItem" />, this value is often used to represents the file entity
            <c>before</c> it got renamed.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheInvalidationEventArgs.Tag2">
            <summary>
            An object that will be passed to <see cref="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource.TryGetSingleCacheFileEntityAsync(System.Object,System.Threading.CancellationToken)" />
            if needed.
            </summary>
            <remarks>
            <para>
            This parameter is only useful when <see cref="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheInvalidationEventArgs.CacheUpdateStrategy" /> is <see cref="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheUpdateStrategy.RenameSingleItem" />.
            </para>
            <para>
            This value is often used to represents the file entity <c>after</c> it got renamed.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheInvalidationEventArgs.#ctor(Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheUpdateStrategy,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.VsState,System.Boolean,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheInvalidationEventArgs" /> class.
            </summary>
            <param name="cacheUpdateStrategy">The kind of update that should be applied to the cache.</param>
            <param name="targetState">Whether the solution or open folder cache should be updated.</param>
            <param name="delayCacheFilling">Indicates whether the cache update should be delayed.</param>
            <param name="tag1">An object that will be passed to <see cref="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource.TryGetSingleCacheFileEntityAsync(System.Object,System.Threading.CancellationToken)" /> if needed.</param>
            <param name="tag2">An object that will be passed to <see cref="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource.TryGetSingleCacheFileEntityAsync(System.Object,System.Threading.CancellationToken)" /> if needed.</param>
            <exception cref="T:System.ArgumentException">Raised if there is some incoherence in the parameters</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheUpdateStrategy">
            <summary>
            Indicates how the cache must be updated.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheUpdateStrategy.Incremental">
            <summary>
            Update the cache by adding/removing the delta that changed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheUpdateStrategy.AddSingleItem">
            <summary>
            Update the cache by adding a single item.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheUpdateStrategy.RemoveSingleItem">
            <summary>
            Update the cache by removing a single item.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheUpdateStrategy.RenameSingleItem">
            <summary>
            Update the cache by removing the old item and add a new one with a different full path.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheUpdateStrategy.Clear">
            <summary>
            Clear the cache.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntity">
            <summary>
            Represents an entry on the file system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntity.Kind">
            <summary>
            Gets what kind of entry it is.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntity.FullPath">
            <summary>
            Gets the full path to the file or folder.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntity.HasCaseBeenResolved">
            <summary>
            Gets a value that indicates whether the values of this object are case sensitive.
            </summary>
            <remarks>When possible, this value will be set to <c>True</c> by default. However, a known case when it's <c>False</c> is when
            the path comes from an opened solution and that the entire string is either in upper case or in lower case.
            If so, we may want to resolve the case by doing a IO access. Therefore, this property is here to try to limitate the amount of required IO access.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntity.#ctor(System.String,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntityKind,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFilePathCaseResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntity" /> struct.
            </summary>
            <param name="fullPath">Defines the full path to the file or folder.</param>
            <param name="kind">(optional) Defines what kind of entry it is.</param>
            <param name="hasCaseBeenResolved">(optional) Defines whether the values of this object are case sensitive.</param>
            <param name="filePathCaseResolver">(optional) Defines an object designed to resolve the case sensitiveness of this entry. This argument isn't kept if <paramref name="hasCaseBeenResolved" /> is <c>False</c>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntity.ResolveCase">
            <summary>
            Resolves the case sensitiveness of the <see cref="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntity.FullPath" /> property if <see cref="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntity.HasCaseBeenResolved" /> is <c>True</c>.
            </summary>
            <remarks>This method may require an IO access. Call it with precaution.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntityAsyncQueue.AreResultsAccurate">
            <summary>
            Gets a task returning a boolean indicating whether the content of the queue is accurate or not.
            </summary>
            <remarks>
            The task is completed some time before the first item is added to the queue.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntityKind">
            <summary>
            Represents the type of <see cref="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntity" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntityKind.File">
            <summary>
            Defines that the entry is a file on the file system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntityKind.Folder">
            <summary>
            Defines that the entry is a folder on the file system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntityList.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntityList.Count">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntityList.AreResultsAccurate">
            <summary>
            Gets whether the list is accurate or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntityList.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntityList.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ICacheInvalidator">
            <summary>
            Exposes an event designed to tell when the cache must be updated and how.
            </summary>
            <example>
            [<see cref="T:System.ComponentModel.Composition.ExportAttribute" />(typeof(<see cref="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ICacheInvalidator" />))]
            [<see cref="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.VsStateTargetAttribute" />(<see cref="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.VsState.OpenedFolder" />)] // required
            </example>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ICacheInvalidator.InvalidateCache">
            <summary>
            When raised, it informs the cache that its content is invalid, and starts to update it with the given strategy.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ICacheInvalidator.InvalidateCacheIfRequiredAsync(System.Threading.CancellationToken)">
            <summary>
            Checks on demand whether the cache must be invalidated or not, and invalidate it if required.
            </summary>
            <returns>Return <c>True</c> if the cache has been invalidated.
            When doing so, it implicitly expect that this method raised <see cref="E:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ICacheInvalidator.InvalidateCache" /> event at least once.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator">
            <summary>
            Provides a method to enumerate the next entry discovered by the service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.Current">
            <summary>
            Gets the current element of the enumeration.
            The returned value is undefined before the first call to <see cref="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)" /> and following a call to MoveNext that returned false.
            Multiple calls to <see cref="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.Current" /> with no intervening calls to <see cref="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)" /> will return the same object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.IsValid">
            <summary>
            Gets whether the enumerator is still valid or needs to be <see cref="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.Reset" />.
            When it's invalid, it means that the enumerator items changed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.Invalidated">
            <summary>
            Occurs when the enumerator items changed and that the enumerator needs to be <see cref="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.Reset" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the next file or folder in the enumeration. This method can be called from any thread but only one thread can call it at any one time.
            </summary>
            <remarks>
            Returns <c>False</c> when <see cref="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.IsValid" /> is <c>False</c>.
            </remarks>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>A task that represents the asynchronous operation. Returns <c>null</c> if there is no entity to fetch.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.Reset">
            <summary>
            Restart the enumeration from the beginning with an up to date list of items to enumerate.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.IsInEnumerationAsync(Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntity,System.Threading.CancellationToken)">
            <summary>
            Gets a value that indicates whether the given <paramref name="entity" /> exists in the current enumeration.
            </summary>
            <remarks>
            This method returns <c>True</c> even if the given item has already been returned by <see cref="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)" />
            and won't be return again until <see cref="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.Reset" /> is called.
            It will return <c>False</c> when <see cref="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator.IsValid" /> is <c>False</c>.
            </remarks>
            <param name="entity">The entry to verify.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator2">
            <summary>
            Provides a method to enumerate the next entry discovered by the service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator2.IsAccurate">
            <summary>
            Gets whether the enumerator provides an accurate list of file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource">
            <summary>
            Exposes a set of methods designed to provide files for the File Enumeration Service's cache.
            </summary>
            <example>
            [<see cref="T:System.ComponentModel.Composition.ExportAttribute" />(typeof(<see cref="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource" />))]
            [<see cref="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.VsStateTargetAttribute" />(<see cref="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.VsState.OpenedFolder" />)] // required
            </example>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource.IsDone">
            <summary>
            Gets whether there are more files to get through <see cref="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource.GetNextChunkOfEntitiesAsync(System.Threading.CancellationToken)" /> or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource.GetNextChunkOfEntitiesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the next chunk of file system entry that the provider discovers, if possible.
            </summary>
            <remarks>
            When there are no more files to enumerate, <see cref="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource.IsDone" /> should be set to <code>True</code>.
            </remarks>
            <param name="cancellationToken">Cancellation token to cancel the task.</param>
            <returns>Returns <c>null</c> when there no items have been retrieved</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource.Reset">
            <summary>
            Reset the provider, so <see cref="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource.GetNextChunkOfEntitiesAsync(System.Threading.CancellationToken)" /> restart to provide files from scratch.
            Generally, this action set <see cref="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource.IsDone" /> to false, but it isn't mandatory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource.TryGetSingleCacheFileEntityAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Tries to generate a <see cref="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntity" /> from a given raw value.
            </summary>
            <param name="rawValue">The raw value, generally coming from <see cref="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheInvalidationEventArgs.Tag1" />
            or <see cref="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheInvalidationEventArgs.Tag2" />. Note that the value may have be coming
            from a <see cref="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ICacheInvalidator" /> that you do not own, meaning that the value can be of a type you do not expect.</param>
            <param name="cancellationToken">Cancellation token to cancel the task.</param>
            <returns>Returns a null value if nothing could be created.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource.GetAdditionalNonCachedFileEntitiesAsync(System.Guid,System.Boolean,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Threading.CancellationToken)">
            <summary>
            Enumerates additional items that are not meant to be cached.
            </summary>
            <returns>Returns a sorted list of <see cref="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.CacheFileEntity" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFilePathCaseResolver">
            <summary>
            Provides a method designed to solve the case sensitiveness of a given path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFilePathCaseResolver.TryResolve(System.String,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntityKind,System.String@)">
            <summary>
            Try to resolve the case of a given path.
            </summary>
            <param name="fullPath">The case insensitive full path to solve.</param>
            <param name="kind">Defines what kind of entry on the hard drive map this path (file? folder?).</param>
            <param name="resolvedFullPath">If succeed, provides the case sensitive full path.</param>
            <returns>Returnes <c>True</c> if it detected the case sensitive path successfully.</returns>
            <remarks>When this method is called, it is not guarantee that the entry exists on the hard drive.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IOpenDocumentEnumeratorFactory">
            <summary>
            Provides a set of methods to enumerate opened documents in the IDE.
            </summary>
            <example>
            <code>
            [Import]
            public IOpenDocumentEnumeratorFactory myFactory;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IOpenDocumentEnumeratorFactory.GetListAsync(Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Threading.CancellationToken)">
            <summary>
            Get all open documents.
            </summary>
            <remarks>The current document, if there is one and it is eligible, will always be first.</remarks>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IOpenDocumentEnumeratorFactory.GetQueue(Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Threading.CancellationToken)">
            <summary>
            Get all open documents.
            </summary>
            <remarks>The current document, if there is one and it is eligible, will always be first.</remarks>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>Returns a thread-safe queue of file entries that will be asynchronously loaded and completed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IOpenDocumentEnumeratorFactory.GetEnumerator(Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter)">
            <summary>
            Get an enumerator for all open documents.
            </summary>
            <remarks>The current document, if there is one and it is eligible, will always be first.</remarks>
            <param name="filter">(optional) Additional filter to apply.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IOpenDocumentEnumeratorFactory.GetEnumeratorFavoringOpenDocuments(Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator)">
            <summary>
            Get an enumerator for all open documents.
            </summary>
            <remarks>
            <para>This enumerates everything in <paramref name="fileEntityEnumerator" /> but return all the open documents first, when they are part of the given <paramref name="fileEntityEnumerator" />.</para>
            <para>The current document, if there is one and it is eligible, will always be first.</para>
            </remarks>
            <param name="fileEntityEnumerator">Defines an enumerator where opened document must be merged to.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IOpenDocumentEnumeratorFactory2">
            <summary>
            Provides a set of methods to enumerate opened documents in the IDE.
            </summary>
            <example>
            <code>
            [Import]
            public IOpenDocumentEnumeratorFactory2 myFactory;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IOpenDocumentEnumeratorFactory2.GetListAsync(Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Action{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Get all open documents.
            </summary>
            <remarks>The current document, if there is one and it is eligible, will always be first.</remarks>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="telemetryCallBack">(optional) An optional method called when the result is completed. Its arguments provide health and performance telemetry.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IOpenDocumentEnumeratorFactory2.GetQueue(Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Action{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Get all open documents.
            </summary>
            <remarks>The current document, if there is one and it is eligible, will always be first.</remarks>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="telemetryCallBack">(optional) An optional method called when the result is completed. Its arguments provide health and performance telemetry.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>Returns a thread-safe queue of file entries that will be asynchronously loaded and completed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IOpenDocumentEnumeratorFactory2.GetEnumerator(Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Action{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Get an enumerator for all open documents.
            </summary>
            <remarks>The current document, if there is one and it is eligible, will always be first.</remarks>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="telemetryCallBack">(optional) An optional method called when the result is completed. Its arguments provide health and performance telemetry.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IOpenDocumentEnumeratorFactory2.GetEnumeratorFavoringOpenDocuments(Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator,System.Action{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Get an enumerator for all open documents.
            </summary>
            <remarks>
            <para>This enumerates everything in <paramref name="fileEntityEnumerator" /> but return all the open documents first, when they are part of the given <paramref name="fileEntityEnumerator" />.</para>
            <para>The current document, if there is one and it is eligible, will always be first.</para>
            </remarks>
            <param name="fileEntityEnumerator">Defines an enumerator where opened document must be merged to.</param>
            <param name="telemetryCallBack">(optional) An optional method called when the result is completed. Its arguments provide health and performance telemetry.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IPathFileEnumeratorFactory">
            <summary>
            Provides a set of methods to enumerate files in a defined set of folders.
            </summary>
            <example>
            <code>
            [Import]
            public IPathFileEnumeratorFactory myFactory;
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IPathFileEnumeratorFactory.GetQueue(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Threading.CancellationToken)" -->
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IPathFileEnumeratorFactory.GetEnumerator(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter)">
            <summary>
            Get an enumerator for all files in defined location(s).
            </summary>
            <remarks>
            This enumerator never gets invalidated.
            </remarks>
            <param name="paths">Defines a list of absolute folder path where the files must be retrieved.</param>
            <param name="includeSubfolders">(optional) Defines whether the subfolders must be included or not. By default, this value is <c>True</c>.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IPathFileEnumeratorFactory2">
            <summary>
            Provides a set of methods to enumerate files in a defined set of folders.
            </summary>
            <example>
            <code>
            [Import]
            public IPathFileEnumeratorFactory2 myFactory;
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IPathFileEnumeratorFactory2.GetQueue(System.Collections.Generic.IReadOnlyList{System.String},System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Action{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Threading.CancellationToken)" -->
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IPriorityFileEnumeratorFactory">
            <summary>
            Provides a set of methods to enumerate files by favoriting a specified list of files.
            </summary>
            <example>
            <code>
            [Import]
            public IPriorityFileEnumeratorFactory myFactory;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IPriorityFileEnumeratorFactory.GetEnumeratorFavoringPriorityFiles(Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntityAsyncEnumerator,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.FileEntity})">
            <summary>
            Get an enumerator that returns first the given ordered priority files.
            </summary>
            <remarks>
            <para>This enumerates everything in the given <paramref name="fileEntityEnumerator" /> but return all the given <paramref name="orderedPriorityFileEntities" /> first, if they exist in the enumerator.</para>
            </remarks>
            <param name="fileEntityEnumerator">Defines an enumerator where opened document must be merged to.</param>
            <param name="orderedPriorityFileEntities">Ordered list of file entity to prioritize to be enumerated first.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IProjectFileEnumeratorFactory">
            <summary>
            Provides a set of methods to enumerate files in an opened project.
            </summary>
            <example>
            <code>
            [Import]
            public IProjectFileEnumeratorFactory myFactory;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IProjectFileEnumeratorFactory.GetListAsync(System.Guid,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Threading.CancellationToken)">
            <summary>
            Get all files in a specified project.
            </summary>
            <param name="projectId">The unique ID of the project.</param>
            <param name="includeHiddenItems">Defines whether the hidden items must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IProjectFileEnumeratorFactory.GetQueue(System.Guid,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Threading.CancellationToken)">
            <summary>
            Get all files in a specified project.
            </summary>
            <param name="projectId">The unique ID of the project.</param>
            <param name="includeHiddenItems">Defines whether the hidden items must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>Returns a thread-safe queue of file entries that will be asynchronously loaded and completed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IProjectFileEnumeratorFactory.GetEnumerator(System.Guid,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter)">
            <summary>
            Get an enumerator for all files a specified project.
            </summary>
            <param name="projectId">The unique ID of the project.</param>
            <param name="includeHiddenItems">Defines whether the hidden items must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IProjectFileEnumeratorFactory2">
            <summary>
            Provides a set of methods to enumerate files in an opened project.
            </summary>
            <example>
            <code>
            [Import]
            public IProjectFileEnumeratorFactory2 myFactory;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IProjectFileEnumeratorFactory2.GetListAsync(System.Boolean,System.Guid,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Action{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Get all files in a specified project.
            </summary>
            <param name="allowInaccurateResult">Indicates whether an inaccurate result is tolerated or not. Not allowing an inaccurate result might require to wait further time in order to get the result.</param>
            <param name="projectId">The unique ID of the project.</param>
            <param name="includeHiddenItems">Defines whether the hidden items must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="telemetryCallBack">(optional) An optional method called when the result is completed. Its arguments provide health and performance telemetry.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IProjectFileEnumeratorFactory2.GetQueue(System.Boolean,System.Guid,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Action{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Get all files in a specified project.
            </summary>
            <param name="allowInaccurateResult">Indicates whether an inaccurate result is tolerated or not. Not allowing an inaccurate result might require to wait further time in order to get the result.</param>
            <param name="projectId">The unique ID of the project.</param>
            <param name="includeHiddenItems">Defines whether the hidden items must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="telemetryCallBack">(optional) An optional method called when the result is completed. Its arguments provide health and performance telemetry.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>Returns a thread-safe queue of file entries that will be asynchronously loaded and completed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IProjectFileEnumeratorFactory2.GetEnumerator(System.Boolean,System.Guid,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Action{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Get an enumerator for all files a specified project.
            </summary>
            <param name="allowInaccurateResult">Indicates whether an inaccurate result is tolerated or not. Not allowing an inaccurate result might require to wait further time in order to get the result.</param>
            <param name="projectId">The unique ID of the project.</param>
            <param name="includeHiddenItems">Defines whether the hidden items must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="telemetryCallBack">(optional) An optional method called when the result is completed. Its arguments provide health and performance telemetry.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ISolutionFileEnumeratorFactory">
            <summary>
            Provides a set of methods to enumerate files in an opened solution or opened folder.
            </summary>
            <example>
            <code>
            [Import]
            public ISolutionFileEnumeratorFactory myFactory;
            </code>
            </example>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ISolutionFileEnumeratorFactory.IsSolutionOpenedChanged">
            <summary>
            Occurs when a solution or folder are opened or closed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ISolutionFileEnumeratorFactory.IsSolutionOpened">
            <summary>
            Gets whether a solution or folder are opened in Visual Studio.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ISolutionFileEnumeratorFactory.FindMatchingFileNamesAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets a list of all files with file names matching the given query.
            </summary>
            <remarks>
            As opposed to using methods with <see cref="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter" /> parameters,
            this method performs a non-linear, binary search, looking just at file
            names.
            </remarks>
            <param name="query">The search query to match.</param>
            <param name="includeMiscellaneousProject">Defines whether the miscellaneous project must be included.</param>
            <param name="includeHiddenItems">Defines whether the hidden items must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="includePrefixMatches">Indicates that search should include non-exact matches.</param>
            <param name="waitForValidCache">
            Indicates that search should wait for a valid cache instead of using what is already cached.
            </param>
            <param name="cancellationToken">Cancels the pending search.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ISolutionFileEnumeratorFactory.GetListAsync(System.Boolean,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Threading.CancellationToken)">
            <summary>
            Get all files in the solution or opened folder.
            </summary>
            <param name="includeMiscellaneousProject">Defines whether the miscellaneous project must be included.</param>
            <param name="includeHiddenItems">Defines whether the hidden items must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ISolutionFileEnumeratorFactory.GetQueue(System.Boolean,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Threading.CancellationToken)">
            <summary>
            Get all files in the solution or opened folder.
            </summary>
            <param name="includeMiscellaneousProject">Defines whether the miscellaneous project must be included.</param>
            <param name="includeHiddenItems">Defines whether the hidden items must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>Returns a thread-safe queue of file entries that will be asynchronously loaded and completed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ISolutionFileEnumeratorFactory.GetEnumerator(System.Boolean,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter)">
            <summary>
            Get all files in the solution or opened folder.
            </summary>
            <param name="includeMiscellaneousProject">Defines whether the miscellaneous project must be included.</param>
            <param name="includeHiddenItems">Defines whether the hidden items must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ISolutionFileEnumeratorFactory2">
            <summary>
            Provides a set of methods to enumerate files in an opened solution or opened folder.
            </summary>
            <example>
            <code>
            [Import]
            public ISolutionFileEnumeratorFactory2 myFactory;
            </code>
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ISolutionFileEnumeratorFactory2.GetListAsync(System.Boolean,System.Boolean,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Action{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Get all files in the solution or opened folder.
            </summary>
            <param name="allowInaccurateResult">Indicates whether an inaccurate result is tolerated or not. Not allowing an inaccurate result might require to wait further time in order to get the result.</param>
            <param name="includeMiscellaneousProject">Defines whether the miscellaneous project must be included.</param>
            <param name="includeHiddenItems">Defines whether the hidden items must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="telemetryCallBack">(optional) An optional method called when the result is completed. Its arguments provide health and performance telemetry.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ISolutionFileEnumeratorFactory2.GetQueue(System.Boolean,System.Boolean,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Action{System.Collections.Generic.Dictionary{System.String,System.Object}},System.Threading.CancellationToken)">
            <summary>
            Get all files in the solution or opened folder.
            </summary>
            <param name="allowInaccurateResult">Indicates whether an inaccurate result is tolerated or not. Not allowing an inaccurate result might require to wait further time in order to get the result.</param>
            <param name="includeMiscellaneousProject">Defines whether the miscellaneous project must be included.</param>
            <param name="includeHiddenItems">Defines whether the hidden items must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="telemetryCallBack">(optional) An optional method called when the result is completed. Its arguments provide health and performance telemetry.</param>
            <param name="cancellationToken">(optional) Cancellation token to cancel the task.</param>
            <returns>Returns a thread-safe queue of file entries that will be asynchronously loaded and completed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.ISolutionFileEnumeratorFactory2.GetEnumerator(System.Boolean,System.Boolean,System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter,System.Action{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            Get all files in the solution or opened folder.
            </summary>
            <param name="allowInaccurateResult">Indicates whether an inaccurate result is tolerated or not. Not allowing an inaccurate result might require to wait further time in order to get the result.</param>
            <param name="includeMiscellaneousProject">Defines whether the miscellaneous project must be included.</param>
            <param name="includeHiddenItems">Defines whether the hidden items must be included.</param>
            <param name="includeExternalItems">Defines whether the external items must be included.</param>
            <param name="filter">(optional) Additional filter to apply.</param>
            <param name="telemetryCallBack">(optional) An optional method called when the result is completed. Its arguments provide health and performance telemetry.</param>
            <returns>Returns an enumerator to get the next discovered file asynchronously.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.PathFilter">
            <summary>
            Determines whether the given full path is eligible to be considered as part of the result of the file enumeration service.
            </summary>
            <param name="fullPath">Defines the full path to the file or folder.</param>
            <param name="isDirectory">(optional) Defines whether the current item is a directory or a file.</param>
            <returns>Returns <c>True</c> if the entry is eligible.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.VsState">
            <summary>
            Indicates a targeted Visual Studio state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.VsState.NoOpenedSolutionOrFolder">
            <summary>
            Used to target when there is no folder and no solution opened in Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.VsState.OpenedSolution">
            <summary>
            Used to target when a solution is opened in Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.VsState.OpenedFolder">
            <summary>
            Used to target when a folder is opened in Visual Studio.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.VsStateTargetAttribute">
            <summary>
            Attribute marking an <see cref="T:Microsoft.VisualStudio.Shell.Internal.FileEnumerationService.IFileEntitySource" /> as targeting a specific state of Visual Studio.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IProfileManager">
            <!-- Failed to insert some or all of included XML --><include file="doc\IProfileManager.uex" path="docs/doc[@for=&quot;IProfileManager&quot;]" />
            <devdoc>
            Interface used to provide import/export capabilities of properties
            usually stored in the registry.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IProfileManager.SaveSettingsToXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
            <!-- Failed to insert some or all of included XML --><include file="doc\IProfileManager.uex" path="docs/doc[@for=IProfileManager.SaveSettingsToXml]/*" />
            <devdoc>
            Summary of SaveSettingsToXml.
            </devdoc>
            <param name="writer" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IProfileManager.LoadSettingsFromXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader)">
            <!-- Failed to insert some or all of included XML --><include file="doc\IProfileManager.uex" path="docs/doc[@for=IProfileManager.LoadSettingsFromXml]/*" />
            <devdoc>
            Summary of LoadSettingsFromXml.
            </devdoc>
            <param name="reader" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IProfileManager.SaveSettingsToStorage">
            <!-- Failed to insert some or all of included XML --><include file="doc\IProfileManager.uex" path="docs/doc[@for=IProfileManager.SaveSettingsToStorage]/*" />
            <devdoc>
            Summary of SaveSettingsToStorage.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IProfileManager.LoadSettingsFromStorage">
            <!-- Failed to insert some or all of included XML --><include file="doc\IProfileManager.uex" path="docs/doc[@for=IProfileManager.LoadSettingsFromStorage]/*" />
            <devdoc>
            Summary of LoadSettingsFromStorage.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IProfileManager.ResetSettings">
            <!-- Failed to insert some or all of included XML --><include file="doc\IProfileManager.uex" path="docs/doc[@for=IProfileManager.ResetSettings]/*" />
            <devdoc>
            Reset your settings (__UserSettingsFlags.USF_ResetOnImport was set).
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IProfileMigrator">
            <!-- Failed to insert some or all of included XML --><include file="doc\IProfileMigrator.uex" path="docs/doc[@for=&quot;IProfileMigrator&quot;]" />
            <devdoc>
            Interface used to support custom migration of user settings from one version of the
            product to another.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IProfileMigrator.MigrateSettings(Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader,Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
            <!-- Failed to insert some or all of included XML --><include file="doc\IProfileMigrator.uex" path="docs/doc[@for=IProfileMigrator.MigrateSettings]/*" />
            <devdoc>
            Summary of MigrateSettings.
            </devdoc>
            <param name="reader" />
            <param name="writer" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.IResXResourceService">
            <!-- Failed to insert some or all of included XML --><include file="doc\IResXResourceService.uex" path="docs/doc[@for=&quot;IResXResourceService&quot;]/*" />
            <devdoc>
               <para>
                    This interface is an abstraction layer that allows various clients to control resxreaders and writers
                    that get used within Visual Studio.
               </para>
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceReader(System.String,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\IResXResourceService.uex" path="docs/doc[@for=&quot;GetResXResourceReader&quot;]/*" />
            <devdoc>
               <para>
                    Returns a resx resource reader given a basepath and name
               </para>
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceReader(System.IO.TextReader,System.Boolean,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\IResXResourceService.uex" path="docs/doc[@for=&quot;GetResXResourceReader&quot;]/*" />
            <devdoc>
               <para>
                    Returns a resx resource reader given a basepath and name
               </para>
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceWriter(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\IResXResourceService.uex" path="docs/doc[@for=&quot;GetResXResourceWriter&quot;]/*" />
            <devdoc>
               <para>
                    Returns a resx resource writer given a basepath and name
               </para>
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceWriter(System.IO.TextWriter,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\IResXResourceService.uex" path="docs/doc[@for=&quot;GetResXResourceWriter&quot;]/*" />
            <devdoc>
               <para>
                    Returns a resx resource writer given a basepath and name
               </para>
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.KnownColorThemes">
            <summary>
            Predefined, well-known Color Themes
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.KnownColorThemes.Light">
            <summary>
            The 'Light' color theme.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.KnownColorThemes.Dark">
            <summary>
            The 'Dark' color theme.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.KnownColorThemes.Blue">
            <summary>
            The 'Blue' color theme.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.KnownColorThemes.AdditionalContrast">
            <summary>
            The 'Additional contrast' color theme based off of the 'Blue' theme.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.KnownColorThemes.HighContrast">
            <summary>
            The color theme used when Windows theme is set to one of the High Contrast Windows themes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.KnownColorThemes.System">
            <summary>
            The color theme used when syncing with the Windows color themes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.KnownColorThemes.Debug">
            <summary>
            The color theme used for debugging the theme color service.  Each color name is mapped to 
            a neon color to make it easy to inspect colors usage that isn't from the theme color service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.KnownColorThemes.Default">
            <summary>
            The default color theme.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.KnownSettingsContainers.All">
            <summary>
            The "All settings" settings container
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.KnownSettingsContainers.Aliases">
            <summary>
            The "Aliases" settings container
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.KnownSettingsContainers.Startup">
            <summary>
            The "Startup" settings container
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.KnownSettingsContainers.ToolsOptions">
            <summary>
            The "Tools.Options" settings container
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.KnownSettingsContainers.SettingsBaseline">
            <summary>
            The baseline vssettings file to which the user last reset.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.KnownUIContexts">
            <summary>
            Predefined, well-known UIContexts
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.ApplicationDesignerContext">
            <summary>
            A UI context indicating that the Application Designer is active
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.BackgroundProjectLoadContext">
            <summary>
            A UI context indicating it means that a project load operation is occuring in the background, and should not present any UI prompts to the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.CloudEnvironmentConnectedContext">
            <summary>
            UI context indicating that the IDE is connected to a cloud environment
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.CodeWindowContext">
            <summary>
            UI context indicating that a code window is active
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.CSharpProjectContext">
            <summary>
            A UI context indicating that a C# project is active
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.DebuggingContext">
            <summary>
            A UI context indicating whether a solution is being debugged
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.DesignModeContext">
            <summary>
            A UI context indicating that the environment is in design mode (not debugging)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.DocumentWindowActive">
            <summary>
            A UI context indicating that a document window is active
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.DraggingContext">
            <summary>
            A UI context indicating that a drag-drop operation within the Solution Explorer is in progress
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.EmptySolutionContext">
            <summary>
            A UI context indicating that a solution is loaded, but has no projects
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.FirstLaunchSetupContext">
            <summary>
            A UI context indicating that this is the first launch after setup.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.FSharpProjectContext">
            <summary>
            A UI context indicating that an F# project is active
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.FullScreenModeContext">
            <summary>
            A UI context indicating that the environment is in full screen mode
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.MinimalModeContext">
            <summary>
            A UI context indicating that the environment is in Minimal mode
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.MainToolBarVisibleContext">
            <summary>
            A UI context indicating whether the main toolbar row is visible or not
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.HistoricalDebuggingContext">
            <summary>
            A UI context indicating that IntelliTrace (historical debugging) is active
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.CloudDebuggingContext">
            <summary>
            A UI context indicating that Cloud Debugging is active
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.NoSolutionContext">
            <summary>
            A UI context indicating that no solution is loaded
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.NotBuildingAndNotDebuggingContext">
            <summary>
            A UI context indicating that the environment is neither building nor debugging a solution
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.OsWindows8OrHigherContext">
            <summary>
            A UI context indicating that the current OS is Windows 8 or higher
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.ToolboxVisibleContext">
            <summary>
            A UI context indicating that the toolbox is visible
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.ToolWindowActive">
            <summary>
            A UI context indicating that a tool window is active
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.ProjectRetargetingContext">
            <summary>
            A UI context indicating that a project's target framework is being changed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.PropertyPageDesignerContext">
            <summary>
            A UI context indicating that the Property Page Designer is active
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.RepositoryOpen">
            <summary>
            A UI context indicating whether an active repository is currently open. This UI context will be used by an SCC provider to indicate that a repository is open.
            For example, this will be used by the Git provider to indicate that a repository is open so the shell can react accordingly
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.RESXEditorContext">
            <summary>
            A UI context indicating that the RESX designer is active
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.SettingsDesignerContext">
            <summary>
            A UI context indicating that the Settings designer is active
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.ShellInitializedContext">
            <summary>
            A UI context indicating that the shell has entered its main message loop.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.SolutionBuildingContext">
            <summary>
            A UI context indicating that a solution is being built
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.SolutionExistsAndFullyLoadedContext">
            <summary>
            A UI context indicating that a solution is fully loaded
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.SolutionExistsAndNotBuildingAndNotDebuggingContext">
            <summary>
            A UI context indicating that a solution is loaded, and the environment is neither building nor debugging it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.SolutionExistsContext">
            <summary>
            A UI context indicating that a solution is loaded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.SolutionHasAppContainerProjectsContext">
            <summary>
            A UI context indicating that a solution with at least one appcontainer project is loaded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.SolutionHasMultipleProjectsContext">
            <summary>
            A UI context indicating that a solution with more than one project is loaded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.SolutionHasSingleProjectContext">
            <summary>
            A UI context indicating that a solution with exactly one project is loaded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.SolutionOpeningContext">
            <summary>
            A UI context indicating that a solution is about to be opened. It is deactivated when modal phase is completed or error occurs during opening.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.FullSolutionLoadingContext">
            <summary>
            A UI context indicating that a solution is about to be opened. Covers both modal and async phases.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.BulkFileOperationContext">
            <summary>
            A UI context indicating that a bulk file operation is in progress. This kind of operations can touch multiple files in the solution.
            One of the example of such operation is a git branch switch. It most likely updates multiple files on disk and sometimes components better
            handle updating once for all batch at the end of the operation rather than each file separately during the process.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.SolutionOrProjectUpgradingContext">
            <summary>
            A UI context indicating that a solution or project is being upgraded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.ProjectCreatingContext">
            <summary>
            A UI context indicating that a new project is being created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.StandardPreviewerConfigurationChanging">
            <summary>
            A UI context indicating the standard previewers (browsers) configuration is changing, either browsers are added or removed or the default browser(s) changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.ToolboxInitializedContext">
            <summary>
            A UI context indicating that the toolbox has been initialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.ToolboxChooseItemsDataSourceInitializedContext">
            <summary>
            A UI context indicating that the toolbox Choose Items dialog has been initialized.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.VBProjectContext">
            <summary>
            A UI context indicating that a VB project is active
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.VCProjectContext">
            <summary>
            A UI context indicating that a Visual C++ project is active
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.IdeUserSignedInContext">
            <summary>
            A UI context indicating that the IDE User is signed in.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.WizardOpen">
            <summary>
            A UI context indicating whether a Wizard is currently open.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.XamlDesignerContext">
            <summary>
            A UI context indicating whether the XAML Designer is currently active.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.KnownUIContexts.FolderOpened">
            <summary>
            A UI context indicating whether a folder is opened.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.KnownUIContexts.GetUIContext(Microsoft.VisualStudio.Shell.UIContext@,System.Guid)">
            <summary>
            Gets a UIContext instance, initializing it and caching it to a field, if necessary.
            </summary>
            <param name="uicontextField">The field that should cache this <see cref="T:Microsoft.VisualStudio.Shell.UIContext" /> instance.</param>
            <param name="contextGuid">The UIContext guid that describes this <see cref="T:Microsoft.VisualStudio.Shell.UIContext" /> in case it must be initialized.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Shell.UIContext" /> instance.</returns>
            <remarks>
            If the field is null, or a zombied instance, we try to register a new one.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.LocalizableProperties">
            <!-- Failed to insert some or all of included XML --><include file="doc\LocalizableProperties.uex" path="docs/doc[@for=LocalizableProperties]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetAttributes">
            <!-- Failed to insert some or all of included XML --><include file="doc\LocalizableProperties.uex" path="docs/doc[@for=LocalizableProperties.GetAttributes]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetDefaultEvent">
            <!-- Failed to insert some or all of included XML --><include file="doc\LocalizableProperties.uex" path="docs/doc[@for=LocalizableProperties.GetDefaultEvent]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetDefaultProperty">
            <!-- Failed to insert some or all of included XML --><include file="doc\LocalizableProperties.uex" path="docs/doc[@for=LocalizableProperties.GetDefaultProperty]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetEditor(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LocalizableProperties.uex" path="docs/doc[@for=LocalizableProperties.GetEditor]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetEvents">
            <!-- Failed to insert some or all of included XML --><include file="doc\LocalizableProperties.uex" path="docs/doc[@for=LocalizableProperties.GetEvents]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetEvents(System.Attribute[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\LocalizableProperties.uex" path="docs/doc[@for=LocalizableProperties.GetEvents1]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LocalizableProperties.uex" path="docs/doc[@for=LocalizableProperties.GetPropertyOwner]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetProperties">
            <!-- Failed to insert some or all of included XML --><include file="doc\LocalizableProperties.uex" path="docs/doc[@for=LocalizableProperties.GetProperties]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetProperties(System.Attribute[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\LocalizableProperties.uex" path="docs/doc[@for=LocalizableProperties.GetProperties1]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.CreateDesignPropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
            <!-- Failed to insert some or all of included XML --><include file="doc\LocalizableProperties.uex" path="docs/doc[@for=LocalizableProperties.CreateDesignPropertyDescriptor]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetComponentName">
            <!-- Failed to insert some or all of included XML --><include file="doc\LocalizableProperties.uex" path="docs/doc[@for=LocalizableProperties.GetComponentName]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetConverter">
            <!-- Failed to insert some or all of included XML --><include file="doc\LocalizableProperties.uex" path="docs/doc[@for=LocalizableProperties.GetConverter]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetClassName">
            <!-- Failed to insert some or all of included XML --><include file="doc\LocalizableProperties.uex" path="docs/doc[@for=LocalizableProperties.GetClassName]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.LogicalView">
            <!-- Failed to insert some or all of included XML --><include file="doc\LogicalView.uex" path="docs/doc[@for=&quot;LogicalView&quot;]" />
            <devdoc>
                This enum lists the supported logical views.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.LogicalView.Primary">
            <!-- Failed to insert some or all of included XML --><include file="doc\LogicalView.uex" path="docs/doc[@for=&quot;LogicalView.Primary&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.LogicalView.Any">
            <!-- Failed to insert some or all of included XML --><include file="doc\LogicalView.uex" path="docs/doc[@for=&quot;LogicalView.Any&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.LogicalView.Debugging">
            <!-- Failed to insert some or all of included XML --><include file="doc\LogicalView.uex" path="docs/doc[@for=&quot;LogicalView.Debugging&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.LogicalView.Code">
            <!-- Failed to insert some or all of included XML --><include file="doc\LogicalView.uex" path="docs/doc[@for=&quot;LogicalView.Code&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.LogicalView.Designer">
            <!-- Failed to insert some or all of included XML --><include file="doc\LogicalView.uex" path="docs/doc[@for=&quot;LogicalView.Designer&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.LogicalView.Text">
            <!-- Failed to insert some or all of included XML --><include file="doc\LogicalView.uex" path="docs/doc[@for=&quot;LogicalView.Text&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.LogicalView.UserChoose">
            <!-- Failed to insert some or all of included XML --><include file="doc\LogicalView.uex" path="docs/doc[@for=&quot;LogicalView.UserChoose&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.LogicalView.ProjectSpecific">
            <!-- Failed to insert some or all of included XML --><include file="doc\LogicalView.uex" path="docs/doc[@for=&quot;LogicalView.ProjectSpecific&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.LogicalViewConverter">
            <devdoc>
                This type converter inherits from the normal enum
                converter.  It adds the ability to convert to/from
                GUID types.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LogicalViewConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <devdoc>
                Gets a value indicating whether this converter
                can convert an object in the given source type to an enumeration object using
                the specified context.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LogicalViewConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <devdoc>
                Gets a value indicating whether this converter can
                convert an object to the given destination type using the context.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LogicalViewConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <devdoc>
                Converts the specified value object to an enumeration object.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.LogicalViewConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <devdoc>
                Converts the given value object to the specified destination type.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.MsiComponentIdAttribute">
            <summary>
                This attribute defines the MSI component ID that is used by the 
                MSI installer. This component ID is used to indicate the install
                path to this component.  This must be placed on a package class
                if the package is to be installed by MSI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.MsiComponentIdAttribute.#ctor(System.String)">
            <summary>
                Creates a new MsiComponentIdAttribute.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.MsiComponentIdAttribute.Id">
            <summary>
                Returns the component registration ID.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.MsiTokenAttribute">
             <!-- Failed to insert some or all of included XML --><include file="doc\MsiTokenAttribute.uex" path="docs/doc[@for=&quot;MsiTokenAttribute&quot;]" />
             <devdoc>
                 This attribute defines a token string for the MSI installer.  RegPkg
                 will search for these attributes on a package class to identify custom
                 replacement tokens when generating registry scripts for the Microsoft
                 Installer.  Possible token names vary, but RegPkg may query for the 
                 following tokens:
            
                 $ComponentPath  : the path to the component.
                 SystemFolder    : the path to the OS system folder (%systemroot%\system32)
            
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.MsiTokenAttribute.#ctor(System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\MsiTokenAttribute.uex" path="docs/doc[@for=&quot;MsiTokenAttribute.MsiTokenAttribute&quot;]" />
            <devdoc>
                Creates a new MsiTokenAttribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.MsiTokenAttribute.Name">
            <!-- Failed to insert some or all of included XML --><include file="doc\MsiTokenAttribute.uex" path="docs/doc[@for=&quot;MsiTokenAttribute.Name&quot;]" />
            <devdoc>
                Returns the MSI token name.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.MsiTokenAttribute.Value">
            <!-- Failed to insert some or all of included XML --><include file="doc\MsiTokenAttribute.uex" path="docs/doc[@for=&quot;MsiTokenAttribute.Value&quot;]" />
            <devdoc>
                Returns the MSI token value.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.NewDocumentStateScope">
            <summary>
            Simple class to facilitate deterministic restoration of an IVsNewDocumentStateContext.
            </summary>
            <example>
                // set up a context where a new document will be opened provisionally
                using (new NewDocumentStateScope (__VSNEWDOCUMENTSTATE.Provisional, reason))
                {
                    // open the document -- it will be provisional
                }
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.OleDataObject">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleDataObject.uex" path="docs/doc[@for=OleDataObject]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleDataObject.uex" path="docs/doc[@for=OleDataObject.OleDataObject]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor(System.Windows.Forms.IDataObject)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleDataObject.uex" path="docs/doc[@for=OleDataObject.OleDataObject1]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor(System.Runtime.InteropServices.ComTypes.IDataObject)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleDataObject.uex" path="docs/doc[@for=OleDataObject.OleDataObject2]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleDataObject.uex" path="docs/doc[@for=OleDataObject.OleDataObject3]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCmdEventArgs&quot;]/*" />
            <summary>
            This is the set of arguments passed to a OleMenuCommand object when the
            Invoke function is called
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs.#ctor(System.Object,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCmdEventArgs.OleMenuCmdEventArgs&quot;]/*" />
            <summary>
            Builds the OleMenuCmdEventArgs
            </summary>
            <param name="inParam">The input parameter to the command function.</param>
            <param name="outParam">A pointer to the parameter returned by the function</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs.#ctor(System.Object,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCmdEventArgs.OleMenuCmdEventArgs&quot;]/*" />
            <summary>
            Builds the OleMenuCmdEventArgs
            </summary>
            <param name="inParam">The input parameter to the command function.</param>
            <param name="outParam">A pointer to the parameter returned by the function</param>
            <param name="options">Execution options for the command.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs.InValue">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCmdEventArgs.InValue&quot;]/*" />
            <summary>
            Gets the parameter passed as input to the command function
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs.Options">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCmdEventArgs.Options&quot;]/*" />
            <summary>
            Gets the execution options for the command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.OleMenuCmdEventArgs.OutValue">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCmdEventArgs.OutValue&quot;]/*" />
            <summary>
            Gets a pointer to the parameter used as output by the command function
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.OleMenuCommand">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand&quot;]/*" />
            <summary>
            This class is an expansion of MenuCommand.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OleMenuCommand.execHandler">
            <summary>The event handler called to execute the command.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OleMenuCommand.beforeQueryStatusHandler">
            <summary>
            The event handler caller before getting the command status; it can be used to
            implement a command with a dynamic status.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.OleMenuCommand&quot;]/*" />
            <summary>
            Builds a new OleMenuCommand.
            </summary>
            <param name="invokeHandler">The event handler called to execute the command.</param>
            <param name="id">ID of the command.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.OleMenuCommand&quot;]/*" />
            <summary>
            Builds a new OleMenuCommand
            </summary>
            <param name="invokeHandler">The event handler called to execute the command.</param>
            <param name="id">ID of the command.</param>
            <param name="queryStatusSupported">If false command will always respond to query status as not supported to let parent handle query status</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.OleMenuCommand1&quot;]/*" />
            <summary>
            Builds a new OleMenuCommand.
            </summary>
            <param name="invokeHandler">The event handler called to execute the command.</param>
            <param name="id">ID of the command.</param>
            <param name="text">The text of the command.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.OleMenuCommand2&quot;]/*" />
            <devdoc>
            Builds a new OleMenuCommand.
            </devdoc>
            <param name="invokeHandler">The event handler called to execute the command.</param>
            <param name="changeHandler">The event handler called when the command's status changes.</param>
            <param name="id">ID of the command.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.OleMenuCommand3&quot;]/*" />
            <devdoc>
            Builds a new OleMenuCommand.
            </devdoc>
            <param name="invokeHandler">The event handler called to execute the command.</param>
            <param name="changeHandler">The event handler called when the command's status changes.</param>
            <param name="id">ID of the command.</param>
            <param name="text">The text of the command.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.OleMenuCommand4&quot;]/*" />
            <devdoc>
            Builds a new OleMenuCommand.
            </devdoc>
            <param name="invokeHandler">The event handler called to execute the command.</param>
            <param name="changeHandler">The event handler called when the command's status changes.</param>
            <param name="beforeQueryStatus">Event handler called when a lient asks for the command status.</param>
            <param name="id">ID of the command.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.#ctor(System.EventHandler,System.EventHandler,System.EventHandler,System.ComponentModel.Design.CommandID,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.OleMenuCommand5&quot;]/*" />
            <devdoc>
            Builds a new OleMenuCommand.
            </devdoc>
            <param name="invokeHandler">The event handler called to execute the command.</param>
            <param name="changeHandler">The event handler called when the command's status changes.</param>
            <param name="beforeQueryStatus">Event handler called when a client asks for the command status.</param>
            <param name="id">ID of the command.</param>
            <param name="text">The text of the command.</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.OleMenuCommand.BeforeQueryStatus">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.BeforeQueryStatus&quot;]/*" />
            <devdoc>
            Event fired when a client asks for the status of the command.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.OleStatus">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.OleStatus&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.ParametersDescription">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.ParametersDescription&quot;]/*" />
            <devdoc>
            Get or set the string that describes the paraeters accepted by the command.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.Invoke(System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.Invoke&quot;]/*" />
            <devdoc>
            Executes the command.
            </devdoc>
            <param name="inArg">The parameter passed to the command.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.Invoke(System.Object,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.Invoke1&quot;]/*" />
            <devdoc>
            Executes the command.
            </devdoc>
            <param name="inArg">The parameter passed to the command.</param>
            <param name="outArg">The parameter returned by the command.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.Invoke(System.Object,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.Invoke2&quot;]/*" />
            <summary>
            Executes the command with execution options.
            </summary>
            <param name="inArg">The parameter passed to the command.</param>
            <param name="outArg">The parameter returned by the command.</param>
            <param name="options">The execution options for the command.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.Text">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.Text&quot;]/*" />
            <devdoc>
            Gets or sets the text for the command.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.AutomationName">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.AutomationName&quot;]/*" />
            <devdoc>
            Gets or sets the automation name for the command.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommand.DynamicItemMatch(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.DynamicItemMatch&quot;]/*" />
            <devdoc>
            Allows a dynamic item command to match the subsequent items in its list.  This must be overriden
            when implementing a menu via DYNAMICITEMSTART.
            </devdoc>
            <param name="cmdId" />
            <returns />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.OleMenuCommand.MatchedCommandId">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommand.uex" path="docs/doc[@for=&quot;OleMenuCommand.MatchedCommandId&quot;]/*" />
            <devdoc>
            The command id that was most recently used to match this command.  This must be set by the sub-class
            when a match occurs and can be used to identify the actual command being invoked.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.OleMenuCommandService">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommandService.uex" path="docs/doc[@for=&quot;OleMenuCommandService&quot;]/*" />
            <devdoc>
               
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.#ctor(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommandService.uex" path="docs/doc[@for=&quot;OleMenuCommandService.OleMenuCommandService&quot;]/*" />
            <devdoc>
                Creates a new menu command service.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.#ctor(System.IServiceProvider,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommandService.uex" path="docs/doc[@for=&quot;OleMenuCommandService.OleMenuCommandService1&quot;]/*" />
            <devdoc>
                Creates a new menu command service.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.OleMenuCommandService.ServiceProvider">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommandService.uex" path="docs/doc[@for=&quot;OleMenuCommandService.ServiceProvider&quot;]/*" />
            <devdoc>
                Returns the service provider.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.OleMenuCommandService.ReusableCommandID">
            <summary>
            A CommandID that can be modified and reused after construction. This
            avoids allocating a new CommandID each time.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommandService.uex" path="docs/doc[@for=&quot;OleMenuCommandService.GlobalInvoke&quot;]/*" />
            <devdoc>
                Invokes a command on the local form or in the global environment.
                The local form is first searched for the given command ID.  If it is
                found, it is invoked.  Otherwise the the command ID is passed to the
                global environment command handler, if one is available.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID,System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommandService.uex" path="docs/doc[@for=&quot;OleMenuCommandService.GlobalInvoke1&quot;]/*" />
            <devdoc>
                Invokes a command on the local form or in the global environment.
                The local form is first searched for the given command ID.  If it is
                found, it is invoked.  Otherwise the the command ID is passed to the
                global environment command handler, if one is available.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.IsCurrentThreadMainUIThread">
            <summary>
            Determines if we are on the main UI thread in VS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommandService.uex" path="docs/doc[@for=&quot;OleMenuCommandService.OnCommandChanged&quot;]/*" />
            <devdoc>
                This is called by a menu command when it's status has changed.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommandService.uex" path="docs/doc[@for=&quot;OleMenuCommandService.ShowContextMenu&quot;]/*" />
            <devdoc>
                Shows the context menu with the given command ID at the given
                location.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommandService.uex" path="docs/doc[@for=&quot;OleMenuCommandService.IOleCommandTarget.Exec&quot;]/*" />
            <internalonly />
            <devdoc>
            Executes the given command.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OleMenuCommandService.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\OleMenuCommandService.uex" path="docs/doc[@for=&quot;OleMenuCommandService.IOleCommandTarget.QueryStatus&quot;]/*" />
            <internalonly />
            <devdoc>
            Inquires about the status of a command.  A command's status indicates
            it's availability on the menu, it's visibility, and it's checked state.
            The exception thrown by this method indicates the current command status.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.OutputWindowTextWriter">
            <summary> A <see cref="T:System.IO.TextWriter" /> whose output goes to a Visual Studio output window pane. </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.MaxMessageToProcessInOneIdle">
            <summary>
            The limitation of the output messages to be processed in one idle cycle.
            This is to prevent we consume too much time in the idle process and block the user to use the product.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.MaxMessageProcessTime">
            <summary>
            The time we limit to spend in one message cycle when we process messages in the background.  This allows UI to be responsive.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.MessageProcessDelay">
            <summary>
            A short delay to allow extra messages to be batched together, when we process messages in the idle time.  This gives a chance that messages can be batched together,
            instead of sending them one by one.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.syncObject">
            <summary>
            The object to lock when accessing fields.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.outputWindowPane">
            <summary>
            The output window pane to write to.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.outputWindowPane3">
            <summary>
            New version output window pane interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.joinableCollection">
            <summary>
            A joinable collection for avoiding deadlocks should the main thread need to block on completion of this service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.joinableFactory">
            <summary>
            The joinable factory to use for creating joinable tasks and switching to the UI thread.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.waitingFlush">
            <summary>
            An event to be set when we wait all text to be written.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.waitingFlushCount">
            <summary>
            The number of tasks waiting flushing the output.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.outputQueue">
            <summary>
            The output queue.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.waitingOutputQueue">
            <summary>
            An event to be set when we have a task to wait for items to be added to the output queue.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.cancelTasksAfterDisposing">
            <summary>
            A cancellation token to shutdown all tasks after the writer is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.OutputWindowTextWriter" /> class.
            </summary>
            <param name="outputWindowPane"> The output window pane to write to. </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.Encoding">
            <summary>
            Gets the encoding used.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.FlushAsync">
            <summary>
            Returns a task that completes when all messages written to the output window
            up to this point have been written to the output window pane.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.Flush">
            <summary>
            Returns when all messages posted up to this point have been written to the output window pane.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.DisposeAsync">
            <summary>
            Completes the writer block and returns a task that completes when all pending messages have been flushed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.Dispose(System.Boolean)">
            <summary>
            Completes writing and blocks for any pending messages to be written.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.WriteLineWithId(System.Guid,System.UInt32,System.String)">
            <summary>
            Output a  message to IVsOutputWindowPane that can be correlated to Error tasks.
            </summary>
            <param name="messageProviderGuid">
            Provider Guid. Provider (defined by the Guid) is essentially "namespace" for the messages id's.
            It is expected all id's to be unique within the scope of the same provider.
            </param>
            <param name="messageId"> Message ID (unique withing <paramref name="messageProviderGuid" /> provider). </param>
            <param name="value"> String to output. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.WithPrioritySafeForBuild(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.Shell.VsTaskRunContext,System.Boolean)">
            <summary>
            Returns a wrapper around a <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory" /> that schedules work for the UI thread
            with a given priority. Unless the solution is in a synchronous operation, in which case no priority adjustment is made.
            </summary>
            <param name="factory"> The factory to use for creating <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask" />s. </param>
            <param name="priority"> The priority to use for getting to the UI thread. </param>
            <param name="isSynchronousSolutionOperationInProgress"> Whether the solution is synchronously blocking the UI thread. </param>
            <returns>An instance of <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.OutputWindowTextWriter.OutputStringAndCompletion.OutputStringTryNoPump(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)">
            <summary>
            Writes a message to an output window pane, avoiding pumping as far as possible.
            </summary>
            <param name="outputWindowPane"> The output window pane to write to. </param>
            <param name="value"> The message to write. </param>
            <returns> The HRESULT. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Package">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package&quot;]" />
            <devdoc>
                This class implements IVsPackage.  It provides a
                framework-friendly way to define a package and its associated
                services.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.Package&quot;]" />
            <devdoc>
                Simple constructor.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Package.ToolboxInitialized">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.ToolboxInitialized&quot;]" />
            <devdoc>
                This event is raised when the toolbox is freshly initialized.
                If you provide tools for the toolbox you should add them when
                this event is raised.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.Package.ToolboxUpgraded">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.ToolboxUpgraded&quot;]" />
            <devdoc>
                This event is raised when the toolbox is upgraded to a
                new version.  You should perform any work needed to
                upgrade the toolbox here.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Package.ApplicationRegistryRoot">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.ApplicationRegistryRoot&quot;]" />
            <devdoc>
                This property returns the registry root for the application.
                Typically this is HKLM\Software\Microsoft\VisualStudio\[ver]
                but this can change based on any alternate root that the
                shell was initialized with.  This key is read-only.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Package.UserDataPath">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.UserDataPath&quot;]" />
            <devdoc>
                This property returns the path to user data storage for
                Visual Studio.  Typically this is %USERPROFILE%\Application Data\
                Visual Studio\[ver] but this can change based on any
                alternate root that the shell was initialized with.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Package.UserLocalDataPath">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.UserDataPath&quot;]" />
            <devdoc>
                This property returns the path to user data storage for
                Visual Studio.  Typically this is %USERPROFILE%\Local Settings\Application Data\
                Visual Studio\[ver] but this can change based on any
                alternate root that the shell was initialized with.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Package.UserRegistryRoot">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.UserRegistryRoot&quot;]" />
            <devdoc>
                This property returns the registry root for the current
                user.  Typically this is HKCU\Software\Microsoft\VisualStudio\[ver]
                but this can change based on any alternate root that the shell
                is initialized with.  This key is read-write.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.AddOptionKey(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.AddOptionKey&quot;]" />
            <devdoc>
                This method adds a user option key name into the list of
                option keys that we will load and save from the solution
                file.  You should call this early in your constructor.
                Calling this will cause the OnLoadOptions and
                OnSaveOptions methods to be invoked for each key you
                add.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.InternalQueryService(System.Guid@,System.Guid@,System.IntPtr@)">
            <devdoc>
                This method is called by IServiceProvider.QueryService in order to implement service retrieval.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.GetBuiltInObjectForGuid(System.Guid@)">
            <devdoc>
                Gets a built in service (i.e. non-registered service) whose id matches <paramref name="sid" />, or null if none exist.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.GetObjectAsIID(System.Object,System.Guid@,System.IntPtr@)">
            <devdoc>
                Gets an object as an IntPtr representing the object as <paramref name="iid" />, or a failure if the object does not implement that interface.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsUserSettings#ExportSettings(System.String,Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.ExportSettings&quot;]" />
            <devdoc>
                This method implements the IVsUserSettings Interface
                used to manage profiles and import/export settings
                to XML files.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsUserSettingsMigration#MigrateSettings(Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader,Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.MigrateSettings&quot;]" />
            <devdoc>
                This method implements the IVsUserSettingsMigration Interface
                used to bring forward user settings from a previous version.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsUserSettings#ImportSettings(System.String,Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader,System.UInt32,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.ImportSettings&quot;]" />
            <devdoc>
                This method implements the IVsUserSettings Interface
                used to manage profiles and import/export settings
                to XML files.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsUserSettingsQuery#NeedExport(System.String,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsUserSettingsQuery.NeedExport&quot;]" />
            <devdoc>
                This method implements the IVsUserSettingsQuery interface to indicate whether
                settings have changed and should be re-exported.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Dispose(System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.Dispose&quot;]" />
            <devdoc>
                This method will be called by Visual Studio in reponse
                to a package close (disposing will be true in this
                case).  The default implementation revokes all
                services and calls Dispose() on any created services
                that implement IDisposable.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.GetAutomationObject(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.GetAutomationObject&quot;]" />
            <devdoc>
                This method returns the automation object for this package.
                The default implementation will return null if name is null, indicating there
                is no default automation object.  If name is non null, this will walk metadata
                attributes searching for an option page that has a name of the format
                &lt;Category&gt;.&lt;Name&gt;.  If the option page has this format and indicates that it
                supports automation, its automation object will be returned.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.GetDialogPage(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.GetDialogPage&quot;]" />
            <devdoc>
                This method returns the requested dialog page.  Dialog
                pages are cached so they can keep a single instance
                of their state.  This method allows a deriving class
                to get a cached dialog page.  The object will be
                dynamically created if it is not in the cache.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.GetProfileManager(System.Guid,Microsoft.VisualStudio.Shell.Package.ProfileManagerLoadAction)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.GetProfileManager&quot;]" />
            <devdoc>
                This method returns the requested profile manager based on its guid.
                Profile managers are cached so they can keep a single instance
                of their state.  This method allows a deriving class
                to get a cached profile manager.  The object will be
                dynamically created if it is not in the cache.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.GetRegistryRoot">
            <devdoc>
                Retrieves the shell's root key for VS options, or uses the value of
                the DefaultRegistryRootAttribute if we coundn't get the shell service.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.IsLocalService(System.Type)">
            <devdoc>
                Determines if a given service type can be retrieved without possibly requiring an RPC transition to the UI thread
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.GetService(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.GetService&quot;]" />
            <devdoc>
                IServiceProvider implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Initialize">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.Initialize&quot;]/*" />
            <devdoc>
            This method is called when the package is first
            initialized.  Override it if you need to do work
            that happens as part of package initialization.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.QueryClose(System.Boolean@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.QueryClose&quot;]/*" />
            <devdoc>
            Called to ask the package if the shell can be closed.
            </devdoc>
            <param name="canClose">Set canClose to false if you want to prevent the shell from closing</param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.GetProviderLocale">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.GetProviderLocale&quot;]" />
            <devdoc>
            Return the locale associated with this IServiceProvider.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.CreateInstance(System.Guid@,System.Guid@,System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.CreateInstance&quot;]/*" />
            <devdoc>
            Create the specified COM object using Visual Studio's ILocalRegistry
            and cast it to the given managed type.  If VS cannot create it, then
            fall back to Activator.CreateInstance.  This allows managed classes
            to be registered in local to the particular VS version in
            HKLM\Software\Microsoft\VisualStudio\8.0\clsid.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.GetOutputPane(System.Guid,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.GetOutputPane&quot;]/*" />
            <devdoc>
            Return the specified output window pane.  If the pane is not found,
            create it with the given caption.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.OnCreateService(System.ComponentModel.Design.IServiceContainer,System.Type)">
            <devdoc>
                ServiceCreatorCallback implementation for the services we offer on demand.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.OnLoadOptions(System.String,System.IO.Stream)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.OnLoadOptions&quot;]/*" />
            <devdoc>
            This method can be overridden by the deriving
            class to load solution options.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.OnSaveOptions(System.String,System.IO.Stream)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.OnSaveOptions&quot;]/*" />
            <devdoc>
            This method can be overridden by the deriving
            class to save solution options.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.ParseToolboxResource(System.IO.TextReader,System.Resources.ResourceManager)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.ParseToolboxResource&quot;]/*" />
            <devdoc>
            Parses a toolbox resource format and adds the toolbox items to the toolbox.  This
            method can be used to automatically add items to the toolbox.  The resource data
            is passed in through the resourceData parameter and consists of a text file with
            the following format:
            ; Comment
            [CategoryName]
            &lt;class name&gt;, &lt;assembly name&gt;
            The category name can be localized through the localizedCategorized resource
            manager that is passed into this method.  The localizedCategories parameter
            may be null, in which case the category names will not be localized.
            The assembly name may either be a fully qualified name, or a partial name.
            If a partial name is passed, the latest assembly of that partial name will
            be loaded.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.ParseToolboxResource(System.IO.TextReader,System.Guid)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.ParseToolboxResource&quot;]/*" />
            <devdoc>
            Parses a toolbox resource format and adds the toolbox items to the toolbox.  This
            method can be used to automatically add items to the toolbox.  The resource data
            is passed in through the resourceData parameter and consists of a text file with
            the following format:
            ; Comment
            [CategoryName]
            &lt;class name&gt;, &lt;assembly name&gt;
            The category name can be localized through the localizedCategorized resource
            manager that is passed into this method.  The localizedCategories parameter
            may be null, in which case the category names will not be localized.
            The assembly name may either be a fully qualified name, or a partial name.
            If a partial name is passed, the latest assembly of that partial name will
            be loaded.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.ParseToolboxResource(System.IO.TextReader,System.Resources.ResourceManager,System.Guid)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.ParseToolboxResource&quot;]/*" />
            <devdoc>
            Parses a toolbox resource format and adds the toolbox items to the toolbox.  This
            method can be used to automatically add items to the toolbox.  The resource data
            is passed in through the resourceData parameter and consists of a text file with
            the following format:
            ; Comment
            [CategoryName]
            &lt;class name&gt;, &lt;assembly name&gt;
            The category name can be localized through the localizedCategorized resource
            manager that is passed into this method.  The localizedCategories parameter
            may be null, in which case the category names will not be localized.
            The assembly name may either be a fully qualified name, or a partial name.
            If a partial name is passed, the latest assembly of that partial name will
            be loaded.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.RegisterEditorFactory(Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.RegisterEditorFactory&quot;]/*" />
            <devdoc>
            Registers this editor factory with Visual Studio.
            If you are providing an editor factory, you should register
            it by overriding the Initialize method. Call
            base.Initialize first, and then call RegisterEditorFactory
            for each editor factory.  There is no need to unregister
            an editor factory as Package will handle this for you.
            Also, if your editor factory is IDisposable, it will be
            disposed when it is unregistered.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.RegisterProjectFactory(Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.RegisterEditorFactory&quot;]/*" />
            <devdoc>
            Registers this project factory with Visual Studio.
            If you are providing an project factory, you should register
            it by overriding the Initialize method. Call
            base.Initialize first, and then call RegisterProjectFactory
            for each project factory.  There is no need to unregister
            an project factory as the Package base class will handle this for you.
            Also, if your project factory is IDisposable, it will be
            disposed when it is unregistered.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.ShowOptionPage(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.ShowOptionPage&quot;]/*" />
            <devdoc>
            Displays the Tools-&gt;Options dialog with the given
            options page selected.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IOleCommandTarget.Exec&quot;]/*" />
            <internalonly />
            <devdoc>
            IOleCommandTarget implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IOleCommandTarget.QueryStatus&quot;]/*" />
            <internalonly />
            <devdoc>
            IOleCommandTarget implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#OLE#Interop#IServiceProvider#QueryService(System.Guid@,System.Guid@,System.IntPtr@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IOleServiceProvider.QueryService&quot;]/*" />
            <internalonly />
            <devdoc>
            IOleServiceProvider implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.System#ComponentModel#Design#IServiceContainer#AddService(System.Type,System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IServiceContainer.AddService&quot;]/*" />
            <internalonly />
            <devdoc>
            Adds the given service to the service container.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.System#ComponentModel#Design#IServiceContainer#AddService(System.Type,System.Object,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IServiceContainer.AddService1&quot;]/*" />
            <internalonly />
            <devdoc>
            Adds the given service to the service container.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.System#ComponentModel#Design#IServiceContainer#AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IServiceContainer.AddService2&quot;]/*" />
            <internalonly />
            <devdoc>
            Adds the given service to the service container.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.System#ComponentModel#Design#IServiceContainer#AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IServiceContainer.AddService3&quot;]/*" />
            <internalonly />
            <devdoc>
            Adds the given service to the service container.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.System#ComponentModel#Design#IServiceContainer#RemoveService(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IServiceContainer.RemoveService&quot;]/*" />
            <internalonly />
            <devdoc>
            Removes the given service type from the service container.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.System#ComponentModel#Design#IServiceContainer#RemoveService(System.Type,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IServiceContainer.RemoveService1&quot;]/*" />
            <internalonly />
            <devdoc>
            Removes the given service type from the service container.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.System#IServiceProvider#GetService(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IServiceProvider.GetService&quot;]/*" />
            <internalonly />
            <devdoc>
            IServiceProvider implementation.  We just delegate to
            the Package implementation for this.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPackage#Close">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsPackage.Close&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsPackage implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.CreateTool(System.Guid@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsPackage.CreateTool&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsPackage implementation.
            graysonm : temporarily remove explicit implementation syntax in order to allow hiding of this method
            in a derived class until tool window support is implemented.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsToolWindowFactory#CreateToolWindow(System.Guid@,System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsToolWindowFactory.CreateToolWindow&quot;]/*" />
            <internalonly />
            <devdoc>
            Create a tool window of the specified type with the specified ID.
            </devdoc>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID or 0 for single instance toolwindows</param>
            <returns>HRESULT for toolwindow creation</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.CreateToolWindow(System.Guid@,System.Int32)">
            <devdoc>
            Create a tool window of the specified type with the specified ID.
            </devdoc>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID or 0 for single instance toolwindows</param>
            <returns>HRESULT for toolwindow creation</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.CreateToolWindow(System.Type,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.CreateToolWindow&quot;]/*" />
            <devdoc>
            Create a tool window of the specified type with the specified ID.
            </devdoc>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID or 0 for single instance toolwindows</param>
            <returns>An instance of a class derived from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.CreateToolWindow(System.Type,System.Int32,System.Object)">
            <summary>
            Create a tool window of the specified type with the specified ID.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID or 0 for single instance toolwindows</param>
            <param name="context">Tool window creation context (passed to <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" /> constructor)</param>
            <returns>An instance of a class derived from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.CreateToolWindow(System.Type,System.Int32,Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute,System.Object)">
            <summary>
            Create a tool window of the specified type with the specified ID.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID or 0 for single instance toolwindows</param>
            <param name="tool">The registration attribute on the package class defining the toolwindow configuration</param>
            <param name="context">Tool window creation context (passed to <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" /> constructor)</param>
            <returns>An instance of a class derived from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.InstantiateToolWindow(System.Type)">
            <devdoc>
            Construct a tool window of the specified type.
            </devdoc>
            <param name="toolWindowType">Type of the window to be created</param>
            <returns>An instance of a class derived from WindowPane</returns>
            <remarks>
            <para>This method should be overriden when a package wishes to use something other than the default constructor to create their tool windows.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.InstantiateToolWindow(System.Type,System.Object)">
            <summary>
            Construct a tool window of the specified type.
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="context">The context object to pass to the constructor</param>
            <returns>An instance of a class derived from WindowPane</returns>
            <remarks>
            This method should be over-ridden when a package wishes to use something other
            than the default constructor or a constructor that takes a single parameter of
            the same type as the dynamic type of <paramref name="context" /> (or a base type
            of the dynamic type of <paramref name="context" />) to create their tool windows.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.CreateToolWindow(System.Type,System.Int32,System.UInt32)">
            <devdoc>
            Create a tool window of the specified type with the specified ID.
            </devdoc>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID or 0 for single instance toolwindows</param>
            <param name="flags">The window flags from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN" /> to be passed to IVsUiShell.CreateToolWindow</param>
            <returns>An instance of a class derived from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.CreateToolWindow(System.Type,System.Int32,System.UInt32,System.Object,System.Guid)">
            <summary>
            Create a tool window of the specified type with the specified ID.
            This is the only method that should be calling IVsUiShell.CreateToolWindow()
            </summary>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID or 0 for single instance toolwindows</param>
            <param name="flags">The window flags from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN" /> to be passed to IVsUiShell.CreateToolWindow</param>
            <param name="context">Tool window creation context (passed to <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" /> constructor)</param>
            <param name="persistenceGuid">
            The persistence Guid for the tool window.  If this is unspecified or matches
            <see cref="F:System.Guid.Empty" />, <paramref name="toolWindowType" />'s GUID property
            is used as the persistence Guid.
            </param>
            <returns>An instance of a class derived from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.CreateFrameForToolWindow(Microsoft.VisualStudio.Shell.Package.ToolWindowCreationResult,System.Int32,System.Guid)">
            <summary>
            Creates a window frame to act as a container for a tool window
            </summary>
            <param name="result">A <see cref="T:Microsoft.VisualStudio.Shell.Package.ToolWindowCreationResult" /> with the results of the tool window creation</param>
            <param name="id">The instance ID of the tool window</param>
            <param name="persistenceGuid">The persistence Guid for the tool window</param>
            <returns>The frame for the tool window</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.HandleToolWindowCreation(Microsoft.VisualStudio.Shell.Package.ToolWindowCreationResult,System.Int32,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <summary>
            Handles the creation of a new tool window
            </summary>
            <param name="result">A <see cref="T:Microsoft.VisualStudio.Shell.Package.ToolWindowCreationResult" /> with the results of the tool window creation</param>
            <param name="id">The instance ID of the tool window</param>
            <param name="persistenceGuid">The persistence Guid for the tool window</param>
            <param name="frame">The window frame that hosts the tool window</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.IsToolWindowCreating(System.Guid,System.Int32)">
            <summary>
            Determines whether a tool window is in the process of being created.  An async tool
            window whose factory is in the process of creating the tool window is not considered created.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.IsToolWindowCreating(Microsoft.VisualStudio.Threading.AsyncLazy{Microsoft.VisualStudio.Shell.ToolWindowPane})">
            <summary>
            Determines whether a tool window is in the process of being created.  An async tool
            window whose factory is in the process of creating the tool window is not considered created.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.IsToolWindowCreated(System.Guid,System.Int32)">
            <summary>
            Determines whether a tool window has been created.  An async tool window whose factory
            is in the process of creating the tool window is not considered created.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.IsToolWindowCreated(Microsoft.VisualStudio.Threading.AsyncLazy{Microsoft.VisualStudio.Shell.ToolWindowPane})">
            <summary>
            Determines whether a tool window has been created.  An async tool window whose factory
            is in the process of creating the tool window is not considered created.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.FindToolWindow(System.Type,System.Int32,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.0lWindow&quot;]/*" />
            <devdoc>
            Return the tool window corresponding to the specified type and ID.
            If it does not exist, it returns creates one if create is true,
            or null if create is false.
            </devdoc>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID</param>
            <param name="create">Create if none exist?</param>
            <returns>
            An instance of a class derived from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" /> or
            null if the tool window doesn't derive from <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowPane" />.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.FindWindowPane(System.Type,System.Int32,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.0lWindow&quot;]/*" />
            <devdoc>
            Return the window pane corresponding to the specified type and ID.
            If it does not exist, it returns creates one if create is true,
            or null if create is false.
            </devdoc>
            <param name="toolWindowType">Type of the window to be created</param>
            <param name="id">Instance ID</param>
            <param name="create">Create if none exist?</param>
            <returns>An instance of a class derived from <see cref="T:Microsoft.VisualStudio.Shell.WindowPane" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPackage#GetAutomationObject(System.String,System.Object@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsPackage.GetAutomationObject&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsPackage implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPackage#GetPropertyPage(System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSPROPSHEETPAGE[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsPackage.GetPropertyPage&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsPackage implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPackage#QueryClose(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsPackage.QueryClose&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsPackage implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPackage#ResetDefaults(System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsPackage.ResetDefaults&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsPackage implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPackage#SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsPackage.SetSite&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsPackage implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPersistSolutionOpts#LoadUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence,System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsPersistSolutionOpts.LoadUserOptions&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsPersistSolutionOpts implementation.
            Called when a solution is opened, and allows us to inspect our options.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPersistSolutionOpts#ReadUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsPersistSolutionOpts.ReadUserOptions&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsPersistSolutionOpts implementation.
            Called by the shell to load our solution options.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPersistSolutionOpts#SaveUserOptions(Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsPersistSolutionOpts.SaveUserOptions&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsPersistSolutionOpts implementation.
            Called by the shell when we are to persist our service options
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsPersistSolutionOpts#WriteUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsPersistSolutionOpts.WriteUserOptions&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsPersistSolutionOpts implementation.
            Called by the shell to persist our solution options.  Here is where the service
            can persist any goo that it cares about.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsToolboxItemProvider#GetItemContent(System.String,System.UInt16,System.IntPtr@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsToolboxItemProvider.GetItemContent&quot;]/*" />
            <devdoc>
            IVsToolboxItemProvider implementation.
            Called by the shell to retrieve the content of a data format in a toolbox item that
            was statically registered.  See comments in vsshell100.idl for details.
            This method is called on UI thread. If getting content is expensive, consider using
            IVsToolboxItemProvider2.GetItemContentAsync alternative and return VS_E_USE_ASYNC_ALTERNATIVE_INSTEAD error code,
            from IVsToolboxItemProvider.GetItemContent, that's what the base Package class does.
            Historically, some derived package classes override IVsToolboxItemProvider implementation.
            They either return S_OK if they get the item content, or E_NOTIMPL if they don't have anything, or an error code.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.Microsoft#VisualStudio#Shell#Interop#IVsToolboxItemProvider2#GetItemContentAsync(System.String,System.UInt16)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.IVsToolboxItemProvider.GetItemContentAsync&quot;]/*" />
            <devdoc>
            IVsToolboxItemProvider2 implementation - an async alternative to IVsToolboxItemProvider.
            Called by the shell to retrieve the content of a data format in a toolbox item that
            was statically registered.
            The result of the task is VT_I4 variant that must be casted to HGLOBAL.
            Derived classes should override GetToolboxItemDataAsync() or GetToolboxItemData()
            and return Microsoft.VisualStudio.OLE.Interop.IDataObject that this method will transform into HGLOBAL.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.GetToolboxItemData(System.String,System.Windows.Forms.DataFormats.Format)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.GetToolboxItemData&quot;]" />
            <devdoc>
            Given a toolbox item "unique ID" and a data format identifier, returns the content of
            the data format, or returns this if GetToolboxItemDataAsync() must be called instead.
            Historically, some derived package classes override GetToolboxItemData() and return their content.
            The Package class implemention always returns this to let the caller know to use GetToolboxItemDataAsync().
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.GetToolboxItemDataAsync(System.String,System.Windows.Forms.DataFormats.Format)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.GetToolboxItemDataAsync&quot;]" />
            <devdoc>
            Given a toolbox item "unique ID" and a data format identifier, returns the content of
            the data format.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Package.PackageContainer">
            <devdoc>
                This class derives from container to provide a service provider
                connection to the package.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.PackageContainer.#ctor(System.IServiceProvider)">
            <devdoc>
                Creates a new container using the given service provider.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.PackageContainer.GetService(System.Type)">
            <devdoc>
                Override to GetService so we can route requests
                to the package's service provider.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.GetGlobalService(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.GetGlobalService&quot;]" />
            <devdoc>
            Get a service proffered globally by VisualStudio or one of its package.
            This is equivalent to calling GetService() on an instance of a package
            that proffer no service itself.
            </devdoc>
            <param name="serviceType">Type corresponding to the Service being requested</param>
            <returns>The service being requested if available, otherwise null</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.GetGlobalService(System.Type,System.Boolean)">
            <devdoc>
            Gets a service proffered globally by VisualStudio or one of its packages, with an option to prevent the error being sent to the shell.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Package.ToolWindowCreationContext.Unspecified">
            <summary>
            The well-known creation context which indicates "my async tool window needs
            no creation context".  When this is returned from InitializeToolWindowAsync,
            the tool window is instantiated using the type's default constructor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Package.ProfferedService">
            <devdoc>
                This class contains a service that is being promoted to vS.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.Package.zombie">
            <devdoc>
            Internal zombie flag indicates that VS is shutting us down.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Package.Zombied">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.Zombied&quot;]/*" />
            <devdoc>
            Zombie flag indicates that the package is being closed.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Package.ToolWindows">
            <summary>
            The collection of tool windows created by (or in the process of being created by) this package.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Package.IsToolWindowsCollectionCreated">
            <summary>
            Indicates whether the lazily-created collection of tool windows has been created.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Package.GetToolWindowCreationFlags(Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute)">
            <summary>
            Returns the tool window creation flags for a <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute" />
            </summary>
            <param name="tool">The attribute describing the tool window</param>
            <returns>The tool window's creation flags</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Package.DeferredSetSiteComponentWrapper">
            <summary>
            <see cref="T:System.ComponentModel.IComponent" /> decorator that allows <see cref="P:System.ComponentModel.IComponent.Site" /> changes to be deferred.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute">
            <devdoc>
                This attribute is defined on a package to get it to be registered.  It
                is internal because packages are meant to be registered, so it is
                implicit just by having a package in the assembly.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.RegisterUsing">
            <devdoc>
                Select between specifying the Codebase entry or the Assembly entry in the registry.
                This can be overriden during registration
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.UseManagedResourcesOnly">
            <summary>
            For managed resources, there should not be a native ui dll registered.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.AllowsBackgroundLoading">
            <summary>
            Package is safe to load on a background thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.SatellitePath">
            <summary>
            To specify a resource dll located in a different location then the default,
            set this property. This can be useful if your package is installed in the GAC.
            If this is not set, the directory where the package is located will be use.
            
            Note that the dll should be located at the following path:
                   SatellitePath\lcid\PackageDllNameUI.dll
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
             <param name="context">
                 Contains the location where the registration information should be placed.
                 It also contains other information such as the type being registered 
                 and path of the assembly.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <devdoc>
                Unregister this package.
            </devdoc>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute">
            <summary>
            This attribute adds a custom file generator registry entry for specific file 
            type. 
            For Example:
              [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\Generators\
            	{fae04ec1-301f-11d3-bf4b-00c04f79efbc}\MyGenerator]
            		"CLSID"="{AAAA53CC-3D4F-40a2-BD4D-4F3419755476}"
                    "GeneratesDesignTimeSource" = d'1'
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Creates a new CodeGeneratorRegistrationAttribute attribute to register a custom
            code generator for the provided context. 
            </summary>
            <param name="generatorType">The type of Code generator. Type that implements IVsSingleFileGenerator</param>
            <param name="generatorName">The generator name</param>
            <param name="contextGuid">The context GUID this code generator would appear under.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.GeneratorType">
            <summary>
            Get the generator Type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.ContextGuid">
            <summary>
            Get the Guid representing the project type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.GeneratorGuid">
            <summary>
            Get the Guid representing the generator type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.GeneratesDesignTimeSource">
            <summary>
            Get or Set the GeneratesDesignTimeSource value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.GeneratesSharedDesignTimeSource">
            <summary>
            Get or Set the GeneratesSharedDesignTimeSource value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.GeneratorName">
            <summary>
            Gets the Generator name 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.GeneratorRegKeyName">
            <summary>
            Gets the Generator reg key name under 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.GeneratorRegKey">
            <summary>
            Property that gets the generator base key name
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                It also contains other information such as the type being registered and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.CodeGeneratorRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this file extension.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.CommandSetRegistrationAttribute">
            <summary>
            Declares a class as a CommandSet and specifies the name
            and associated service broker service for the command set.
            A command set can provide commands with <see cref="T:Microsoft.VisualStudio.Shell.ProvideCommandAttribute" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ComponentPickerPropertyPageAttribute">
            <summary>
            This attribute adds the property page registration for Component picker 
            For Example:
            [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0Exp\ComponentPickerPages\My Component Page]
            @="#13925"
                "Package"="{B0002DC2-56EE-4931-93F7-70D6E9863940}"
                "Page"="{0A9F3920-3881-4f50-8986-9EDEC7B33566}"
                "Sort"=dword:00000014
                "AddToMru"=dword:00000000
                "ComponentType"=".Net Assembly"
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ComponentPickerPropertyPageAttribute.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Creates a new ComponentPicker page registration attribute to register a custom
            component picker property page. 
            </summary>
            <param name="packageType">The type of pacakge that provides the page</param>
            <param name="pageType">The page type that needs to be registered</param>
            <param name="pageRegKeyName">Registry key name for the page.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ComponentPickerPropertyPageAttribute.PacakgeGuid">
            <summary>
            Get the pacakge Guid
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ComponentPickerPropertyPageAttribute.PageGuid">
            <summary>
            Get the Guid representing the property page
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ComponentPickerPropertyPageAttribute.PageRegKeyName">
            <summary>
            Get the property page reg key name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ComponentPickerPropertyPageAttribute.AddToMru">
            <summary>
            Get or Set the AddToMru value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ComponentPickerPropertyPageAttribute.ComponentType">
            <summary>
            Get or set the Component Type value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ComponentPickerPropertyPageAttribute.SortOrder">
            <summary>
            Get or Set the Sort reg value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ComponentPickerPropertyPageAttribute.DefaultPageNameValue">
            <summary>
            get / sets default page name value 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ComponentPickerPropertyPageAttribute.PageRegKey">
            <summary>
            Property that gets the page reg key name
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ComponentPickerPropertyPageAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                It also contains other information such as the type being registered and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ComponentPickerPropertyPageAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister property page
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.EditorFactoryNotifyForProjectAttribute">
            <summary>
            This attribute adds a File Extension for a Project System so that the Project
            will call IVsEditorFactoryNotify methods when an item of this type is added 
            or renamed.
            </summary>
            <remarks>
            For example:
              [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\Projects\
            	{F184B08F-C81C-45F6-A57F-5ABD9991F28F}\FileExtensions\.addin]
            		"EditorFactoryNotify"="{FA3CD31E-987B-443A-9B81-186104E8DAC1}"
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.EditorFactoryNotifyForProjectAttribute.#ctor(System.Object,System.String,System.Object)">
            <summary>
            Creates a new ProvideEditorFactoryNotifyForProject attribute to register a 
            file extension with a project. 
            </summary>
            <param name="projectType">The type of project; can be a Type, a GUID or a string representation of a GUID</param>
            <param name="factoryType">The type of factory; can be a Type, a GUID or a string representation of a GUID</param>
            <param name="fileExtension">The file extension the EditorFactoryNotify wants to handle</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.EditorFactoryNotifyForProjectAttribute.FactoryType">
            <summary>
            Get the Guid representing the type of the editor factory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.EditorFactoryNotifyForProjectAttribute.ProjectType">
            <summary>
            Get the Guid representing the project type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.EditorFactoryNotifyForProjectAttribute.FileExtension">
            <summary>
            Get or Set the extension of the XML files that support this view
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.EditorFactoryNotifyForProjectAttribute.ProjectFileExtensionPath">
            <summary>
            Extention path within the registration context
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.EditorFactoryNotifyForProjectAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Called to register this attribute with the given context.  The context
            contains the location where the registration information should be placed.
            It also contains other information such as the type being registered and path information.
            </summary>
            <param name="context">Given context to register in</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.EditorFactoryNotifyForProjectAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this file extension.
            </summary>
            <param name="context">Given context to unregister from</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ExtensionPointRegistrationAttribute">
            <summary>
            Registers an extension point provider of the type specified by derived classes as ExtensionProviderType.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ExtensionPointRegistrationAttribute.ProviderType">
            <summary>
            The type which implements the associated extension point in this package
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ExtensionPointRegistrationAttribute.Provider">
            <summary>
            The provider's GUID
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ExtensionPointRegistrationAttribute.Name">
            <summary>
            The human-readable name of the extension point provider
            This may be either a non-localized string or a decimal resource identifier
            prefixed by '@' indicating a managed resource. e.g. "@1234"
            The '#' prefix may be used to hint at a native resource.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointRegistrationAttribute.#ctor(System.Type,System.String)">
            <summary>
            When applied to a Package, registers the package as an Extension Point Provider for the specified type.
            </summary>
            <param name="provider">The type implementing the generic's argument extension</param>
            <param name="name">A short, non-localized human-readable name of the provider</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ExtensionPointRegistrationAttribute.ProviderGuidString">
            <summary>
            The provider's GUID expressed as a string
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ExtensionPointRegistrationAttribute.ExtensionProvidersKey">
            <summary>
            The path in registry where the extension providers are declared. Override in derived classes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ExtensionPointRegistrationAttribute.ExtensionProviderType">
            <summary>
            The type of the extension provider (the interface implemented)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Called to register this attribute with the given context.  The context
            contains the location where the registration information should be placed.
            it also contains such as the type being registered, and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ExtensionPointRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this Extension point provider specification.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute">
            <summary>
                This attribute registers an 'installed product' for your package.  
                This enables your package to present information on the VS
                Splash Screen or Help About.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new InstalledProductRegistrationAttribute to register your package with Help/About dialog.
            This is the simplest registration information necessary for 3rd party packages. 
            Providing product details is not a requirement, but is recommended.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new InstalledProductRegistrationAttribute to register your package with Help/About dialog.
            </summary>
            <param name="useVsProductId">
                Reserved for Microsoft internal use.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.#ctor(System.Boolean,System.String,System.String,System.String)">
            <summary>
            Creates a new InstalledProductRegistrationAttribute to register your package with Help/About dialog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductNameResourceID">
            <summary>
            Resource ID corresponding to the product name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductDetailsResourceID">
            <summary>
            Resource ID for the details.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.IconResourceID">
            <summary>
            Resource ID of the icon.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductId">
            <summary>
            Your product ID.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductName">
            <summary>
            The name of your product.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.LanguageIndependentName">
            <summary>
            The name of your product.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductDetails">
            <summary>
            Detailed description of your product.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.UseInterface">
            <summary>
            Use IVsInstalledProduct to fill in the Help about dialog.
            The package must implement IVsInstalledProduct.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.UsePackage">
            <summary>
            True is the product installation will use the package ID
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.UseVsProductId">
            <summary>
            True is the product ID is the same as VisualStudio ID
            This is reserved for Microsoft internal use. 3rd party packages should provide their own product ID when the class is constructed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.
            </summary>
            <param name="context">
                Contains the location where the registration information should be placed.
                It also contains other information such as the type being registered and path information.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this InstalledProducts entry.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideAppCommandLineAttribute">
            <summary>
            This attribute adds a commandline option to devenv for a specfic package 
            type. 
            For Example:
              [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\AppCommandLine\MyAppCommand
                "Arguments"="*"
                "DemandLoad"=dword:1
                "Package"="{5C48C732-5C7F-40f0-87A7-05C4F15BC8C3}"
                "HelpString"="#200"
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideAppCommandLineAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of new command line option</param>
            <param name="packageType">package type</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideAppCommandLineAttribute.Name">
            <summary>
            Name of the command line
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideAppCommandLineAttribute.Arguments">
            <summary>
            Default arguments for the command line
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideAppCommandLineAttribute.DemandLoad">
            <summary>
            Should the package be demand loaded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideAppCommandLineAttribute.PackageGuid">
            <summary>
            Guid of the package providing the command line
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideAppCommandLineAttribute.HelpString">
            <summary>
            Help string to show for the command. Can be a resource id
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideAppCommandLineAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Called to register this attribute with the given context.  The context
            contains the location where the registration information should be placed.
            it also contains such as the type being registered, and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideAppCommandLineAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this App command line
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideAppCommandLineAttribute.AppCommandLineRegKeyName">
            <summary>
            The reg key name of this AppCommandLine.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideAssemblyFilterAttribute.uex" path="docs/doc[@for=&quot;ProvideAssemblyFilterAttribute&quot;]" />
            <devdoc>
               Provides an assembly filter for a toolbox item configuration object.  Place this attribute on an object
               that implements IConfigureToolboxItem to describe the assemblies the object wishes to filter.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute.#ctor(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideAssemblyFilterAttribute.uex" path="docs/doc[@for=&quot;ProvideAssemblyFilterAttribute.ProvideAssemblyFilterAttribute&quot;]" />
            <devdoc>
               Constructor
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute.AssemblyFilter">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideAssemblyFilterAttribute.uex" path="docs/doc[@for=&quot;ProvideAssemblyFilterAttribute.AssemblyFilter&quot;]" />
            <devdoc>
               The filter for the toolbox item configuration object.  Filters are used to optimize which toolbox item configuration objects
               are invoked when a new toolbox item is added.  Filters allow you to specify as much as as little of an assembly as you 
               like.  Here are some examples:
            
               All Assemblies:  *
               Any version of System.Windows.Forms: System.Windows.Forms
               
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.PackageAutoLoadFlags.None">
            <summary>
            Indicates no special auto-load behavior. This is the default flag value if not specified.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.PackageAutoLoadFlags.SkipWhenUIContextRulesActive">
            <summary>
            When set package will not auto load in newer Visual Studio versions with rule based UI contexts
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.PackageAutoLoadFlags.BackgroundLoad">
            <summary>
            When set, the associated package will be loaded asynchronously on a background thread when the associated
            UI context is triggered. The associated package must inherit from <see cref="T:Microsoft.VisualStudio.Shell.AsyncPackage" /> and be
            registered to support background load (see <see cref="T:Microsoft.VisualStudio.Shell.PackageRegistrationAttribute" />), otherwise this
            value is ignored.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute">
            <summary>
                This attribute registers the package as an extender.  The GUID passed in determines
                what is being extended. The attributes on a package do not control the behavior of
                the package, but they can be used by registration tools to register the proper
                information with Visual Studio.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.#ctor(System.String)">
            <summary>
                Specify that the package should get loaded when this context is active.
            </summary>
            <param name="cmdUiContextGuid">Context which should trigger the loading of your package.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.#ctor(System.String,Microsoft.VisualStudio.Shell.PackageAutoLoadFlags)">
            <summary>
                Specify that the package should get loaded when this context is active.
            </summary>
            <param name="cmdUiContextGuid">Context which should trigger the loading of your package.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.LoadGuid">
            <summary>
            Context Guid which triggers the loading of the package.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.Flags">
            <summary>
            Specifies the options for package auto load entry
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.RegKeyName">
            <summary>
            	The reg key name of this AutoLoad.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                it also contains such as the type being registered, and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideAutoLoadAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this AutoLoad specification.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideAutomationObjectAttribute.uex" path="docs/doc[@for=&quot;ProvideAutomationObjectAttribute&quot;]" />
            <devdoc>
                This attribute declares that a package provides a particular automation object.  The attributes on a 
                package do not control the behavior of the package, but they can be used by registration 
                tools to register the proper information with Visual Studio.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.#ctor(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideAutomationObjectAttribute.uex" path="docs/doc[@for=&quot;ProvideAutomationAttribute.ProvideAutomationObjectAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideAutomationObjectAttribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.Name">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideAutomationAttribute.uex" path="docs/doc[@for=&quot;ProvideAutomationObjectAttribute.Name&quot;]" />
            <devdoc>
                Returns the name of the automation object declared in this attribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.Description">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideAutomationObjectAttribute.uex" path="docs/doc[@for=&quot;ProvideAutomationObjectAttribute.Description&quot;]" />
            <devdoc>
                The description of the automation object declared in this attribute.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideAutomationObjectAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains information such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideAutomationObjectAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideAutomationObjectAttribute.uex" path="docs/doc[@for=&quot;ProvideAutomationObjectAttribute.Unregister&quot;]" />
            <devdoc>
            Removes the registration information from the registration context.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideBindingPathAttribute">
            <summary>
            This attribute registers a path that should be probed for candidate assemblies at assembly load time.
            
            For example:
              [...\VisualStudio\10.0\BindingPaths\{5C48C732-5C7F-40f0-87A7-05C4F15BC8C3}]
                "$PackageFolder$"=""
                
            This would register the "PackageFolder" (i.e. the location of the pkgdef file) as a directory to be probed
            for assemblies to load.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideBindingPathAttribute.SubPath">
            <summary>
            An optional SubPath to set after $PackageFolder$. This should be used
            if the assemblies to be probed reside in a different directory than
            the pkgdef file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideBindingRedirectionAttribute">
             <summary>
             This attribute registers a set of values that define a binding redirection.
             These values will be merged at startup into the CLR runtime configuration.
            
             For example:
               [$RootKey$\RuntimeConfiguration\dependentAssembly\bindingRedirection\{5C48C732-5C7F-40f0-87A7-05C4F15BC8C3}]
                 "Name"="AssemblyName"
                 "PublicKeyToken"="19ab8cb7287f414"
                 "Culture"="neutral"
                 "CodeBase"="$PackageFolder$\AssemblyName.dll"
                 "OldVersion"="1.0.0.0"
                 "NewVersion"="2.0.0.0"
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideBindingRedirectionAttribute.OldVersionLowerBound">
            <summary>
            Specifies the lower bound (inclusive) of the range of versions that
            will be redirected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideBindingRedirectionAttribute.OldVersionUpperBound">
            <summary>
            Specifies the upper bound (inclusive) of the range of versions that
            will be redirected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideBindingRedirectionAttribute.NewVersion">
            <summary>
            Specifies the version of the assembly to use instead of the originally
            requested version.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideBindingRedirectionAttribute.GenerateCodeBase">
            <summary>
            When false, no corresponding CodeBase element will be generated for the
            redirected assembly (used for assemblies in the GAC).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideBindingRedirectionAttribute.OldVersion">
            <summary>
            Range of versions that will be redirected. Not set directly, it is
            formed by setting <code>OldVersionLowerBound</code> and
            <code>OldVersionUpperBound</code>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideBindingRedirectionAttribute.SetValues(Microsoft.VisualStudio.Shell.RegistrationAttribute.Key)">
            <summary>
            Set values handled by this attribute in the given Key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideBindingRedirectionAttribute.GetGuidHashString">
            <summary>
            Gets the string that will be hased into the Id of the attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideBindingRedirectionAttribute.GetPathToKey">
            <summary>
            Get the path to the Key were the values for this attribute will be registered.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideBindingRedirectionAttribute.UpdateAssemblyInformation">
            <summary>
            Update all information not provided from the assembly to which this
            attribute is applied.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideBindingRedirectionAttribute.UpdateOldVersion">
            <summary>
            Update value of <code>OldVersion</code>, depending on the values assigned to
            <code>OldVersionLowerBound</code> and <code>OldVersionUpperBound</code>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideBindingRedirectionAttribute.ValidateAttributeInformation">
            <summary>
            Validate we have all the information that is needed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideCodeBaseAttribute">
            <summary>
            This attribute registers a set of values that define a dependent assembly tag
            with a CodeBase.
            These values will be merged at startup into the CLR runtime configuration.
            
            For example:
              [$RootKey$\RuntimeConfiguration\dependentAssembly\codeBase\{5C48C732-5C7F-40f0-87A7-05C4F15BC8C3}]
                "Name"="AssemblyName"
                "PublicKeyToken"="19ab8cb7287f414"
                "Culture"="neutral"
                "Version"="2.0.0.0"
                "CodeBase"="$PackageFolder$\AssemblyName.dll"
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideCodeBaseAttribute.Version">
            <summary>
            Specifies the version of the assembly to use instead of the originally
            requested version.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideCodeBaseAttribute.SetValues(Microsoft.VisualStudio.Shell.RegistrationAttribute.Key)">
            <summary>
            Set values handled by this attribute in the given Key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideCodeBaseAttribute.GetGuidHashString">
            <summary>
            Gets the string that will be hased into the Id of the attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideCodeBaseAttribute.GetPathToKey">
            <summary>
            Get the path to the Key were the values for this attribute will be registered.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideCodeBaseAttribute.UpdateAssemblyInformation">
            <summary>
            Update all information not provided from the assembly to which this
            attribute is applied.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideCodeBaseAttribute.ValidateAttributeInformation">
            <summary>
            Validate we have all the information that is needed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideCodeContainerProviderAttribute">
            <summary>
            Registers Code Container Provider information.
            Example of usage:
                [ProvideCodeContainerProvider(registeredName: "Test Provider",
                                              providerId: "{92f93057-f1fc-49df-870f-b3474046911a}"
                                              displayNamePackageGuid: "{92f93057-f1fc-49df-870f-b3474046911a}",
                                              imageMonikerGuid: "{92f93057-f1fc-49df-870f-b3474046911b}",
                                              imageMonikerId: 10,
                                              DisplayNameResourceId = "#100", 
                                              DisplayDetailResourceId = "#110")]
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideCodeContainerProviderAttribute.#ctor(System.String,System.String,System.String,System.Int32,System.String,System.String,System.Type)">
            <summary>
            Create a registration attribute that registers a code container provider
            </summary>
            <param name="registeredName">Locale invariant friendly name of the code container provider</param>
            <param name="providerId">The code container provider Guid</param>
            <param name="displayNamePackageGuid">Guid of the package containing the code container provider localized name</param>
            <param name="imageMonikerGuid">Registered image moniker guid for the code container provider</param>
            <param name="imageMonikerId">Registered image moniker id for the code container provider</param>
            <param name="displayNameResourceId">The resource id of the localized display name of the provider</param>
            <param name="displayDetailResourceId">The resource id of the localized display detail of the provider </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideCodeContainerProviderAttribute.RegisteredName">
            <summary>
            Gets the friendly name of the provider - This name is locale invariant
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideCodeContainerProviderAttribute.DisplayNameResourceId">
            <summary>
            Gets the resource id of the localized display name of the provider 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideCodeContainerProviderAttribute.DisplayDetailResourceId">
            <summary>
            Gets the resource id of the localized display detail of the provider 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideCodeContainerProviderAttribute.Package">
            <summary>
            Gets the package guid
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideCodeContainerProviderAttribute.ImageMonikerGuid">
            <summary>
            Gets the image moniker guid of the code container provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideCodeContainerProviderAttribute.ImageMonikerId">
            <summary>
            Gets the image moniker id of the code container provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideCodeContainerProviderAttribute.ExtensionProvidersKey">
            <summary>
            The path in registry where the Code Container Providers are registered
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideCodeContainerProviderAttribute.ExtensionProviderType">
            <summary>
            The type of the extension provider (the interface implemented)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideCodeContainerProviderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Called to register this attribute with the given context.  The context
            contains the location where the registration information should be placed.
            it also contains such as the type being registered, and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideCodeContainerProviderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this attribute
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideComponentDiagnosticsAttribute">
            <summary>
            Registers a component diagnostics provider and its associated view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideComponentDiagnosticsAttribute.ExtensionProvidersKey">
            <summary>
            The path in registry where the Diagnostics Providers are declared.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideComponentDiagnosticsAttribute.ExtensionProviderType">
            <summary>
            The type of the extension provider (the interface implemented)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideComponentDiagnosticsAttribute.ViewFactory">
            <summary>
            The GUID of the UI factory containing the view for this provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideComponentDiagnosticsAttribute.View">
            <summary>
            The element ID within the UI factory of the view for this provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideComponentDiagnosticsAttribute.Version">
            <summary>
            The version of the provider's data model
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideComponentDiagnosticsAttribute.IsDefaultView">
            <summary>
            Indicates whether the provider uses the default, general purpose view. If false, the
            provider specifies its own custom view.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideComponentDiagnosticsAttribute.#ctor(System.Type,System.String)">
            <summary>
            When applied to a Package, registers the package as a Component Diagnostics Provider with the default view.
            </summary>
            <param name="provider">The type implementing IVsDiagnosticsProvider</param>
            <param name="name">A short, non-localized human-readable name which appears in the Component Diagnostics tool window's list of available providers</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideComponentDiagnosticsAttribute.#ctor(System.Type,System.String,System.String,System.UInt32)">
            <summary>
            When applied to a Package, registers the package as a Component Diagnostics Provider with a custom view.
            </summary>
            <param name="provider">The type implementing IVsDiagnosticsProvider</param>
            <param name="name">A short, non-localized human-readable name which appears in the Component Diagnostics tool window's list of available providers</param>
            <param name="viewFactory">The GUID of the UI Factory containing the view for this provider's data model.</param>
            <param name="view">The ID of the element in the UI Factory</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideDependentAssemblyAttribute">
            <summary>
            Parent class for attributes that generate dependentAssembly entries.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideDependentAssemblyAttribute.AssemblyName">
            <summary>
            Name of the target assembly.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideDependentAssemblyAttribute.PublicKeyToken">
            <summary>
            A 16 character hex number which is the token part of the strong
            name of the assembly being redirected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideDependentAssemblyAttribute.Culture">
            <summary>
            A string that specifies the language and country/region of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideDependentAssemblyAttribute.CodeBase">
            <summary>
            A relative path from the $PackageFolder$, or an absolute path rooted
            from an environment variable substitution (format: %variable%).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideDependentAssemblyAttribute.Guid">
            <summary>
            Identifier of this attribute instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideDependentAssemblyAttribute.CurrentAssembly">
            <summary>
            Gets or sets the assembly which the generated dependentAssembly registry entry refers to.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideDependentAssemblyAttribute.SetValues(Microsoft.VisualStudio.Shell.RegistrationAttribute.Key)">
            <summary>
            Set values handled by this attribute in the given Key.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideDependentAssemblyAttribute.GetGuidHashString">
            <summary>
            Gets the string that will be hashed into the Id of the attribute.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideDependentAssemblyAttribute.GetPathToKey">
            <summary>
            Get the path to the Key were the values for this attribute will be registered.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideDependentAssemblyAttribute.TryParseVersion(System.String,System.Version@)">
            <summary>
            Try to parse a string into a Version.
            Unlike Version.TryParse, this method ensures that the input consists of four numbers,
            as opposed to considering the build and revision numbers optional.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideDependentAssemblyAttribute.UpdateAssemblyInformation">
            <summary>
            Update all information not provided from the assembly to which this
            attribute is applied.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideDependentAssemblyAttribute.ValidateAttributeInformation">
            <summary>
            Validate we have all the information that is needed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideDependentAssemblyAttribute.FormatPublicKeyToken(System.Byte[])">
            <summary>
            Format binary Public Key Token into an hexadecimal string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorAttributeBase.#ctor(System.Object)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideEditorAttributeBase" />
            </summary>
            <param name="factoryType">The factory type</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorAttributeBase.Factory">
            <summary>
            The editor factory guid.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorExtensionAttribute&quot;]" />
            <devdoc>
                This attribute associates a file extension to a given editor factory.  
                The editor factory may be specified as either a GUID or a type and 
                is placed on a package.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.#ctor(System.Object,System.String,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorExtensionAttribute.ProvideEditorExtensionAttribute&quot;]" />
            <devdoc>
                Creates a new attribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Extension">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorExtensionAttribute.Extension&quot;]" />
            <devdoc>
                The file extension of the file.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Priority">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorExtensionAttribute.Priority&quot;]" />
            <devdoc>
                The priority of this extension registration.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.ProjectGuid">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorExtensionAttribute.ProjectGuid&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.EditorFactoryNotify">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorExtensionAttribute.EditorFactoryNotify&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.TemplateDir">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorExtensionAttribute.TemplateDir&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.NameResourceID">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorExtensionAttribute.NameResourceID&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.DefaultName">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorExtensionAttribute.DefaultName&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.RegKeyName">
            <summary>
                   The reg key name of this extension.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.ProjectRegKeyName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                   The reg key name of the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]" />
            <devdoc>
            Unregister this editor.
            </devdoc>
            <param name="context" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorFactoryAttribute&quot;]" />
            <devdoc>
                This attribute declares that a package offers an editor factory.  A single 
                package can provide multiple editor factories.  If a package declares that 
                it provides an editor factory, it should create the factory and offer it 
                to Visual Studio in the Initialize method of Package.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.#ctor(System.Type,System.Int16)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorFactoryAttribute.ProvideEditorFactoryAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideEditorFactoryAttribute.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.#ctor(System.Type,System.Int16,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorFactoryAttribute.ProvideEditorFactoryAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideEditorFactoryAttribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.FactoryType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorFactoryAttribute.FactoryType&quot;]" />
            <devdoc>
                Returns the editor factory type this attribute declares.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.TrustLevel">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorFactoryAttribute.TrustLevel&quot;]" />
            <devdoc>
                Gets or Sets the trust level for the editor.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.DeferUntilIntellisenseIsReady">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorFactoryAttribute.DeferUntilIntellisenseIsReady&quot;]" />
            <devdoc>
                Gets or Sets the 'initialization behavior when intellisense is not ready' for the editor.
                If left unspecified, the behavior of the editor when intellisense is not ready will be determined by the environment.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.CommonPhysicalViewAttributes">
            <devdoc>
            Gets or sets the default attributes for physical views supported by the editor.
            Any physical views not listed in the PhysicalViewAttributes sub-key use these attributes.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.NameResourceID">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideEditorFactoryAttribute.NameResourceID&quot;]" />
            <devdoc>
                Returns the native resource ID for the factory name.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorFactoryAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFactoryAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideEditorFactoryAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideEditorFilenameAttribute">
            <summary>
            Associates a file name with a given editor factory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFilenameAttribute.#ctor(System.Object,System.String,System.Int32)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideEditorFilenameAttribute" />
            </summary>
            <param name="factoryType">The factory type</param>
            <param name="filename">The name of the file to associate with the editor factory</param>
            <param name="priority">The editor factory priority</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFilenameAttribute.Filename">
            <summary>
            The file specifier (either extension or filename)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFilenameAttribute.Priority">
            <summary>
            The priority of this file specifier registration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFilenameAttribute.DefaultName">
            <summary>
            The default name of the editor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFilenameAttribute.NameResourceID">
            <summary>
            The resource ID of the editor name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorFilenameAttribute.RegistryKeyName">
            <summary>
            The registry key name of this extension.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFilenameAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <summary>
             Called to register this attribute with the given context.  The context
             contains the location where the registration information should be placed.
             it also contains such as the type being registered, and path information.
            
             This method is called both for registration and unregistration.  The difference is
             that unregistering just uses a hive that reverses the changes applied to it.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorFilenameAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this editor.
            </summary>
            <param name="context">The registration context</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute">
            <summary>
            This attribute adds a logical view to the editor created by an editor factory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.#ctor(System.Object,System.String)">
            <summary>
            Creates a new RegisterEditorLogicalView attribute to register a logical
            view provided by your editor.
            </summary>
            <param name="factoryType">The type of factory; can be a Type, a GUID or a string representation of a GUID</param>
            <param name="logicalViewGuid">The guid of the logical view to register.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.FactoryType">
            <summary>
            Get the Guid representing the type of the editor factory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.LogicalView">
            <summary>
            Get the Guid representing the logical view
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.IsTrusted">
            <summary>
            Get or set the trust flag for this logical view. If a view is not trusted, it can not be opened
            from a wizard or automation code.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                It also contains other information such as the type being registered and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this logical view.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideEditorUIContextAttribute">
            <summary>
            Associates a UIContext with a given editor factory.  The editor can only be created
            when the UIContext is active.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorUIContextAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Initializes an instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideEditorUIContextAttribute" />
            </summary>
            <param name="factoryType">The factory type</param>
            <param name="uiContext">The UIContext Guid to associate with the editor factory</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorUIContextAttribute.UIContext">
            <summary>
            The UIContext to associate with the editor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorUIContextAttribute.RegistryKeyName">
            <summary>
            The registry key name of this extension.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorUIContextAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <summary>
             Called to register this attribute with the given context.  The context
             contains the location where the registration information should be placed.
             it also contains such as the type being registered, and path information.
            
             This method is called both for registration and unregistration.  The difference is
             that unregistering just uses a hive that reverses the changes applied to it.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorUIContextAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this editor.
            </summary>
            <param name="context">The registration context</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute">
            <summary>
            This attribute registers the package as an extender.  The GUID passed in determines
            what is being extended. The attributes on a package do not control the behavior of
            the package, but they can be used by registration tools to register the proper
            information with Visual Studio.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new ProvideExtenderAttribute.
            </summary>
            <param name="extendeeCatId">CatId of the element you want to extend.</param>
            <param name="extenderGuid">GUID of the extender.</param>
            <param name="extenderName">Name of the element you want to extend.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.ExtendeeCatId">
            <summary>
            The CatID of the element being extended.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.Extender">
            <summary>
            The Guid of the extender.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.ExtenderName">
            <summary>
            The name of the extender.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.RegKeyName">
            <summary>
            The reg key name of this Extender.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Called to register this attribute with the given context.  The context
            contains the location where the registration information should be placed.
            it also contains such as the type being registered, and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this Extender specification.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideExtensibleUIContextRuleAttribute">
            <summary>
                This attribute registers an UI context rule 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideExtensibleUIContextRuleAttribute.#ctor(System.String,System.String,System.UInt32)">
            <summary>
            Creates an extensible rule based UI context entry that is activated when any of the terms added by other
            extensions is true.
            
            The extenders would use the same GUID to create a new UI context rule with expression set to "*" to extend
            the rule created by this attribute.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideExtensibleUIContextRuleAttribute.ContextGuid">
            <summary>
            Context Guid for the UI context to be created
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideExtensibleUIContextRuleAttribute.Name">
            <summary>
            Diagnostics name for the UI context created
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideExtensibleUIContextRuleAttribute.Delay">
            <summary>
            Delay in ms to be applied before activating the UI context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideExtensibleUIContextRuleAttribute.RegKeyName">
            <summary>
            	The reg key name of this AutoLoad.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideExtensibleUIContextRuleAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                it also contains such as the type being registered, and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideExtensibleUIContextRuleAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this AutoLoad specification.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute">
            <summary>
            An attribute that declares that a package provides a file system provider.
            See <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute.RegValueNames">
            <summary>
            A class containing the names of the registry values for file system provider registration entries.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute.RegValueNames.Scheme">
            <summary>
            The registry value to store the URI scheme (e.g. "ftp") supported by the file system provider.
            If this registry value is present, then the service is considered a file system provider.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute.RegValueNames.UIContextGuid">
            <summary>
            The registry value to store the UI context Guid for the file system provider.
            If this registry value is present, then the file system provider is only loaded when the
            UI context is added.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute.RegValueNames.IsDisplayInfoProvider">
            <summary>
            The registry value to indicate whether the file system provider supports
            <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IUriDisplayInfoProvider" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute.RegValueNames.IsRemoteProvider">
            <summary>
            The registry value to indicate whether the file system provider supports
            <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute.SchemeRegValue">
            <summary>
            The registry value to store the URI scheme (e.g. "ftp") supported by the file system provider.
            If this registry value is present, then the service is considered a file system provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a <see cref="T:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute" /> instance
            </summary>
            <param name="scheme">
            The scheme supported by the file system provider.  The scheme should not contain any
            whitespace or include the schema delimiter "://".
            </param>
            <param name="name">The name of the service (same as <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name" />.)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a <see cref="T:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute" /> instance
            </summary>
            <param name="scheme">
            The scheme supported by the file system provider.  The scheme should not contain any
            whitespace or include the schema delimiter "://".
            </param>
            <param name="name">The name of the service (same as <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name" />.)</param>
            <param name="version">The version of the proffered service (same as <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Version" />). May be null.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute.Scheme">
            <summary>
            Gets the scheme supported by the file system provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute.UIContextGuid">
            <summary>
            Gets or sets the UIContext that will be active when the provider can be invoked.  If there
            are no restrictions on when the provider can be invoked, this is <see cref="F:System.Guid.Empty" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute.IsDisplayInfoProvider">
            <summary>
            Gets or sets a value that indicates whether the provider supports <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IUriDisplayInfoProvider" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideFileSystemProviderAttribute.IsRemoteProvider">
            <summary>
            Gets or sets a value that indicates whether the provider supports <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideKeyBindingTableAttribute.uex" path="docs/doc[@for=&quot;ProvideKeyBindingTableAttribute&quot;]" />
            <devdoc>
                This attribute declares that a package has a key binding table declared within its 
                CTO file.  This attribute is only used for registration purposes.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.#ctor(System.String,System.Int16)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideKeyBindingTableAttribute.uex" path="docs/doc[@for=&quot;ProvideKeyBindingTableAttribute.ProvideKeyBindingTableAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideKeyBindingTableAttribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.NameResourceID">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideKeyBindingTableAttribute.uex" path="docs/doc[@for=&quot;ProvideKeyBindingTableAttribute.NameResourceID&quot;]" />
            <devdoc>
                Returns the key binding table's name resource ID.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.TableGuid">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideKeyBindingTableAttribute.uex" path="docs/doc[@for=&quot;ProvideKeyBindingTableAttribute.TableGuid&quot;]" />
            <devdoc>
                Returns the key binding table guid.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.AllowNavKeyBinding">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideKeyBindingTableAttribute.uex" path="docs/doc[@for=&quot;ProvideKeyBindingTableAttribute.AllowNavKeyBinding&quot;]/*" />
            <summary>
            Set to true if the user can bind new commands of the nagivation keys
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideKeyBindingTableAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideKeyBindingTableAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideKeyBindingTableAttribute.uex" path="docs/doc[@for=&quot;ProvideKeyBindingTableAttribute.Unregister&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageCodeExpansionAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageCodeExpansionAttribute&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.#ctor(System.Object,System.String,System.Int32,System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageCodeExpansionAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageCodeExpansionAttribute.ProvideLanguageCodeExpansionAttribute&quot;]" />
            <devdoc>
            Registers a language service's support for code snippets.
            </devdoc>
            <param name="languageService">Language Service class. This can be a string with the value of the Guid or the Type of the language service.</param>
            <param name="languageName">Name of the language service.  Used in the registry so cannot be localized.</param>
            <param name="languageResourceId">Resource ID of the localized name of the language service.</param>
            <param name="languageIdentifier">String used to identify snippets and the snippets index file.</param>
            <param name="pathToSnippetIndexFile">Full path to a snippets index file.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.LanguageServiceSid">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageCodeExpansionAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageCodeExpansionAttribute.LanguageServiceSid&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.LanguageName">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageCodeExpansionAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageCodeExpansionAttribute.LanguageName&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.ShowRoots">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageCodeExpansionAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageCodeExpansionAttribute.ShowRoots&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.SearchPaths">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageCodeExpansionAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageCodeExpansionAttribute.SearchPaths&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.ForceCreateDirs">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageCodeExpansionAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageCodeExpansionAttribute.ForceCreateDirs&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageCodeExpansionAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageCodeExpansionAttribute.Register&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageCodeExpansionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageCodeExpansionAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageCodeExpansionAttribute.Unregister&quot;]" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageEditorToolsOptionCategoryAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageEditorOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageEditorToolsOptionCategoryAttribute&quot;]" />
            <devdoc>
            This attribute is used to declare a ToolsOption category for a language.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorToolsOptionCategoryAttribute.#ctor(System.String,System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageEditorOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageEditorToolsOptionCategoryAttribute.ProvideLanguageEditorToolsOptionCategoryAttribute&quot;]" />
            <devdoc>
            Creates a new ProvideLanguageEditorToolsOptionCategory attribute for a given language and category.
            </devdoc>
            <param name="languageName">The name of the language.</param>
            <param name="categoryName">The name of the category.</param>
            <param name="categoryResourceId">The id of the resource with the localized name for the category.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorToolsOptionCategoryAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageEditorOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageEditorToolsOptionCategoryAttribute.Register&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorToolsOptionCategoryAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageEditorOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageEditorToolsOptionCategoryAttribute.Unregister&quot;]" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageEditorOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageEditorOptionPageAttribute&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageEditorOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageEditorOptionPageAttribute.ProvideLanguageEditorOptionPageAttribute&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageEditorOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageEditorOptionPageAttribute.ProvideLanguageEditorOptionPageAttribute&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageEditorOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageEditorOptionPageAttribute.ProvideLanguageEditorOptionPageAttribute&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageEditorOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageEditorOptionPageAttribute.ProvideLanguageEditorOptionPageAttribute&quot;]" />
            <devdoc>
            Constructor for node with child option pages (to be added with
            additional ProvideLanguageEditorOptionPageAttribute).
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.LanguageName">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageEditorOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageEditorOptionPageAttribute.LanguageName&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.PageGuid">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageEditorOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageEditorOptionPageAttribute.PageGuid&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.Keywords">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageEditorOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageEditorOptionPageAttribute.Keywords&quot;]" />
            <devdoc>Same semantics as ProvideOptionPageAttribute.Keywords.</devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.IsServerAware">
            <summary>
            Gets or sets a value indicating whether the UI of this page shows settings that are
            synchronized with the server in a connected client-server scenario by using
            ISettingsManager3 or an API with similar functionality.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageEditorOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageEditorOptionPageAttribute.Register&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorOptionPageAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageEditorOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageEditorOptionPageAttribute.Unregister&quot;]" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageExtensionAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageExtensionAttribute&quot;]" />
            <devdoc>
                This attribute associates a file extension to a given editor factory.  
                The editor factory may be specified as either a GUID or a type and 
                is placed on a package.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.#ctor(System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageExtensionAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageExtensionAttribute.ProvideLanguageExtensionAttribute&quot;]" />
            <devdoc>
                Creates a new attribute.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.#ctor(System.Type,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageExtensionAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageExtensionAttribute.ProvideLanguageExtensionAttribute1&quot;]" />
            <devdoc>
                Creates a new attribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.Extension">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageExtensionAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageExtensionAttribute.Extension&quot;]" />
            <devdoc>
                The file extension of the file.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.LanguageService">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageExtensionAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageExtensionAttribute.LanguageService&quot;]" />
            <devdoc>
                The language service SID.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageExtensionAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageExtensionAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.#ctor(System.Object,System.String,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.ProvideLanguageServiceAttribute&quot;]" />
            <devdoc>
            Registers a language service.
            </devdoc>
            <param name="languageService" />
            <param name="strLanguageName" />
            <param name="languageResourceID" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.LanguageServiceSid">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.LanguageServiceSid&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.LanguageName">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.LanguageName&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.LanguageResourceID">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.LanguageResourceID&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.DebuggerLanguageExpressionEvaluator">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.DebuggerLanguageExpressionEvaluator&quot;]" />
            <devdoc>
            Establish an expression evaluator for debugging languages.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowCompletion">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.ShowCompletion&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowSmartIndent">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.ShowSmartIndent&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.RequestStockColors">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.RequestStockColors&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowHotURLs">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.ShowHotURLs&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.DefaultToNonHotURLs">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.DefaultToNonHotURLs&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.DefaultToInsertSpaces">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.DefaultToInsertSpaces&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowDropDownOptions">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.ShowDropDownOptions&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.SingleCodeWindowOnly">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.SingleCodeWindowOnly&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableAdvancedMembersOption">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.EnableAdvancedMembersOption&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.SupportCopyPasteOfHTML">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.SupportCopyPasteOfHTML&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableLineNumbers">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.EnableLineNumbers&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.HideAdvancedMembersByDefault">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.HideAdvancedMembersByDefault&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.CodeSense">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.CodeSense&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.MatchBraces">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.MatchBraces&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.QuickInfo">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.QuickInfo&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.ShowMatchingBrace">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.ShowMatchingBrace&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.MatchBracesAtCaret">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.MatchBracesAtCaret&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.MaxErrorMessages">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.MaxErrorMessages&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.CodeSenseDelay">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.CodeSenseDelay&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableAsyncCompletion">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.EnableAsyncCompletion&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableCommenting">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.EnableCommenting&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.EnableFormatSelection">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.EnableFormatSelection&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.AutoOutlining">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.AutoOutlining&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.FontColorDefaults">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.FontColorDefaults&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.LanguageServicesKeyName">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.LanguageServicesKeyName&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.Register&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLanguageServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideLanguageServiceAttribute.Unregister&quot;]" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.DebuggerLanguages.ExpressionEvaluator">
            <summary>
            Guid of the expression evaluator.
            </summary>
            <value>Guid</value>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageServiceAttribute.DebuggerLanguages.IsValid">
            <summary>
            Determine whether the debugger language options have been set.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLoadKeyAttribute.uex" path="docs/doc[@for=&quot;ProvideLoadKeyAttribute&quot;]" />
            <devdoc>
                This attribute registers a package load key for your package.  
                Package load keys are used by Visual Studio to validate that 
                a package can be loaded.    
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int16)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLoadKeyAttribute.uex" path="docs/doc[@for=&quot;ProvideLoadKeyAttribute.ProvideLoadKeyAttribute&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.MinimumEdition">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLoadKeyAttribute.uex" path="docs/doc[@for=&quot;ProvideLoadKeyAttribute.MinEdition&quot;]" />
            <devdoc>
                Minimum edition of Visual Studio on which
                VSPackage is loaded. This must be the literal 
                edition value provided by Microsoft when 
                obtaining your PLK.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.ProductVersion">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLoadKeyAttribute.uex" path="docs/doc[@for=&quot;ProvideLoadKeyAttribute.ProductVersion&quot;]" />
            <devdoc>
                Version of the product that this VSPackage
                implements.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.ProductName">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLoadKeyAttribute.uex" path="docs/doc[@for=&quot;ProvideLoadKeyAttribute.ProductName&quot;]" />
            <devdoc>
                Name of the product that this VSPackage 
                delivers. Note that one product might be
                comprised of multiple VSPackages, in which 
                case each will need its own PLK.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.CompanyName">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLoadKeyAttribute.uex" path="docs/doc[@for=&quot;ProvideLoadKeyAttribute.CompanyName&quot;]" />
            <devdoc>
                VSIP Partner/creator of the VSPackage. 
                The literal name (case-sensitive) provided 
                to Microsoft when registering for a PLK.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.ResourceId">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLoadKeyAttribute.uex" path="docs/doc[@for=&quot;ProvideLoadKeyAttribute.ResourceId&quot;]" />
            <devdoc>
                Resource ID for VSPackage load key.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.RegKeyName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Registry Key name for this package's load key information.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideLoadKeyAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideLoadKeyAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregisters this package's load key information
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideMenuResourceAttribute.uex" path="docs/doc[@for=&quot;ProvideMenuResourceAttribute&quot;]" />
            <devdoc>
                This attribute declares that a package offers menu resources.  When Visual Studio encounters 
                such a package it will merge the menu resource information in its menus.  The attributes on a 
                package do not control the behavior of the package, but they can be used by registration 
                tools to register the proper information with Visual Studio.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.#ctor(System.Int16,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideMenuResourceAttribute.uex" path="docs/doc[@for=&quot;ProvideMenuResourceAttribute.ProvideMenuResourceAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideMenuResourceAttribute.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.#ctor(System.String,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideMenuResourceAttribute.uex" path="docs/doc[@for=&quot;ProvideMenuResourceAttribute.ProvideMenuResourceAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideMenuResourceAttribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.ResourceID">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideMenuResourceAttribute.uex" path="docs/doc[@for=&quot;ProvideMenuResourceAttribute.ResourceID&quot;]" />
            <devdoc>
                Returns the native resource ID for the menu resource.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.Version">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideMenuResourceAttribute.uex" path="docs/doc[@for=&quot;ProvideMenuResourceAttribute.Version&quot;]" />
            <devdoc>
                Returns the version of this menu resource.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.IconMappingFilename">
            <summary>
            The path to a CSV file which maps the icon identifiers defined in the menu resource
            to image monikers.  The path is either a relative path implicitly rooted at $PackageFolder$,
            or an absolute path explicitly rooted at a directory defined by an environment variable
            (e.g. "%UserProfile%\dir1\dir2\MyMappingFile.csv").
            
            The format of the CSV file is:
            
                Icon guid, Icon id, Moniker guid, Moniker id
                b714fcf7-855e-4e4c-802a-1fd87144ccad,1,fda30684-682d-421c-8be4-650a2967058e,100
                {b714fcf7-855e-4e4c-802a-1fd87144ccad},2,{fda30684-682d-421c-8be4-650a2967058e},200
                etc...
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideMenuResourceAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to unregister this attribute with the given context.
            </summary>
            <param name="context">
                Contains the location where the registration information should be placed.
                It also contains other informations as the type being registered and path information.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.GetRegistryValueName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Returns the name of the registry value to use for <paramref name="context" />
            </summary>
            <param name="context">
            Contains the location where the registration information should be placed.
            It also contains other information such as the type being registered and path information.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.GetFullyQualifiedIconMappingFilename(System.String)">
            <summary>
            Returns the fully-qualified form of <paramref name="filename" />
            </summary>
            <param name="filename">The filename to fully qualify</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideMenuResourceAttribute.IsValidPath(System.String)">
            <summary>
            Determines whether <paramref name="path" /> is comprised entirely of valid path characters.
            </summary>
            <param name="path">The filename to validate</param>
            <returns>True if <paramref name="path" /> contains only valid characters, false if not.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideMSBuildTargetsAttribute">
            <summary>
            This attribute register a custom .targets files to the list of the
            targets known and trusted by MSBuild.
            
            The registry entries created are:
              [%RegistryRoot%\MSBuild\SafeImports]
            		"TargetsLabel"="PathToTheTargetsFile"
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideMSBuildTargetsAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new ProvideMSBuildTargets attribute to register a targets file
            to the list of the MSBuild safe imports.
            </summary>
            <param name="targetsLabel">Label to identify the targets.</param>
            <param name="targetsPath">Full path to the targets file.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideMSBuildTargetsAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                It also contains other information such as the type being registered and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideMSBuildTargetsAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this file extension.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideObjectAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideObjectAttribute.uex" path="docs/doc[@for=&quot;ProvideObjectAttribute&quot;]" />
            <devdoc>
                This attribute declares a class as creatable through Visual Studio.  
                A creatable class will be given an entry in Visual Studio's local 
                registry at install time.  The objectType parameter specifies the
                data type of the object that will be created.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.#ctor(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideObjectAttribute.uex" path="docs/doc[@for=&quot;ProvideObjectAttribute.ProvideObjectAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideObjectAttribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.ObjectType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideObjectAttribute.uex" path="docs/doc[@for=&quot;ProvideObjectAttribute.ObjectType&quot;]" />
            <devdoc>
                The type of object that can be created from this package.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.RegisterUsing">
            <summary>
            Select between specifying the Codebase entry or the Assembly entry in the registry.
            This can be overriden during registration
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideObjectAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregisters this attribute.
            </summary>
            <param name="context">
                Contains the location from where the registration information should be removed.
                It also contains other informations as the type being unregistered and path information.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideOptionDialogPageAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionDialogPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionDialogPageAttribute&quot;]" />
            <devdoc>
            This is the base class for all the attributes that are used to register an option page.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideOptionDialogPageAttribute.#ctor(System.Type,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionDialogPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionDialogPageAttribute.ProvideOptionDialogPageAttribute&quot;]" />
            <devdoc>
            This is the constructor of this attribute; it will set the type of the proffered option page.
            </devdoc>
            <param name="pageType" />
            <param name="pageNameResourceId" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionDialogPageAttribute.PageType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionDialogPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionDialogPageAttribute.PageType&quot;]" />
            <devdoc>
            Gets the type of the option page provided with this attribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionDialogPageAttribute.PageNameResourceId">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionDialogPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionDialogPageAttribute.PageNameResourceId&quot;]" />
            <devdoc>
            Gets the id of the resource storing the localized name of the option page.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionPageAttribute&quot;]" />
            <devdoc>
                This attribute declares that a package offers one or more option pages.  
                Option pages are exposed to the user through Visual Studio's Tools-&gt;Options 
                dialog.  The first parameter to this attribute is the type of option page, 
                which is a type that must derive from DialogPage.  Option page attributes 
                are read by the package class when Visual Studio requests a particular option 
                page GUID.  Package will walk the attributes and try to match the requested 
                GUID to a GUID on a type in the package. 
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.#ctor(System.Type,System.String,System.String,System.Int16,System.Int16,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionPageAttribute.ProvideOptionPageAttribute&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.#ctor(System.Type,System.String,System.String,System.Int16,System.Int16,System.Boolean,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionPageAttribute.ProvideOptionPageAttribute&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.#ctor(System.Type,System.String,System.String,System.Int16,System.Int16,System.Boolean,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionPageAttribute.ProvideOptionPageAttribute&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.#ctor(System.Type,System.String,System.String,System.Int16,System.Int16,System.Boolean,System.String[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionPageAttribute.ProvideOptionPageAttribute&quot;]" />
            <devdoc>
                The page type is a type that derives from
                DialogPage.  The nameResourceID
                parameter specifies a Win32 resource ID in the 
                stored in the native UI resource satellite
                that describes the name of this page.
                The categoryResourceID specifies the page
                category name.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.NoShowAllView">
            <devdoc>
                Set this to true for pages which should be shown ONLY in the "simplified" view,
                NOT in the "all pages" view.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.TypeId">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionPageAttribute.TypeId&quot;]" />
            <devdoc>
                Identity of this instance of the attribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.CategoryName">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionPageAttribute.CategoryName&quot;]" />
            <devdoc>
                The programmatic name for this category (non localized).
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.CategoryResourceID">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionPageAttribute.CategoryResourceID&quot;]" />
            <devdoc>
                The native resourceID of the category name for this page.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.PageName">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionPageAttribute.PageName&quot;]" />
            <devdoc>
                The programmatic name for this page (non localized).
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.SupportsAutomation">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionPageAttribute.SupportsAutomation&quot;]" />
            <devdoc>
                True if this page should be registered as supporting automation.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.SupportsProfiles">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionPageAttribute.SupportsProfiles&quot;]" />
            <devdoc>
                True if this page should be registered as supporting profiles.  
                Note: Only works if SupportsAutomation is true.  The ProvideProfile attribute 
                can also be used to specify profile support for Tools/Options pages.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.ProfileMigrationType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionPageAttribute.ProfileMigrationType&quot;]" />
            <devdoc>
                Specifies the migration action to take for this category.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.ProvidesLocalizedCategoryName">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionPageAttribute.ProvidesLocalizedCategoryName&quot;]" />
            <devdoc>
                True if the package this attribute is applied to contains the
                localized resources for the category name.
                False if the resources for the category come from another package
                and should be not be associated with this package.
                If unspecified, the default value is true.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.Keywords">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;ProvideOptionPageAttribute.Keywords&quot;]" />
            <devdoc>
                The searchable keywords for this options page.  Each keyword may be a literal string,
                a resource name/ID (prefixed with "@"/"#") pointing to a single keyword, or a resource name/ID
                (prefixed with "@"/"#") pointing to a semicolon-delimited list of keywords.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.Sort">
            <summary>
            The sort order for the option page.  Option pages are collated in the following order:
            
                1.  The General page
                2.  Pages with a Sort value, sorted from low to high.
                3.  Pages without a Sort value, sorted alphabetically.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.VisibilityCmdUIContexts">
            <summary>
            A semi-colon-delimited list of UIContext GUIDs.  The option page is visible when
            any UIContext in the list is active.  If this is not specified, the option page
            is always visible.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.CategoryPackageGuid">
            <summary>
            The ID of the package that owns the category under which this page is registered.
            If this is not set, the package is assumed to be the one to which this attribute is
            applied.  This property is only used if SupportsAutomation == true and
            SupportsProfiles == true.  Generate this from a Guid with Guid.ToString("B").
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.DescriptionResourceId">
            <summary>
            The ID of a resource containing the localized description of the page.  This property
            is only used if SupportsAutomation == true and SupportsProfiles == true.  The localized
            description appears in the import/export settings wizard.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.CategoryDescriptionResourceId">
            <summary>
            The ID of a resource containing the localized description of the page's parent category.
            This property is only used if SupportsAutomation == true and SupportsProfiles == true.
            The localized description appears in the import/export settings wizard.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.IsServerAware">
            <summary>
            Gets or sets a value indicating whether the UI of this page shows settings that are
            synchronized with the server in a connected client-server scenario by using
            ISettingsManager3 or an API with similar functionality.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideOptionPageAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]" />
            <devdoc>
            Called to remove this attribute from the given context.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvidePhysicalViewAttributesAttribute">
            <devdoc>
            This attribute declares the attributes for a physical view offered by an editor.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvidePhysicalViewAttributesAttribute.#ctor(System.String,Microsoft.VisualStudio.Shell.Interop.__VSPHYSICALVIEWATTRIBUTES)">
            <devdoc>
            Creates a ProvidePhysicalViewAttributesAttribute
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvidePhysicalViewAttributesAttribute.PhysicalView">
            <devdoc>
            The physical view
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvidePhysicalViewAttributesAttribute.Attributes">
            <devdoc>
            The attributes for the physical view
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProfileMigrationType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;ProfileMigrationType&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ProfileMigrationType.None">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;ProfileMigrationType.None&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ProfileMigrationType.PassThrough">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;ProfileMigrationType.PassThrough&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ProfileMigrationType.Custom">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;ProfileMigrationType.Custom&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideProfileAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;ProvideProfileAttribute&quot;]" />
            <devdoc>
                This attribute declares a class as a Visual Studio Profile item and
                places items in the VS registry for the User Settings.
                This may optionally specify a Tools Options page.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.#ctor(System.Type,System.String,System.String,System.Int16,System.Int16,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;ProvideProfileAttribute.ProvideProfileAttribute1&quot;]" />
            <devdoc>
            </devdoc>        
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.GroupName">
            <devdoc>
                The programmatic name for this Group (non localized).
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.GroupResourceID">
            <devdoc>
                The native resourceID of the group name for this page in the Profile.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.CategoryName">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;ProvideProfileAttribute.CategoryName&quot;]" />
            <devdoc>
                The programmatic name for this category (non localized).
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.CategoryResourceID">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;ProvideProfileAttribute.CategoryResourceID&quot;]" />
            <devdoc>
                The native resourceID of the category name for this page.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ObjectName">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;ProvideProfileAttribute.PageName&quot;]" />
            <devdoc>
                The programmatic name for this page (non localized).
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ObjectNameResourceID">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;ProvideProfileAttribute.PageNameResourceID&quot;]" />
            <devdoc>
                The native resourceID of the name for this page in the Profile.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ObjectType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;ProvideProfileAttribute.PageType&quot;]" />
            <devdoc>
                The type of this object.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.ResourcePackageGuid">
            <devdoc>
                The Guid of a package providing the resource strings (only need to specify if this a different package).
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.DescriptionResourceID">
            <devdoc>
                The native resourceID of the description for this page in the Profile.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.AlternateParent">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;ProvideProfileAttribute.AlternateParent&quot;]" />
            <devdoc>
                Allows the data to be parented under a different category in profile data.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.IsToolsOptionPage">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;ProvideProfileAttribute.IsToolsOptionPage&quot;]" />
            <devdoc>
                Is this a Tools-&gt;Option page.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.MigrationType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;ProvideProfileAttribute.MigrationType&quot;]" />
            <devdoc>
                Specifies the migration action to take for this category.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideProfileAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProfileAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]" />
            <devdoc>
            Called to remove this attribute from the given context.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute&quot;]" />
            <devdoc>
                This attribute declares that a package offers an project factory.  A single 
                package can provide multiple project factories.  If a package declares that 
                it provides an project factory, it should create the factory and offer it 
                to Visual Studio in the Initialize method of Package.
            
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.#ctor(System.Type,System.String,System.String,System.String,System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.ProvideProjectFactoryAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideProjectFactoryAttribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.Name">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.Name&quot;]/*" />
            <summary>
            The tree node name in the create new project and add new item dialogs.
            Take precendence over the nameResourceID value
            </summary>
            <value>Name to be used</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.SortPriority">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.SortPriority&quot;]/*" />
            <summary>
            Affect the order in which project are displayed in the new project dialog
            </summary>
            <value>Default is 100</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.FactoryType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.FactoryType&quot;]" />
            <devdoc>
                Returns the project factory type this attribute declares.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.DisplayProjectFileExtensions">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.DisplayProjectFileExtensionsResourceID&quot;]" />
            <devdoc>
                Returns the display project files extensions string.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.DefaultProjectExtension">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.DefaultProjectExtension&quot;]" />
            <devdoc>
                Returns the default project extension.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.PossibleProjectExtensions">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.PossibleProjectExtensions&quot;]" />
            <devdoc>
                Returns the default project extension.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.ProjectTemplatesDirectory">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.ProjectTemplatesDirectory&quot;]" />
            <devdoc>
                Returns the default project extension.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.FolderGuid">
            <summary>
            Get or Set the Folder guid.
            This can be used to control where the project node appear in the New Project dialog
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.LanguageVsTemplate">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.LanguageVsTemplate&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.DisplayProjectTypeVsTemplate">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.DisplayProjectTypeVsTemplate&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.DisableOnlineTemplates">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.DisableOnlineTemplates&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.ProjectSubTypeVsTemplate">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.ProjectSubTypeVsTemplate&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.NewProjectRequireNewFolderVsTemplate">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.NewProjectRequireNewFolderVsTemplate&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.ShowOnlySpecifiedTemplatesVsTemplate">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.ShowOnlySpecifiedTemplatesVsTemplate&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.TemplateGroupIDsVsTemplate">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.TemplateGroupIDsVsTemplate&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.TemplateIDsVsTemplate">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.TemplateIDsVsTemplate&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideProjectFactoryAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectFactoryAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectFactoryAttribute.Unregister&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectItemAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectItemAttribute&quot;]" />
            <devdoc>
                This attribute associates register items to be included in the Add New Item.  
                dialog for the specified project type. It is placed on a package.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.#ctor(System.Object,System.String,System.String,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectItemAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectItemAttribute.ProvideProjectItemAttribute&quot;]" />
            <devdoc>
                Creates a new attribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.ProjectFactoryType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectItemAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectItemAttribute.ProjectFactoryType&quot;]" />
            <devdoc>
                The Project factory guid.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.Priority">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectItemAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectItemAttribute.Priority&quot;]" />
            <devdoc>
                The priority of this item.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.TemplateDir">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectItemAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectItemAttribute.TemplateDir&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.ItemType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectItemAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectItemAttribute.ItemType&quot;]/*" />
            <summary>
            String describing the item type. This string is used as the folder in the
            left side of the "Add New Items" dialog.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.ProjectRegKeyName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                   The reg key name of the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectItemAttribute.uex" path="docs/doc[@for=&quot;ProvideProjectItemAttribute.Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideProjectItemAttributeProjectItem.uex" path="docs/doc[@for=&quot;ProvideProjectItemAttribute.Unregister&quot;]/*" />
            <summary>
            Unregister this editor.
            </summary>
            <param name="context" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideServiceAttributeBase">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideServiceAttribute&quot;]" />
            <devdoc>
                This attribute declares that a package provides a particular service.  The attributes on a 
                package do not control the behavior of the package, but they can be used by registration 
                tools to register the proper information with Visual Studio.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideServiceAttributeBase.#ctor(System.Object,System.String)">
            <param name="serviceType"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideServiceAttributeBase.ServiceName">
            <summary>
            Name of the service
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideServiceAttributeBase.Service">
            <summary>
            Type of the service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideServiceAttributeBase.ServiceType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideServiceAttribute.uex" path="docs/doc[@for=&quot;ProvideServiceAttribute.ServiceType&quot;]" />
            <devdoc>
                Returns the service's Guid declared in this attribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideServiceAttributeBase.IsAsyncQueryable">
            <summary>
            Deterimines if the service supports being retrieved via the async service provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideServiceAttributeBase.IsFreeThreaded">
            <summary>
            Deterimines if the service supports being retrieved and used from any thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideServiceAttributeBase.IsCacheable">
            <summary>
            Indicates to the shell service layer that it may cache the service. This is more of a formality for MPF provided services because MPF itself caches the service so your service creation callback is never called more than once.
            This will provide a slight performance improvement by eliminating a native -&gt; managed transition on service request. If you have no compelling reason to set this to false, this should be set to true. Future versions may
            default this to true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideServiceAttributeBase.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideServiceAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideServiceAttributeBase.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregisters this attribute.
            </summary>
            <param name="context">
                Contains the location from where the registration information should be removed.
                It also contains other informations as the type being unregistered and path information.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideSettingAttribute">
            <summary>
            Registers settings owned by a package.  All registered settings must be persisted via SVsSettingsPersistenceManager.
            Settings that are persisted using SVsSettingsPersistenceManager but not registered will be private by default.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ProvideSettingAttribute.RegistryConstants.EncodingEscapeChar">
            <summary>
            The character used to encode the setting name as a registry-compatible string.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideSettingAttribute.#ctor(System.String,Microsoft.VisualStudio.Shell.SettingScope,Microsoft.VisualStudio.Shell.SettingStorage)">
            <summary>
            Declares one or more settings provided by a package.
            </summary>
            <param name="name">The setting name.  Wildcards are supported, like MyCompany.MyFeature.*</param>
            <param name="scope">Indicates whether the setting should be shared and/or roamed.</param>
            <param name="storage">Indicates where the setting should be persisted.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideSettingAttribute.#ctor(System.String,Microsoft.VisualStudio.Shell.SettingScope,Microsoft.VisualStudio.Shell.SettingStorage,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Declares one or more settings provided by a package.
            </summary>
            <param name="name">The setting name.  Wildcards are supported, like MyCompany.MyFeature.*</param>
            <param name="scope">Indicates whether the setting should be shared and/or roamed.</param>
            <param name="storage">Indicates where the setting should be persisted.</param>
            <param name="packageGuid">The GUID of the owning package, as a string.</param>
            <param name="nameResourceId">The ID of a localized resource representing the setting name.</param>
            <param name="descriptionResourceId">The ID of a localized resource representing the setting description.</param>
            <param name="searchKeywordsResourceId">The ID of a localized resource containing words that should be used for searching.</param>
            <param name="jsonSchemaResourceId">The ID of a localized resource containing the JSON schema for this setting. See https://json-schema.org/.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideSettingAttribute.IsRemotable">
            <summary>
            Gets or sets a value controlling whether this setting will be applied
            to the remote instance instead of the local instance when connected.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideSettingAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Called to register this attribute with the given context.  The context
            contains the location where the registration information should be placed.
            it also contains such as the type being registered, and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideSettingAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this attribute
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideSourceControlProviderAttribute">
            <summary>
            Registers Scc provider information.
            Example of usage:
                [ProvideSourceControlProvider(registeredName: "Test Provider",
                                              displayNameResourceId: "#100",
                                              displayNamePackage: "{92f93057-f1fc-49df-870f-b3474046911a}",
                                              registeredProvider: "{92f93057-f1fc-49df-870f-b3474046911b}",
                                              sccProviderService: "{92f93057-f1fc-49df-870f-b3474046911c}",
                                              IsPublishSupported = true)]
            Example registration:
                [HKEY_CURRENT_USER\SOFTWARE\Microsoft\VisualStudio\14.0_Config\SourceControlProviders\{92f93057-f1fc-49df-870f-b3474046911b}]
                @="Test Provider"
                "Service"="{92f93057-f1fc-49df-870f-b3474046911c}"
                "IsPublishSupported"=dword:00000001
            
                [HKEY_CURRENT_USER\SOFTWARE\Microsoft\VisualStudio\14.0_Config\SourceControlProviders\{92f93057-f1fc-49df-870f-b3474046911b}\Name]
                @="#100"
                "Package"="{92f93057-f1fc-49df-870f-b3474046911a}"
                
            NOTE: All Guids used above are for illustration purposes only. Also, the version is assumed to be 14.0 above.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideSourceControlProviderAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a registration attribute that registers an Scc provider
            </summary>
            <param name="registeredName">Locale invariant friendly name of the Scc provider</param>
            <param name="displayNameResourceId">The display name resource id</param>
            <param name="registeredProvider">Scc provider Guid</param>
            <param name="displayNamePackage">Guid of the package containing the Scc provider localized name</param>
            <param name="sccProviderService">Guid of the Scc provider service</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideSourceControlProviderAttribute.RegisteredName">
            <summary>
            Gets the friendly name of the provider - This name is locale invariant
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideSourceControlProviderAttribute.DisplayNameResourceId">
            <summary>
            Gets the resource id of the display name of the provider 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideSourceControlProviderAttribute.RegisteredProvider">
            <summary>
            Gets the guid identifying the provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideSourceControlProviderAttribute.DisplayNamePackage">
            <summary>
            Gets the guid of the package containing the display name of the provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideSourceControlProviderAttribute.SccProviderService">
            <summary>
            Gets the guid of the provider's service
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideSourceControlProviderAttribute.IsPublishSupported">
            <summary>
            Gets/Sets whether this Scc provider supports publishing to a remote host
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideSourceControlProviderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Called to register this attribute with the given context.  The context
            contains the location where the registration information should be placed.
            it also contains such as the type being registered, and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideSourceControlProviderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this attribute
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideStaticToolboxGroupAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideStaticToolboxGroupAttribute.uex" path="docs/doc[@for=&quot;ProvideStaticToolboxGroupAttribute&quot;]" />
            <devdoc>
                This attribute declares a toolbox group which will be created on toolbox initialization.
                The group may optionally contain items created with the ProvideStaticToolboxItem attribute.
                See comments on IVsToolboxItemProvider in vsshell100.idl for more details.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideStaticToolboxGroupAttribute.#ctor(System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideStaticToolboxGroupAttribute.uex" path="docs/doc[@for=&quot;ProvideStaticToolboxGroupAttribute.ProvideStaticToolboxGroupAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideStaticToolboxGroupAttribute.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideStaticToolboxGroupAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideStaticToolboxGroupAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
            <devdoc>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                It also contains such as the type being registered, and path information.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideStaticToolboxGroupAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideStaticToolboxGroupAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]" />
            <devdoc>
                Removes the registration data.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideStaticToolboxItemAttribute.uex" path="docs/doc[@for=&quot;ProvideStaticToolboxItemAttribute&quot;]" />
            <devdoc>
                This attribute declares a toolbox item which the toolbox will read from the registry.
                See comments on IVsToolboxItemProvider in vsshell100.idl for more details.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideStaticToolboxItemAttribute.uex" path="docs/doc[@for=&quot;ProvideStaticToolboxItemAttribute.ProvideStaticToolboxItemAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideStaticToolboxItemAttribute.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideStaticToolboxItemAttribute.uex" path="docs/doc[@for=&quot;ProvideStaticToolboxItemAttribute.ProvideStaticToolboxItemAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideStaticToolboxItemAttribute with multitargeting metadata.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideStaticToolboxItemAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
            <devdoc>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                It also contains such as the type being registered, and path information.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideStaticToolboxItemAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideStaticToolboxItemAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]" />
            <devdoc>
                Removes the registration data.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxFormatAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxFormatAttribute&quot;]" />
            <devdoc>
                This attribute declares a single toolbox clipboard format that
                the package supports.  Multiple attributes can be added to
                a package to allow more than one clipboard format.  By
                providing this attribute on your package, you enable
                users to drag data objects containing this format onto the
                toolbox. You must still handle the drop notifications 
                yourself.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute.#ctor(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxFormatAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxFormatAttribute.ProvideToolboxFormatAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideToolboxFormatAttribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute.Format">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxFormatAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxFormatAttribute.Format&quot;]" />
            <devdoc>
                Returns the clipboard format to enable for this package.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemConfigurationAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemConfigurationAttribute&quot;]" />
            <devdoc>
               Registers a confugration object for toolbox items.
               ProvideToolboxItemConfigurationAttribute attached to the package.  This attribute will register 
               the object under the local CLSID hive in the VS registry and also add a reference to the GUID in
               VSREGROOT\ToolboxItemConfiguration.  The data contained in this registry entry
               is as follows:
            
               VSREGROOT\ToolboxItemConfiguration
                   AssemblyName
                        ConfigurationTypeName={guid}
            
               As an example:
            
               VSREGROOT\ToolboxItemConfiguration
                   System, Version=2.0.3500
                       CompactFrameworkProvider = {GUID}
            
            
               The assembly name is parsed and the various keys are matched.  Keys can have a
               "*" in them to be taken as wildcards.  So, for example, to cover all versions
               of System.WindowsForms you would specify:
            
               System.Windows.Forms, Version=*, PublicKeyToken=969...
            
               The assembly name may also be a wildcard to load the configuration object
               for all toolbox items (not recommended).  
            
               Place this attribute on your package, and then place one or more ProvideAssemblyFilter attributes
               on the class that implements IConfigureToolboxItem.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute.#ctor(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemConfigurationAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemConfigurationAttribute.ProvideToolboxItemConfigurationAttribute&quot;]" />
            <devdoc>
               Constructor
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute.ObjectType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemConfigurationAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemConfigurationAttribute.ConfigurationType&quot;]" />
            <devdoc>
               The configuration type to use.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemConfigurationAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemConfigurationAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]" />
            <devdoc>
            Called to remove this attribute from the given context.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute&quot;]" />
            <devdoc>
            This attribute is used to define a "toolbox item type".  Toolbox item types are exposed as
            pages in the "Choose Toolbox Items" dialog (where one page is created for each type).
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.#ctor(System.String,System.String,System.Type,System.Type,System.String[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.ProvideToolboxItemDiscoveryAttribute&quot;]" />
            <param name="name">
            The name of this item type (e.g. ".NET Framework Components").  If localizable, this should be a resource ID.
            </param>
            <param name="helpKeyword">The help keyword for this item type.</param>
            <param name="discoveryType">The type of a class implementing IToolboxItemDiscovery.</param>
            <param name="itemCreatorType">The type of a class implementing IToolboxItemCreator.</param>
            <param name="frameworksToEnumerate">
            A collection of framework IDs indicating the frameworks that should be enumerated to populate the list
            in this item type's "Choose Toolbox Items" page.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.TypeId">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.TypeId&quot;]" />
            <devdoc>
            Identity of this instance of the attribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.PlatformsToEnumerate">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.PlatformsToEnumerate&quot;]" />
            <summary>
            A collection of platform IDs indicating the platroms that should be enumerated to populate the list
            in this item type's "Choose Toolbox Items" page.
            </summary>
            <value>Default is null</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.VisibilityUIContexts">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.VisibilityUIContexts&quot;]" />
            <devdoc>
            This provides a list of UIContexts that controls the visibility of the tab. The tab will be hidden if none of the UIContext are set. Only non-dynamic
            UI context are supported (e.g. OsWindows8OrHigherContext). Use of dynamic context context like NoSolutionContext is not supported and will result in
            non-deterministic behaviors.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.ItemDiscoveryType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.ItemDiscoveryType&quot;]" />
            <devdoc>
            Gets the type of the IToolboxItemDiscovery implementation.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.ItemCreatorType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.ItemCreatorType&quot;]" />
            <devdoc>
            Gets the type of the IToolboxItemCreator implementation.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.AppDomainCreatorType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.AppDomainCreatorType&quot;]" />
            <devdoc>
            Gets or sets the type of the IToolboxAppDomainControl implementation.  Set this if you want control over the
            appdomain creation parameters for the appdomain in which your IToolboxItemDiscovery implementation is created.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.HelperObjectType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.HelperObjectType&quot;]" />
            <devdoc>
            Gets or sets the type of the helper object which will be passed to your IToolboxItemDiscovery implementation's
            constructor.  The type must derive from MarshalByRefObject or be serializable because it will be passed across
            an appdomain boundary.  This can be left unset if you don't need a helper object.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.HideAssemblyName">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.HideAssemblyName&quot;]" />
            <devdoc>
            Indicate whether the current tab wants to hide the assembly name column in Choose Toolbox Item.
            </devdoc>
            <value>Default is false.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.HideDirectory">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.HideDirectory&quot;]" />
            <devdoc>
            Indicate whether the current tab wants to hide the directory column in Choose Toolbox Item.
            </devdoc>
            <value>Default is false.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.HideNamespace">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.HideNamespace&quot;]" />
            <devdoc>
            Indicate whether the current tab wants to hide the namespace column in Choose Toolbox Item.
            </devdoc>
            <value>Default is false.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.HideVersion">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.HideVersion&quot;]" />
            <devdoc>
            Indicates whether the current tab wants to hide the version column in Choose Toolbox Items.
            </devdoc>
            <value>Default is false.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.HideCulture">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.HideVersion&quot;]" />
            <devdoc>
            Indicates whether the current tab wants to hide the language information in Choose Toolbox Items.
            </devdoc>
            <value>Default is false.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.PageOrder">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.PageOrder&quot;]" />
            <devdoc>
            Gets or sets the sort order of the page.  If zero, the page will be left unsorted, so
            it will appear after all pages with nonzero order values.  Pages with equal order
            values will be sorted alphabetically by name.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.FileFilter">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemDiscoveryAttribute.FileFilter&quot;]" />
            <devdoc>
            Gets or sets the file filter for the browse dialog. The string should point to a resource id (e.g. "@1234")
            that resolves to a string similar to "Executables (*.dll; *.exe)|*.dll;*.exe|All Files (*.*)|*.*". 
            Please note that if this string doesn't start with "@", then toolbox will use the provided string as is,
            instead of doing a resource lookup.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.ItemPropertyIdsAndNames">
            <summary>
            Gets a collection of extra columns (as ID / DisplayName pairs) to display in the dialog.
            </summary>
            <remarks>
            By default, the Choose Toolbox Items dialog will display the following properties for each item:
            name, namespace, assembly, directory, language, and icon.  If you are satisfied with that set,
            you can leave this property unset; otherwise, set it to a collection of string pairs which
            will be used to create additional columns in the list view.  Each pair contains a non-localized
            ID and a localized name.  The non-localized IDs will be passed to IToolboxItemInfo.GetPropertyValue
            to retrieve each item's value for each column.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemDiscoveryAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemDiscoveryAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]" />
            <devdoc>
            Called to remove this attribute from the given context.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemsAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemsAttribute&quot;]" />
            <devdoc>
                This attribute declares that a package offers toolbox items and should be provided time 
                during setup to install these items.  The attributes on a package do not control the 
                behavior of the package, but they can be used by registration tools to register the 
                proper information with Visual Studio.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.#ctor(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemsAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemsAttribute.ProvideToolboxItemsAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideToolboxItemsAttribute.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.#ctor(System.Int32,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemsAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemsAttribute.ProvideToolboxItemsAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideToolboxItemsAttribute.
                If needsCallbackAfterReset is true, then it will write out the "needsCallbackAfterReset" regkey which
                tells the shell we have transient items to add and need to be called after resetdefaults is complete.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Version">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemsAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxItemsAttribute.Version&quot;]" />
            <devdoc>
                Returns the version of items on the toolbox.
                The first time a package get loaded after this version change,
                the ToolboxInitialized event will be generated.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.NeedsCallBackAfterReset">
            <summary>
            Setting this to true will force a ToolboxInitialized event after each
            toolbox reset.
            This can be used when developing your package to force the toolbox to
            ask the list of items to the package everytime (in case it has changed).
            For shipped products, it is best to leave it to false so that the cache can
            be used for better performances. Some scenario (such as item list that cannot
            cannot be persisted to the cache) may need to have this flag set to true
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemsAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
            <devdoc>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                it also contains such as the type being registered, and path information.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxItemsAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]" />
            <devdoc>
            Removes the registration data.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxPageAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxPageAttribute&quot;]" />
            <devdoc>
                This attribute declares that a package offers one or more toolbox pages.  Toolbox pages are 
                exposed to the user through Visual Studio's customize toolbox dialog.  A toolbox page must 
                derive from DialogPage. Toolbox page 
                attributes are read by the package class when Visual Studio requests a particular property 
                page GUID.  Package will walk the attributes and try to match the requested GUID to a 
                GUID on a type in the package. 
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.#ctor(System.Type,System.Int16)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxPageAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxPageAttribute.ProvideToolboxPageAttribute&quot;]" />
            <devdoc>
                The page type is a type that implements
                IWin32Window.  The nameResourceID
                parameter specifies a Win32 resource ID in the 
                stored in the native UI resource satellite
                that describes the name of this page.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.TypeId">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxPageAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxPageAttribute.TypeId&quot;]" />
            <devdoc>
            Identity of this instance of the attribute.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.#ctor(System.Type,System.Int16,System.Int16)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxPageAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxPageAttribute.ProvideToolboxPageAttribute1&quot;]" />
            <devdoc>
                The page type is a type that implements
                IWin32Window.  The nameResourceID
                parameter specifies a Win32 resource ID in the 
                stored in the native UI resource satellite
                that describes the name of this page.  Page order is 
                optional and defaults to zero.  If non-zero, a registry entry will be
                created named DefaultTbx, which specifies the sort order of the
                toolbox pages.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.#ctor(System.Type,System.Int16,System.Int16,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxPageAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxPageAttribute.ProvideToolboxPageAttribute1&quot;]" />
            <devdoc>
                The page type is a type that implements
                IWin32Window.  The nameResourceID
                parameter specifies a Win32 resource ID in the 
                stored in the native UI resource satellite
                that describes the name of this page.  Page order is 
                optional and defaults to zero.  If non-zero, a registry entry will be
                created named DefaultTbx, which specifies the sort order of the
                toolbox pages.
                Helpkeyword is a keyword exposed to F1 help (support for this was added by joshs -- reference VS Whidbey#262176)
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.HelpKeyword">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxPageAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxPageAttribute.HelpKeyword&quot;]" />
            <devdoc>
            Returns the help keyword associated with this toolbox page.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.PageOrder">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxPageAttribute.uex" path="docs/doc[@for=&quot;ProvideToolboxPageAttribute.PageOrder&quot;]" />
            <devdoc>
                The sort order of the page or zero if this page should be left unsorted.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxPageAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxPageAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolboxPageAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]" />
            <devdoc>
            Called to remove this attribute from the given context.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute&quot;]/*" />
            <devdoc>
            This attribute declares that a package own a tool window.  Visual Studio uses this 
            information to handle the positioning and persistence of your window. The attributes on a 
            package do not control the behavior of the package, but they can be used by registration 
            tools to register the proper information with Visual Studio.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.#ctor(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.ProvideToolWindowAttribute&quot;]/*" />
            <devdoc>
            Constructor
            Creates a new RegisterToolWindowResourceAttribute.
            </devdoc>
            <param name="toolType">Type of the tool window</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Style">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.Style&quot;]/*" />
            <devdoc>
            Default DockStyle for the ToolWindow
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.PositionX">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.PositionX&quot;]/*" />
            <devdoc>
            Default horizontal component of the position for the to top left corner of the ToolWindow
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.PositionY">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.PositionY&quot;]/*" />
            <devdoc>
            Default vertical component of the position for the to top left corner of the ToolWindow
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Width">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.Width&quot;]/*" />
            <devdoc>
            Default width of the ToolWindow when floating
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Height">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.Height&quot;]/*" />
            <devdoc>
            Default height of the ToolWindow when floating
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.DockedWidth">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.DockedWidth&quot;]/*" />
            <devdoc>
            Default width of the ToolWindow when docked
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.DockedHeight">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.DockedHeight&quot;]/*" />
            <devdoc>
            Default height of the ToolWindow when docked
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Orientation">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.Orientation&quot;]/*" />
            <devdoc>
            Default Orientation for the ToolWindow, relative to the window specified by the Window Property
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.ToolType">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.ToolType&quot;]/*" />
            <devdoc>
            Type of the ToolWindow
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Window">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.Window&quot;]/*" />
            <devdoc>
            Default Window that the ToolWindow will be docked with
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.MultiInstances">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.MultiInstances&quot;]/*" />
            <devdoc>
            Default Window that the ToolWindow will be docked with
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Transient">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.Transient&quot;]/*" />
            <devdoc>
            Set to true if you want to prevent window from loading on IDE start up
            Default is false which makes the toolwindow persistent (if the IDE is closed
            while the window is showing, the window will show up the next time the IDE
            starts).
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.DocumentLikeTool">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.DocumentLikeTool&quot;]/*" />
            <devdoc>
            Set to true if you want a tool window that behaves and has a lifetime like a document.
            The tool window will only be MDI or floating and will remain visible in its position across all layout changes
            until manualy closed by the user at which point it will be destroyed.  
            This flag implies DontForceCreate and destructive multi instance.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.RegKeyName">
            <devdoc>
                   The reg key name of this Tool Window.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.Register&quot;]/*" />
            <devdoc>
            Called to register this attribute with the given context.  The context
            contains the location where the registration information should be placed.
            it also contains such as the type being registered, and path information.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideToolWindowAttribute.uex" path="docs/doc[@for=&quot;ProvideToolWindowAttribute.Unregister&quot;]/*" />
            <devdoc>
            Unregister this Tool Window.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.StyleToString(Microsoft.VisualStudio.Shell.VsDockStyle)">
            <devdoc>
            Convert enum to string
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.OrientationToString(Microsoft.VisualStudio.Shell.ToolWindowOrientation)">
            <devdoc>
            Convert enum to string
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute">
            <summary>
            Declares that a tool window is should be visible when a certain command
            UI guid becomes active.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.#ctor(System.Object,System.String)">
            <summary>
            Creates a new attribute for a specific tool window and a command UI guid.
            </summary>
            <param name="toolWindow">The tool window Type or Guid (as string).</param>
            <param name="commandUIGuid">The command UI guid that controls the tool window's visibility.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.#ctor(System.Object,System.String,System.Boolean)">
             <summary>
             Creates a new attribute for a specific tool window and a command UI guid.
             </summary>
             <param name="toolWindow">The tool window Type or Guid (as string).</param>
             <param name="commandUIGuid">The command UI guid that controls the tool window's visibility.</param>
             <param name="bringToFront">
             True if the tool window should always be brought to the front when shown via a command UI guid.
             False if it should only be shown without being brought to the front when shown via a command UI guid.
            
             Using a constructor without this parameter will result in the default behavior of bringing the tool window
             to the front the first time it's shown via a command UI guid, then subsequent triggers will either "bring
             to front" or "show only" based on whether the tool window was active the last time it was hidden after the
             command UI guid was deactivated.
             </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.CommandUIGuid">
            <summary>
            Get the command UI guid controlling the visibility of the tool window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.Name">
            <summary>
            Get or Set name of the toolwindow.
            This does not impact the runtime behavior.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.BringToFront">
            <summary>
            True if the tool window should always be brought to the front when shown via a command UI guid.
            False if it should only be shown without being brought to the front when shown via a command UI guid.
            Null if it should use the default behavior.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Called to register this attribute with the given context.  The context
            contains the location where the registration information should be placed.
            it also contains such as the type being registered, and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this visibility entry.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideUIContextRuleAttribute">
            <summary>
                This attribute registers an UI context rule 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideUIContextRuleAttribute.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.UInt32)">
            <summary>
            Creates a rule based UI context entry that is activated when the expression is evaluated to true
            </summary>
            <remarks>
            An example rule would be:
            
            ContextGuid: {e551fe48-4b78-4dc4-9ddc-183cbfea7d5b}
            Expression: VB | CS
            TermNames: { VB, CS }, 
            TermValues: { ActiveEditorContentType:Basic, ActiveEditorContentType:CSharp }
            Delay: 500
            
            This would create a new UI context that is activated 500 ms after when active editor is either a C# or VB file 
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideUIContextRuleAttribute.ContextGuid">
            <summary>
            Context Guid for the UI context to be created
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideUIContextRuleAttribute.Name">
            <summary>
            Diagnostics name for the UI context created
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideUIContextRuleAttribute.Expression">
            <summary>
            Expression to be evaluated for determining state of the UI context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideUIContextRuleAttribute.TermNames">
            <summary>
            List of Term names used in the expression
            </summary>
            <remarks>The order must match the list in TermValues</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideUIContextRuleAttribute.TermValues">
            <summary>
            Values of terms used in the expression
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideUIContextRuleAttribute.Delay">
            <summary>
            Delay in ms to be applied before activating the UI context
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideUIContextRuleAttribute.RegKeyName">
            <summary>
            	The reg key name of this AutoLoad.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideUIContextRuleAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                it also contains such as the type being registered, and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideUIContextRuleAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this AutoLoad specification.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideViewAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideViewAttribute.uex" path="docs/doc[@for=&quot;ProvideViewAttribute&quot;]" />
            <devdoc>
                This attribute declares that an editor factory offers a particular logical view.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideViewAttribute.#ctor(Microsoft.VisualStudio.Shell.LogicalView,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideViewAttribute.uex" path="docs/doc[@for=&quot;ProvideViewAttribute.ProvideViewAttribute&quot;]" />
            <devdoc>
                Creates a new ProvideViewAttribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideViewAttribute.LogicalView">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideViewAttribute.uex" path="docs/doc[@for=&quot;ProvideViewAttribute.LogicalView&quot;]" />
            <devdoc>
                Returns the logical view in this attribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideViewAttribute.PhysicalView">
            <!-- Failed to insert some or all of included XML --><include file="doc\ProvideViewAttribute.uex" path="docs/doc[@for=&quot;ProvideViewAttribute.PhysicalView&quot;]" />
            <devdoc>
                Returns the physical view that is mapped to the logical view.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideXmlEditorChooserBlockSxSWithXmlEditorAttribute">
            <summary>
            Used to indicate that a custom XML designer should not allow SxS editing
            with the standard text-based XML editor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideXmlEditorChooserBlockSxSWithXmlEditorAttribute.#ctor(System.String,System.Object)">
            <summary>
            Constructor for ProvideXmlEditorChooserBlockSxSWithXmlEditorAttribute.
            </summary>
            <param name="name">The registry key name for your XML editor. For example "RESX", "Silverlight", "Workflow", etc...</param>
            <param name="editorFactory">A Type, Guid, or String object representing the editor factory.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideXmlEditorChooserDesignerViewAttribute">
            <summary>
            Used to provide registration information to the XML Chooser
            for a custom XML designer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideXmlEditorChooserDesignerViewAttribute.#ctor(System.String,System.String,System.Object,System.Int32)">
            <summary>
            Constructor for ProvideXmlEditorChooserDesignerViewAttribute.
            </summary>
            <param name="name">The registry keyName for your XML editor. For example "RESX", "Silverlight", "Workflow", etc...</param>
            <param name="extension">The file extension for your custom XML type (e.g. "xaml", "resx", "xsd").</param>
            <param name="defaultLogicalViewEditorFactory">A Type, Guid, or String object representing the editor factory for the default logical view.</param>
            <param name="xmlChooserPriority">The priority of the extension in the XML Chooser. This value must be greater than the extension's priority value for the XML designer's EditorFactory.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideXmlEditorChooserDesignerViewAttribute.Namespace">
            <summary>
            The XML Namespace used in documents that this editor supports. If default namespace and namespace
            specified, a match on either will qualify the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideXmlEditorChooserDesignerViewAttribute.DefaultNamespace">
            <summary>
            The XML root element default namespace used in documents that this editor supports. If default namespace
            and namespace specified, a match on either will qualify the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideXmlEditorChooserDesignerViewAttribute.MatchExtensionAndNamespace">
            <summary>
            Boolean value indicating whether the XML chooser should match on both the file extension
            and the Namespace. If false, the XML chooser will match on either the extension or the 
            Namespace. If default namespace and namespace specified, a match on either will qualify the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideXmlEditorChooserDesignerViewAttribute.IsDataSet">
            <summary>
            Special value used only by the DataSet designer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideXmlEditorChooserDesignerViewAttribute.DebuggingLogicalViewEditor">
            <summary>
            The editor factory to associate with the debugging logical view
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideXmlEditorChooserDesignerViewAttribute.CodeLogicalViewEditor">
            <summary>
            The editor factory to associate with the code logical view
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideXmlEditorChooserDesignerViewAttribute.DesignerLogicalViewEditor">
            <summary>
            The editor factory to associate with the designer logical view
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideXmlEditorChooserDesignerViewAttribute.TextLogicalViewEditor">
            <summary>
            The editor factory to associate with the text logical view
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute">
            <summary>
                This attribute registers the package as an extender.  The GUID passed in determines
                what is being extended. The attributes on a package do not control the behavior of
                the package, but they can be used by registration tools to register the proper
                information with Visual Studio.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.#ctor(System.String)">
            <summary>
                Specify that the package should get loaded when this context is active.
            </summary>
            <param name="cmdUiContextGuid">Context which should trigger the loading of your package.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.LoadGuid">
            <summary>
            Context Guid which triggers the loading of the package.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.RegKeyName">
            <summary>
                   The reg key name of this AutoLoad.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                it also contains such as the type being registered, and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterAutoLoadAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this AutoLoad specification.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;RegisterEditorExtensionAttribute&quot;]" />
            <devdoc>
                This attribute associates a file extension to a given editor factory.  
                The editor factory may be specified as either a GUID or a type and 
                is placed on a package.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.#ctor(System.Object,System.String,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;RegisterEditorExtensionAttribute.RegisterEditorExtensionAttribute&quot;]" />
            <devdoc>
                Creates a new attribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Extension">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;RegisterEditorExtensionAttribute.Extension&quot;]" />
            <devdoc>
                The file extension of the file.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Factory">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;RegisterEditorExtensionAttribute.Factory&quot;]" />
            <devdoc>
                The editor factory guid.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Priority">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;RegisterEditorExtensionAttribute.Priority&quot;]" />
            <devdoc>
                The priority of this extension registration.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.ProjectGuid">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;RegisterEditorExtensionAttribute.ProjectGuid&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.EditorFactoryNotify">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;RegisterEditorExtensionAttribute.EditorFactoryNotify&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.TemplateDir">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;RegisterEditorExtensionAttribute.TemplateDir&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.NameResourceID">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;RegisterEditorExtensionAttribute.NameResourceID&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.RegKeyName">
            <devdoc>
                   The reg key name of this extension.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.ProjectRegKeyName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <devdoc>
                   The reg key name of the project.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\RegisterEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterEditorExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterEditorExtensionAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]" />
            <devdoc>
            Unregister this editor.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute">
            <summary>
            This attribute adds a logical view to the editor created by an editor factory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.#ctor(System.Object,System.String)">
            <summary>
            Creates a new RegisterEditorLogicalView attribute to register a logical
            view provided by your editor.
            </summary>
            <param name="factoryType">The type of factory; can be a Type, a GUID or a string representation of a GUID</param>
            <param name="logicalViewGuid">The guid of the logical view to register.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.FactoryType">
            <summary>
            Get the Guid representing the type of the editor factory
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.LogicalView">
            <summary>
            Get the Guid representing the logical view
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                It also contains other information such as the type being registered and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterEditorLogicalViewAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this logical view.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute">
            <summary>
                This attribute registers the package as an extender.  The GUID passed in determines
                what is being extended. The attributes on a package do not control the behavior of
                the package, but they can be used by registration tools to register the proper
                information with Visual Studio.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
                Creates a new RegisterExtenderAttribute.
            </summary>
            <param name="extendeeCatId">CatId of the element you want to extend.</param>
            <param name="extenderGuid">GUID of the extender.</param>
            <param name="extenderName">Name of the element you want to extend.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.ExtendeeCatId">
            <summary>
            The CatID of the element being extended.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.Extender">
            <summary>
            The Guid of the extender.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.ExtenderName">
            <summary>
            The name of the extender.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.RegKeyName">
            <summary>
                   The reg key name of this Extender.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                it also contains such as the type being registered, and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this Extender specification.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLanguageExtensionAttribute.uex" path="docs/doc[@for=&quot;RegisterLanguageExtensionAttribute&quot;]" />
            <devdoc>
                This attribute associates a file extension to a given editor factory.  
                The editor factory may be specified as either a GUID or a type and 
                is placed on a package.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.#ctor(System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLanguageExtensionAttribute.uex" path="docs/doc[@for=&quot;RegisterLanguageExtensionAttribute.RegisterLanguageExtensionAttribute&quot;]" />
            <devdoc>
                Creates a new attribute.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.#ctor(System.Type,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLanguageExtensionAttribute.uex" path="docs/doc[@for=&quot;RegisterLanguageExtensionAttribute.RegisterLanguageExtensionAttribute1&quot;]" />
            <devdoc>
                Creates a new attribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.Extension">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLanguageExtensionAttribute.uex" path="docs/doc[@for=&quot;RegisterLanguageExtensionAttribute.Extension&quot;]" />
            <devdoc>
                The file extension of the file.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.LanguageService">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLanguageExtensionAttribute.uex" path="docs/doc[@for=&quot;RegisterLanguageExtensionAttribute.LanguageService&quot;]" />
            <devdoc>
                The language service SID.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLanguageExtensionAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterLanguageExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLanguageExtensionAttribute.uex" path="docs/doc[@for=&quot;Unregister&quot;]" />
            <devdoc>
            Called to remove this attribute from the given context.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLoadKeyAttribute.uex" path="docs/doc[@for=&quot;RegisterLoadKeyAttribute&quot;]" />
            <devdoc>
                This attribute registers a package load key for your package.  
                Package load keys are used by Visual Studio to validate that 
                a package can be loaded.    
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.#ctor(System.String,System.String,System.String,System.String,System.Int16)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLoadKeyAttribute.uex" path="docs/doc[@for=&quot;RegisterLoadKeyAttribute.RegisterLoadKeyAttribute&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.MinimumEdition">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLoadKeyAttribute.uex" path="docs/doc[@for=&quot;RegisterLoadKeyAttribute.MinEdition&quot;]" />
            <devdoc>
                Minimum edition of Visual Studio on which
                VSPackage is loaded. This must be the literal 
                edition value provided by Microsoft when 
                obtaining your PLK.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.ProductVersion">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLoadKeyAttribute.uex" path="docs/doc[@for=&quot;RegisterLoadKeyAttribute.ProductVersion&quot;]" />
            <devdoc>
                Version of the product that this VSPackage
                implements.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.ProductName">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLoadKeyAttribute.uex" path="docs/doc[@for=&quot;RegisterLoadKeyAttribute.ProductName&quot;]" />
            <devdoc>
                Name of the product that this VSPackage 
                delivers. Note that one product might be
                comprised of multiple VSPackages, in which 
                case each will need its own PLK.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.CompanyName">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLoadKeyAttribute.uex" path="docs/doc[@for=&quot;RegisterLoadKeyAttribute.CompanyName&quot;]" />
            <devdoc>
                VSIP Partner/creator of the VSPackage. 
                The literal name (case-sensitive) provided 
                to Microsoft when registering for a PLK.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.ResourceId">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLoadKeyAttribute.uex" path="docs/doc[@for=&quot;RegisterLoadKeyAttribute.ResourceId&quot;]" />
            <devdoc>
                Resource ID for VSPackage load key.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.RegKeyName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Registry Key name for this package's load key information.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\RegisterLoadKeyAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterLoadKeyAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregisters this package's load key information
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterProjectItemAttribute.uex" path="docs/doc[@for=&quot;RegisterProjectItemAttribute&quot;]" />
            <devdoc>
                This attribute associates register items to be included in the Add New Item.  
                dialog for the specified project type. It is placed on a package.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.#ctor(System.Object,System.String,System.String,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterProjectItemAttribute.uex" path="docs/doc[@for=&quot;RegisterProjectItemAttribute.RegisterProjectItemAttribute&quot;]" />
            <devdoc>
                Creates a new attribute.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.ProjectFactoryType">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterProjectItemAttribute.uex" path="docs/doc[@for=&quot;RegisterProjectItemAttribute.ProjectFactoryType&quot;]" />
            <devdoc>
                The Project factory guid.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.Priority">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterProjectItemAttribute.uex" path="docs/doc[@for=&quot;RegisterProjectItemAttribute.Priority&quot;]" />
            <devdoc>
                The priority of this item.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.TemplateDir">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterProjectItemAttribute.uex" path="docs/doc[@for=&quot;RegisterProjectItemAttribute.TemplateDir&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.ItemType">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterProjectItemAttribute.uex" path="docs/doc[@for=&quot;RegisterProjectItemAttribute.ItemType&quot;]/*" />
            <summary>
            String describing the item type. This string is used as the folder in the
            left side of the "Add New Items" dialog.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.ProjectRegKeyName(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                   The reg key name of the project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
             <!-- Failed to insert some or all of included XML --><include file="doc\RegisterProjectItemAttribute.uex" path="docs/doc[@for=&quot;Register&quot;]" />
             <devdoc>
                 Called to register this attribute with the given context.  The context
                 contains the location where the registration information should be placed.
                 it also contains such as the type being registered, and path information.
            
                 This method is called both for registration and unregistration.  The difference is
                 that unregistering just uses a hive that reverses the changes applied to it.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RegisterProjectItemAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RegisterProjectItem.uex" path="docs/doc[@for=&quot;RegisterProjectItemAttribute.Unregister&quot;]/*" />
            <summary>
            Unregister this editor.
            </summary>
            <param name="context" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SingleFileGeneratorSupportRegistrationAttribute">
            <summary>
            This attribute adds a custom file generator registry entry for specific file 
            type. 
            For Example:
              [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0\Generators\
            	[proj_fac_guid]
            
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SingleFileGeneratorSupportRegistrationAttribute.#ctor(System.Type)">
            <summary>
            Creates a new SingleFileGeneratorSupportRegistrationAttribute attribute to register a custom
            code generator for the provided context. 
            </summary>
            <param name="generatorType">The type of Code generator. Type that implements IVsSingleFileGenerator</param>
            <param name="generatorName">The generator name</param>
            <param name="contextGuid">The context GUID this code generator would appear under.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SingleFileGeneratorSupportRegistrationAttribute.ProjectFactoryGuid">
            <summary>
            Get the Guid representing the generator type
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SingleFileGeneratorSupportRegistrationAttribute.GeneratorRegKey">
            <summary>
            Property that gets the generator base key name
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SingleFileGeneratorSupportRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                It also contains other information such as the type being registered and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SingleFileGeneratorSupportRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this file extension.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SolutionPersistenceRegistrationAttribute">
            <summary>
            This attribute adds a solution persistence property name and related Guid
            type. 
            For Example:
              [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0Exp\SolutionPersistence\MyProperty]
            		"Default"="{AAAA53CC-3D4F-40a2-BD4D-4F3419755476}"
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.SolutionPersistenceRegistrationAttribute._propName">
            <summary>
            Property name
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SolutionPersistenceRegistrationAttribute.#ctor(System.String)">
            <summary>
            Creates a new SolutionPersistenceRegistrationAttribute attribute to register a solution persistence attribute
            for the provided context. 
            </summary>
            <param name="propName">Name of the property</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SolutionPersistenceRegistrationAttribute.PropName">
            <summary>
            Get the property name
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SolutionPersistenceRegistrationAttribute.SolutionPersistenceRegKey">
            <summary>
            Property that gets the SolutionPersistence base key name
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SolutionPersistenceRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                It also contains other information such as the type being registered and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SolutionPersistenceRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this property.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.WAProvideLanguagePropertyAttribute">
            <summary>
            This class can be used for registering a Web Application Property for a project
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.WAProvideProjectFactoryAttribute">
            <summary>
            This attribute can be used to register information about a project system that supports
            the WAP flavor/sub-type.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.WAProvideProjectFactoryTemplateMappingAttribute">
            <summary>
            This attribute is used to declare a new project system that supports Web Application Projects
            and define a mapping between the real project system and the 'fake' one that is defined only
            to store some WAP specific properties in the registry.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.WebSiteProjectAttribute">
            <summary>
            This attribute adds a ProjectSubType to the exisiting list defined of ProjectSubTypes
            for the Web Site Project
            </summary>
            <remarks>
            For example:
              [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\(*version*)\Projects\
            	{E24C65DC-7377-472B-9ABA-BC803B73C61A}\ProjectSubType(VsTemplate)\IronPython
            		"Default"="Iron Python"
              [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\9.0Exp\NewProjectTemplates\TemplateDirs\{39c9c826-8ef8-4079-8c95-428f5b1c323f}\IronPython]
                @="Iron Python"
                "NewProjectDialogExOnly"=dword:00000001
                "SortPriority"=dword:0000012c
                "TemplatesDir"="D:\\Program Files\\Microsoft Visual Studio 8\\Web\\.\\WebProjects\\IronPython"
                "DeveloperActivity"="IronPython"
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WebSiteProjectAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new WebSiteProjectAttribute attribute to register a 
            language with the web site project 
            </summary>
            <param name="languageID">Language ID which is being referenced from the vstemplate</param>
            <param name="languageName">Language Name which shows up in the add new Web Site dialog under the list of languages</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.WebSiteProjectAttribute.LanguageID">
            <summary>
            Gets the Language ID which is being referenced from the vstemplate
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.WebSiteProjectAttribute.LanguageName">
            <summary>
            Gets the Language Name which shows up in the add new Web Site dialog under the list of languages
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.WebSiteProjectAttribute.ProjectSubTypePath">
            <summary>
            ProjectSubTypePath for Web Site Project
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WebSiteProjectAttribute.getVSInstallDir(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Gets the Location of devenv.exe based on the RegistryRoot for the current package type
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WebSiteProjectAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Called to register this attribute with the given context.  The context
            contains the location where the registration information should be placed.
            It also contains other information such as the type being registered and path information.
            </summary>
            <param name="context">Given context to register in</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WebSiteProjectAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this languageID
            </summary>
            <param name="context">Given context to unregister from</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.WebSiteProjectRelatedFilesAttribute">
            <summary>
            This attribute allows the Web Site Project to nest one file type (related) under another file type (primary) in the solution explorer
            </summary>
            <remarks>
            As an example the following Attribute definition 
            [WebSiteProjectRelatedFiles("aspx","py")]
            
            would add the following registry key:
              [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\(*version*)\Projects\
            	{E24C65DC-7377-472B-9ABA-BC803B73C61A}\RelatedFiles\.aspx\.py
            		"Default"=""  
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WebSiteProjectRelatedFilesAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new WebSiteProjectAttribute attribute to register a 
            language with the web site project 
            </summary>
            <param name="primaryFileExtension">The primary file extension which will nest files.</param>
            <param name="relatedFileExtension">The related file extion which willl nest under the primary file extension</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.WebSiteProjectRelatedFilesAttribute.PrimaryFileExtension">
            <summary>
            Gets the primary file extension which will nest files
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.WebSiteProjectRelatedFilesAttribute.RelatedFileExtension">
            <summary>
            Gets the related file extion which willl nest under the primary file extension
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.WebSiteProjectRelatedFilesAttribute.RelatedFilePath">
            <summary>
            Returns the Web Site Project RelatedFiles Path
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WebSiteProjectRelatedFilesAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Called to register this attribute with the given context.  The context
            contains the location where the registration information should be placed.
            It also contains other information such as the type being registered and path information.
            </summary>
            <param name="context">Given context to register in</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WebSiteProjectRelatedFilesAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this related file extension
            </summary>
            <param name="context">Given context to unregister from</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.AbortCaption">
            <summary>
              Looks up a localized string similar to _Abort.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Argument_EmptyString">
            <summary>
              Looks up a localized string similar to Empty string is not a valid value for the argument '{0}'..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Argument_InvalidGuid">
            <summary>
              Looks up a localized string similar to '{0}' is not a valid Guid..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Attributes_ExtensionNeedsDot">
            <summary>
              Looks up a localized string similar to To register the {0} file extension, you must prefix the extension with a '.'..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Attributes_InvalidFactoryType">
            <summary>
              Looks up a localized string similar to The factory type parameter must be of one of these types: Type, Guid, string (representing a Guid)..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Attributes_InvalidUIContextType">
            <summary>
              Looks up a localized string similar to The UI context parameter must be of one of these types: UIContext, Guid, string (representing a Guid)..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Attributes_NoPrjForEditorFactoryNotify">
            <summary>
              Looks up a localized string similar to No project guid provided, but it is needed to register the extension for EditorFactoryNotify..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Attributes_ProductNameNotSpecified">
            <summary>
              Looks up a localized string similar to No Product Name was specified.  To register as an Installed Product, a Product Name is required..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Attributes_UnknownDockingStyle">
            <summary>
              Looks up a localized string similar to Unknown docking style: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Attributes_UnknownPosition">
            <summary>
              Looks up a localized string similar to Unknown relative position: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.BFO_CallingMethodWhileAnotherInProgress">
            <summary>
              Looks up a localized string similar to This method is called while other method is in progress.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.BFO_DebugOrBuildInProgress">
            <summary>
              Looks up a localized string similar to Cannot start an operation to change files behind the solution when Build or Debug is in progress.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.BFO_IncorrectOrderOfCallingBeginAsync">
            <summary>
              Looks up a localized string similar to Calling BeginAsync should be only once on non-initialized object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.BFO_IncorrectOrderOfCallingEndAsync">
            <summary>
              Looks up a localized string similar to Calling EndAsync must only once and after BeginAsync is completed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.BFO_MultipleOperationsAtTheSameTime">
            <summary>
              Looks up a localized string similar to It is not allowed to run multiple bulk file operations at a time..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.BinRedir_CouldNotLoadAssembly">
            <summary>
              Looks up a localized string similar to Could not load specified assembly: '{0}' reason: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.BinRedir_Field_Invalid">
            <summary>
              Looks up a localized string similar to Invalid value specified for {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.BinRedir_Field_NotFound">
            <summary>
              Looks up a localized string similar to {0} not specified, or could not be inferred from the target Assembly..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.BinRedir_LowerGreaterUpper">
            <summary>
              Looks up a localized string similar to OldVersionLowerBound is greater than OldVersionUpperBound..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.BinRedir_NoAssembly">
            <summary>
              Looks up a localized string similar to This attribute should be applied to an assembly..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.BinRedir_OldGreaterNew">
            <summary>
              Looks up a localized string similar to OldVersion is greater than NewVersion..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.CancelCaption">
            <summary>
              Looks up a localized string similar to _Cancel.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.CommonMessagePumpDefaultWaitStatusBarText">
            <summary>
              Looks up a localized string similar to Completing the operation you requested....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.CommonMessagePumpDefaultWaitText">
            <summary>
              Looks up a localized string similar to The operation you requested is taking longer than expected to complete. This dialog will close when the action completes..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.DialogPageLoadingCanceled">
            <summary>
              Looks up a localized string similar to Loading was canceled.  Close and re-open the dialog to retry..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.DialogPageLoadingSettings">
            <summary>
              Looks up a localized string similar to Loading settings....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Error_BooleanToCustomVisibility">
            <summary>
              Looks up a localized string similar to Cannot convert back to a Visibility value because {0} does not exclusively map to VisibilityIfTrue or VisibilityIfFalse..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Error_CannotCreateSearchQueryParser">
            <summary>
              Looks up a localized string similar to Cannot create a new search query parser..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Error_CouldNotGetOrCreateSettingsList">
            <summary>
              Looks up a localized string similar to Could not get or create settings list..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Error_CouldNotPopulateRemoteCodeContainerProperties">
            <summary>
              Looks up a localized string similar to Could not populate Remote Code Container properties..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Error_InvalidDpiMode">
            <summary>
              Looks up a localized string similar to The VSDPIMODE: {0} is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Error_InvalidEmptySearchQuery">
            <summary>
              Looks up a localized string similar to Cannot start a search with a query for a string that is null, empty or consisting only of white-space characters..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Error_InvalidFilenameCharacters">
            <summary>
              Looks up a localized string similar to The path or file name "{0}" contains one or more invalid characters.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Error_ShowContextMenu">
            <summary>
              Looks up a localized string similar to Could not show context menu: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Flavor_FailedToGetService">
            <summary>
              Looks up a localized string similar to Failed to retrieve service {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.General_ArraySizeShouldBeAtLeast1">
            <summary>
              Looks up a localized string similar to Expecting an array of size greater than zero..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.General_ExpectedNonEmptyString">
            <summary>
              Looks up a localized string similar to Expected string that is not empty..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.General_InvalidType">
            <summary>
              Looks up a localized string similar to Expected object of type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.General_MissingService">
            <summary>
              Looks up a localized string similar to The service '{0}' must be installed for this feature to work.  Ensure that this service is available..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.General_MissingServiceWithHR">
            <summary>
              Looks up a localized string similar to The service '{0}' must be installed for this feature to work.  Ensure that this service is available. HRESULT = 0x{1:X8}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.General_NoServiceInterface">
            <summary>
              Looks up a localized string similar to The service '{0}' does not implement the '{1}' interface..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.General_UnsupportedValue">
            <summary>
              Looks up a localized string similar to Unsupported value: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.IgnoreCaption">
            <summary>
              Looks up a localized string similar to _Ignore.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.InvalidMessageDialogCommand">
            <summary>
              Looks up a localized string similar to Unsupported value of MessageDialogCommand..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.InvalidMessageDialogCommandSet">
            <summary>
              Looks up a localized string similar to Unsupported value of MessageDialogCommandSet..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.MultipleResultsFound">
            <summary>
              Looks up a localized string similar to {0} results found.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.NoCaption">
            <summary>
              Looks up a localized string similar to _No.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.NoResultsFound">
            <summary>
              Looks up a localized string similar to No results found.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.OkCaption">
            <summary>
              Looks up a localized string similar to _OK.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.OptionsFeatureName">
            <summary>
              Looks up a localized string similar to Options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.OptOutText">
            <summary>
              Looks up a localized string similar to opt out..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.OptOutWithRestartText">
            <summary>
              Looks up a localized string similar to opt out (restart required)..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_BadDialogPageType">
            <summary>
              Looks up a localized string similar to The dialog page type {0} does not derive from DialogPage..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_BadOptionName">
            <summary>
              Looks up a localized string similar to The solution option name {0} is invalid.  It cannot contain '.', '/' or other special characters..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_CannotGetExtensionPoint">
            <summary>
              Looks up a localized string similar to The instance {0} of extension point {1} cannot be obtained from the package {2}, or the extension is not of type {3}.\r\n{4}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_DuplicateService">
            <summary>
              Looks up a localized string similar to The service {0} already exists in the service container..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_ExtensionPointNotRecognized">
            <summary>
              Looks up a localized string similar to The requested extension point was not recognized by this package..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_ExtensionPointProviderNotFound">
            <summary>
              Looks up a localized string similar to The requested {0} extension point provider {1} was not found declared as package attribute..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_InvalidInstanceID">
            <summary>
              Looks up a localized string similar to Instance ID {0} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_InvalidServiceInstance">
            <summary>
              Looks up a localized string similar to The service instance must derive from or implement {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_InvalidToolWindowClass">
            <summary>
              Looks up a localized string similar to CreateToolWindow only creates Tool Windows derived from ToolWindowPane..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_MissingService">
            <summary>
              Looks up a localized string similar to The package requires that service '{0}' be installed.  Ensure that this service is available..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_NoMatchingProvideToolWindowAttribute">
            <summary>
              Looks up a localized string similar to The package does not have a ProvideToolWindowAttribute for tool window {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_OptionNameUsed">
            <summary>
              Looks up a localized string similar to The solution option name {0} is already used by this package..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_PageCtorMissing">
            <summary>
              Looks up a localized string similar to The page type {0} does not offer an empty constructor..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_PageMissingInterface">
            <summary>
              Looks up a localized string similar to The page type {0} does not implement {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_PageNotDialogPage">
            <summary>
              Looks up a localized string similar to The page class {0} must derive from DialogPage..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_PendingToolWindowInit">
            <summary>
              Looks up a localized string similar to Working on it….
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Package_SiteAlreadySet">
            <summary>
              Looks up a localized string similar to A site has already been set on package {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_ErrorIncompatibleParametersTypes">
            <summary>
              Looks up a localized string similar to Parameters {0} and {1} have incompatible types.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_ErrorIncompatibleParametersValues">
            <summary>
              Looks up a localized string similar to Parameters {0} and {1} have incompatible values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_ExtensionPoint_Notify">
            <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_ExtensionPoint_TypeDoesNotImplementInterface">
            <summary>
              Looks up a localized string similar to The type "{0}" specified in the {1} attribute does not implement the {2} interface..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyAutoLoad">
            <summary>
              Looks up a localized string similar to Autoload package:         {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyCreateObject">
            <summary>
              Looks up a localized string similar to Creatable Object: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyEditorExtension">
            <summary>
              Looks up a localized string similar to Editor Extension: {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyEditorFactory">
            <summary>
              Looks up a localized string similar to Editor Factory:   {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyEditorView">
            <summary>
              Looks up a localized string similar to Logical View:     {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyExtender">
            <summary>
              Looks up a localized string similar to Extender:         {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyInstalledProduct">
            <summary>
              Looks up a localized string similar to Installed Product:   {0}, Version {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyInstalledProductInterface">
            <summary>
              Looks up a localized string similar to Installed Product:   Using IVsInstalledProduct interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyKeyBinding">
            <summary>
              Looks up a localized string similar to Key Binding: {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyLanguageCodeExpansion">
            <summary>
              Looks up a localized string similar to Language Code Expansion: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyLanguageExtension">
            <summary>
              Looks up a localized string similar to Language Extension: {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyLanguageOptionCategory">
            <summary>
              Looks up a localized string similar to LanguageOptionCategory: {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyLanguageOptionPage">
            <summary>
              Looks up a localized string similar to Language Option Page: {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyLanguageService">
            <summary>
              Looks up a localized string similar to Language Service: {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyLoadKey">
             <summary>
               Looks up a localized string similar to LoadKey:          {0} {1}
            Version {2}
            Edition Required: {3}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyMenuResource">
            <summary>
              Looks up a localized string similar to Menu:             {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyMenuResourceWithMapping">
            <summary>
              Looks up a localized string similar to Menu:             {0}, {1}, {2}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyOptionPage">
            <summary>
              Looks up a localized string similar to Option Page:      {0}\{1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyPackage">
            <summary>
              Looks up a localized string similar to Package:          {0} {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyProjectFactory">
            <summary>
              Looks up a localized string similar to Project Factory:  {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyProjectItems">
            <summary>
              Looks up a localized string similar to Project Items:    {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyService">
            <summary>
              Looks up a localized string similar to Service:          {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyStaticToolboxGroup">
            <summary>
              Looks up a localized string similar to Statically Registered Toolbox Group: ID "{0}", Name "{1}".
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyStaticToolboxItem">
            <summary>
              Looks up a localized string similar to Statically Registered Toolbox Item: Group ID "{0}", Item ID "{1}", Item Name "{2}".
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyToolboxItem">
            <summary>
              Looks up a localized string similar to Toolbox Items:    Version {0} (Formats: {1}).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyToolboxItemConfiguration">
            <summary>
              Looks up a localized string similar to Toolbox Config:   {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyToolboxItemFilter">
            <summary>
              Looks up a localized string similar to                    Filter: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyToolboxItemType">
            <summary>
              Looks up a localized string similar to Toolbox Item Type: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyToolboxPage">
            <summary>
              Looks up a localized string similar to Toolbox Page:     {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyToolResource">
            <summary>
              Looks up a localized string similar to ToolWindow:       {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyToolVisibility">
            <summary>
              Looks up a localized string similar to Tool Visibility:  {0}, {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Reg_NotifyUIContextRule">
            <summary>
              Looks up a localized string similar to UIContext Rule: {0}, Expression: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.RetryCaption">
            <summary>
              Looks up a localized string similar to _Retry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.RunContextNotSafeForJoinableTasks">
            <summary>
              Looks up a localized string similar to The specified run context is not allowed for JoinableTask instances..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.SearchInProgress">
            <summary>
              Looks up a localized string similar to Searching....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.SelectionContainer_ReadOnlySelection">
            <summary>
              Looks up a localized string similar to Cannot change selection. Selected objects are read only in this selection container..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.ServiceMonikerVersionRequired">
            <summary>
              Looks up a localized string similar to The Version property must be set to a non-null value..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Services_InvokedOnWrongThread">
            <summary>
              Looks up a localized string similar to Invoked on the wrong thread..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.SingleResultFound">
            <summary>
              Looks up a localized string similar to 1 result found.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.SolutionNavigator_ItemsNoLongerAvailable">
            <summary>
              Looks up a localized string similar to The items in this view are no longer available..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.SolutionNavigator_RelationshipLabel">
            <summary>
              Looks up a localized string similar to {0} [{1}].
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Toolbox_InvalidItemId">
            <summary>
              Looks up a localized string similar to Invalid toolbox item ID: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Toolbox_ItemNotFound">
            <summary>
              Looks up a localized string similar to Toolbox item "{0}" not found on machine..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.Toolbox_UnsupportedFormat">
            <summary>
              Looks up a localized string similar to Unsupported toolbox format: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.ToolWindow_InfoBarHostFailed">
            <summary>
              Looks up a localized string similar to IVsWindowFrame.GetProperty for VSFPROPID_InfoBarHost failed, and adding the info bar did not complete..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.ToolWindow_InfoBarUICreationFailed">
            <summary>
              Looks up a localized string similar to The SVsInfoBarUIFactory could not be created, and adding the info bar did not complete..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.ToolWindow_NoRepeatInfoBars">
            <summary>
              Looks up a localized string similar to The same info bar cannot be added multiple times..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.ToolWindow_PackageOnlySetByCreator">
            <summary>
              Looks up a localized string similar to The package property of the tool window should only be set by the creator of the tool window..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.ToolWindow_TooLateToAddTool">
             <summary>
               Looks up a localized string similar to toolClsid cannot be added after the Frame is created.
            Add the toolClsid in the ToolWindow constructor..
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.ToolWindow_TooLateToAddToolbar">
             <summary>
               Looks up a localized string similar to Toolbar cannot be added after the Frame is created.
            Add the ToolBar in the ToolWindow constructor..
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.TreeItemWithLinkOverlayAutomationHint">
            <summary>
              Looks up a localized string similar to Linked.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.UIContext_SetIsActiveNotAllowed">
            <summary>
              Looks up a localized string similar to Activating or deactivating known UIContexts is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.UIContext_ZombiedInstance">
            <summary>
              Looks up a localized string similar to This operation is not allowed on a zombie UIContext instance..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.UnknownBucketLabel">
            <summary>
              Looks up a localized string similar to [{0}:Unknown].
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Resources.YesCaption">
            <summary>
              Looks up a localized string similar to _Yes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.#ctor(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RunningDocumentTable.uex" path="docs/doc[@for=&quot;RunningDocumentTable.RunningDocumentTable&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.FindDocument(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RunningDocumentTable.uex" path="docs/doc[@for=&quot;RunningDocumentTable.FindDocument&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.FindDocument(System.String,System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RunningDocumentTable.uex" path="docs/doc[@for=&quot;RunningDocumentTable.FindDocument1&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.FindDocument(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RunningDocumentTable.uex" path="docs/doc[@for=&quot;RunningDocumentTable.FindDocument2&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.GetHierarchyItem(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RunningDocumentTable.uex" path="docs/doc[@for=&quot;RunningDocumentTable.GetHierarchyItem&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.GetRunningDocumentContents(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RunningDocumentTable.uex" path="docs/doc[@for=&quot;RunningDocumentTable.GetRunningDocumentContents&quot;]/*" />
            Return the document contents if it is loaded, otherwise return null.
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.SaveFileIfDirty(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\RunningDocumentTable.uex" path="docs/doc[@for=&quot;VsShell.SaveFileIfDirty&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentInfo.Sync">
            <summary>
            RunningDocumentInfo is a snapshot of information from RDT. In order to update this information
            you need to call Sync.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ProvideSearchProviderAttribute">
            <summary>
                This attribute registers the package as a search provider (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider" />) extender.  
                The type and name passed in determines the search provider being registered. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProvideSearchProviderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Specify that the package implements IVsSearchProviderFactory interface (e.g. by deriving from <see cref="T:Microsoft.VisualStudio.Shell.ExtensionPointPackage" />)
            and declares the type implementing the search provider.
            </summary>
            <param name="providerType">The type implementing the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSearchProvider" /> extension</param>
            <param name="name">A short, non-localized human-readable name of the provider</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideSearchProviderAttribute.ExtensionProvidersKey">
            <summary>
            The path in registry where the Global Search Providers are declared.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProvideSearchProviderAttribute.ExtensionProviderType">
            <summary>
            The type of the extension provider (the interface implemented)
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SelectionContainer">
            <!-- Failed to insert some or all of included XML --><include file="doc\SelectionContainer.uex" path="docs/doc[@for=&quot;SelectionContainer&quot;]/*" />
            <devdoc>
            This class implements the ISelectionContainer interface. It can be used to show
            informations on the property window.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.SelectionContainer.ALL">
            <!-- Failed to insert some or all of included XML --><include file="doc\SelectionContainer.uex" path="docs/doc[@for=&quot;SelectionContainer.ALL&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.SelectionContainer.SELECTED">
            <!-- Failed to insert some or all of included XML --><include file="doc\SelectionContainer.uex" path="docs/doc[@for=&quot;SelectionContainer.SELECTED&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\SelectionContainer.uex" path="docs/doc[@for=&quot;SelectionContainer.SelectionContainer&quot;]/*" />
            <devdoc>
            Creates a container with empty collections of selected and selectable objects.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.#ctor(System.Boolean,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SelectionContainer.uex" path="docs/doc[@for=&quot;SelectionContainer.SelectionContainer1&quot;]/*" />
            <devdoc>
            Creates a selection container with empty collections of selected and selectable objects.
            </devdoc>
            <param name="selectableReadOnly">Specifies if the collection of the selectable objects is read only.</param>
            <param name="selectedReadOnly">Specifies if the selection is read only.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectableObjects">
            <!-- Failed to insert some or all of included XML --><include file="doc\SelectionContainer.uex" path="docs/doc[@for=&quot;SelectionContainer.SelectableObjects&quot;]/*" />
            <devdoc>
            Get or set the collection of the selectable objects
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjects">
            <!-- Failed to insert some or all of included XML --><include file="doc\SelectionContainer.uex" path="docs/doc[@for=&quot;SelectionContainer.SelectedObjects&quot;]/*" />
            <devdoc>
            Get or set the collection of the selected objects.
            </devdoc>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.SelectionContainer.SelectedObjectsChanged">
            <!-- Failed to insert some or all of included XML --><include file="doc\SelectionContainer.uex" path="docs/doc[@for=&quot;SelectionContainer.SelectedObjectsChanged&quot;]/*" />
            <devdoc>
            This event is fired when the selection changes.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.ActivateObjects">
            <!-- Failed to insert some or all of included XML --><include file="doc\SelectionContainer.uex" path="docs/doc[@for=&quot;SelectionContainer.ActivateObjects&quot;]/*" />
            <devdoc>
            Activates the selected objects. Its default implementation is empty.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft#VisualStudio#Shell#Interop#ISelectionContainer#CountObjects(System.UInt32,System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SelectionContainer.uex" path="docs/doc[@for=&quot;SelectionContainer.ISelectionContainer.CountObjects&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft#VisualStudio#Shell#Interop#ISelectionContainer#GetObjects(System.UInt32,System.UInt32,System.Object[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\SelectionContainer.uex" path="docs/doc[@for=&quot;SelectionContainer.ISelectionContainer.GetObjects&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SelectionContainer.Microsoft#VisualStudio#Shell#Interop#ISelectionContainer#SelectObjects(System.UInt32,System.Object[],System.UInt32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SelectionContainer.uex" path="docs/doc[@for=&quot;SelectionContainer.ISelectionContainer.SelectObjects&quot;]/*" />
            <internalonly />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBrokerExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBrokerExtensions.CompareLocalToRemoteVersionAsync(Microsoft.ServiceHub.Framework.IServiceBroker,Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <summary>
            Compares a locally recognized service to what is available remotely for the same service.
            </summary>
            <param name="serviceBroker">
            The service broker to ask for available remote versions.
            </param>
            <param name="moniker">
            The moniker for the service whose versions are to be checked.
            This must have its <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Version" /> property set to a non-null value in order to have something to compare to the remote service.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            An <see cref="M:System.IComparable`1.CompareTo(`0)" /> style integer indicating how the local expectation of the service compares to the version offered by the remote.
            -1: the local version is older (i.e. the client should be upgraded).
            0: the local and remote versions are compatible or the remote version was not available.
            +1: the local version is newer (i.e. the remote should be upgraded).
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBrokerExtensions.ReportMissingServiceAsync(Microsoft.ServiceHub.Framework.IServiceBroker,System.String,System.String,Microsoft.ServiceHub.Framework.ServiceMoniker,System.Guid,System.UInt32,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.RpcContracts.IReducedFunctionalityReportingService.ReportReducedFunctionalityAsync(System.String,System.String,Microsoft.ServiceHub.Framework.ServiceMoniker,System.Guid,System.UInt32,System.Threading.CancellationToken)" />
            <param name="serviceBroker">The service broker that failed to produce the brokered service.</param>
            <remarks>
            This method is a stub for calling <see cref="M:Microsoft.VisualStudio.RpcContracts.IReducedFunctionalityReportingService.ReportReducedFunctionalityAsync(System.String,System.String,Microsoft.ServiceHub.Framework.ServiceMoniker,System.Guid,System.UInt32,System.Threading.CancellationToken)" />
            on the <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.ReducedFunctionalityReportingService" /> service.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceRegistryEntry">
            <summary>
            A class that represents the registry entry of a brokered service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceRegistryEntry.RegistryRoot">
             <summary>
             The registry root for the entry. This value will look like one of these strings:
            
                 "BrokeredServices\{service-name}"
                 "BrokeredServices\{service-name}\{version}"
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceRegistryEntry.Moniker">
            <summary>
            The service moniker for the brokered service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceRegistryEntry.EnumerateEntries(Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore)">
            <summary>
            Enumerates the registry entries for all registered brokered services.
            </summary>
            <param name="settingsStore">The settings store containing brokered service registration.</param>
            <returns>A collection of registry entries for brokered services</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceRegistryEntry.EnumerateEntries(Microsoft.VisualStudio.Settings.SettingsStore)">
            <summary>
            Enumerates the registry entries for all registered brokered services.
            </summary>
            <param name="store">The settings store containing brokered service registration.</param>
            <returns>A collection of registry roots for brokered services</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.BrokeredServiceRegistryEntry.TryCreateServiceMoniker(System.String,Microsoft.ServiceHub.Framework.ServiceMoniker@)">
            <summary>
            Creates a <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> from a brokered service's registry root.
            </summary>
            <param name="regRoot">A brokered service registry root string</param>
            <returns>True if the moniker could be created, otherwise false</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute">
            <summary>
            Produces registration for a Visual Studio package that leads to the package to be loaded
            when a specified service is requested.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.BrokeredServiceRegKey">
            <summary>
            The registry key for BrokeredServices
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.AudienceRegValue">
            <summary>
            The registry value to denote the scope of a service
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.AllowGuestClientsRegValue">
            <summary>
            The registry value to store the security context
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.DefaultAudience">
            <summary>
            The default value for <see cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.Audience" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.audience">
            <summary>
            Backing field for the <see cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.Audience" /> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute" /> class.
            </summary>
            <param name="name">The name of the service (same as <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name" />.)</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute" /> class.
            </summary>
            <param name="name">The name of the service (same as <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name" />.)</param>
            <param name="version">The version of the proffered service (same as <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Version" />). May be null.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.Name">
            <summary>
            Gets the name of the service (same as <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name" />.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.Version">
            <summary>
            Gets or sets the version of the proffered service (same as <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Version" />.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.Audience">
            <inheritdoc cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.Audience" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.AllowTransitiveGuestClients">
            <inheritdoc cref="P:Microsoft.VisualStudio.Shell.ServiceBroker.ExportBrokeredServiceAttribute.AllowTransitiveGuestClients" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.RegistryRoot">
            <summary>
            Gets the path to the key (relative to the VS hive) under which this brokered service will be recorded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.GetRegistryRoot(System.String,System.Version)">
            <summary>
            Returns the VS-hive relative path to the key under which a brokered service is registered.
            </summary>
            <param name="name">The name of the service from the <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name" />.</param>
            <param name="version">The version of the service from the <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Version" />. This is optional, and produces a unique registry path if specified.</param>
            <returns>The registry key path.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.GetPackageGuid(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Gets a GUID for the package that proffers this service.
            </summary>
            <param name="context">The context passed to <see cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)" />.</param>
            <returns>The guid to load.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.SetRegistryValues(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext,Microsoft.VisualStudio.Shell.RegistrationAttribute.Key)">
            <summary>
            Sets the values in the specified registry key.
            </summary>
            <param name="context">The context passed to <see cref="M:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)" />.</param>
            <param name="key">The key to write to.</param>
            <remarks>
            Overrides of this method should call the base method.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceHubServiceAttribute">
            <summary>
            Produces registration for a Visual Studio package that leads to the package to be loaded
            when a specified ServiceHub service is requested.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceHubServiceAttribute.IsServiceHubRegValue">
            <summary>
            The registry value to denote the whether this is a ServiceHub service
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceHubServiceAttribute.ServiceLocationRegValue">
            <summary>
            The registry value to denote the location of the service config
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceHubServiceAttribute.DefaultServiceLocation">
            <summary>
            The default value for <see cref="F:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceHubServiceAttribute.ServiceLocationRegValue" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceHubServiceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceHubServiceAttribute" /> class.
            </summary>
            <param name="name">The name of the service (same as <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name" />.)
            This must match the leading portion of the service configuration file. i.e. name.servicehub.config.json
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ServiceBroker.ProvideBrokeredServiceHubServiceAttribute.ServiceLocation">
            <summary>
            Gets or sets the location of the service configuration file. This includes the path to the configuration file, but should not contain the name of the file itself.
            </summary>
            <value>The default value is "$PackageFolder$", indicating the service is located at the root of the extension VSIX.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceCollection`1">
            <summary>
            Use this collection to store mapping from the Type of a service to the object that provides it in a way
            that is aware of embedded types.   The comparer for this collection will perform a comparison of the Guid
            properties of the Type key instead of doing a reference comparison which will fail in type embedding scenarios.
            
            This collection is not thread-safe.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceExtensions.GetService``2(System.IServiceProvider)">
            <summary>
            Gets a service interface from a service provider.
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <typeparam name="TInterface">The interface type</typeparam>
            <param name="sp">The service provider</param>
            <returns>The requested service interface. Never null.</returns>
            <exception cref="T:Microsoft.VisualStudio.Shell.ServiceUnavailableException">
            Either the service could not be acquired, or the service does not support
            the requested interface.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceExtensions.GetService``2(System.IServiceProvider,System.Boolean)">
            <summary>
            Gets a service interface from a service provider.
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <typeparam name="TInterface">The interface type</typeparam>
            <param name="sp">The service provider</param>
            <param name="throwOnFailure">
            Determines how a failure to get the requested service interface is
            handled.  If true, an exception is thrown; if false, null is returned.
            </param>
            <returns>The requested service interface, if it could be obtained; otherwise <c>null</c> if <paramref name="throwOnFailure" /> is <c>false</c>.</returns>
            <exception cref="T:Microsoft.VisualStudio.Shell.ServiceUnavailableException">
            Either the service could not be acquired, or the service does not support
            the requested interface.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceExtensions.GetServiceAsync``2(Microsoft.VisualStudio.Shell.IAsyncServiceProvider)">
            <summary>
            Gets a service interface from a service provider asynchronously.
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <typeparam name="TInterface">The interface type</typeparam>
            <param name="asp">The async service provider</param>
            <returns>The requested service interface. Never null.</returns>
            <exception cref="T:Microsoft.VisualStudio.Shell.ServiceUnavailableException">
            Either the service could not be acquired, or the service does not support
            the requested interface.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceExtensions.GetServiceAsync``2(Microsoft.VisualStudio.Shell.IAsyncServiceProvider,System.Boolean)">
            <summary>
            Gets a service interface from a service provider asynchronously.
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <typeparam name="TInterface">The interface type</typeparam>
            <param name="asp">The async service provider</param>
            <param name="throwOnFailure">
            Determines how a failure to get the requested service interface is
            handled.  If true, an exception is thrown; if false, null is returned.
            </param>
            <returns>The requested service interface, if it could be obtained; otherwise <c>null</c> if <paramref name="throwOnFailure" /> is <c>false</c>.</returns>
            <exception cref="T:Microsoft.VisualStudio.Shell.ServiceUnavailableException">
            Either the service could not be acquired, or the service does not support
            the requested interface.
            </exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceProviderHierarchy">
            <!-- Failed to insert some or all of included XML --><include file="doc\ServiceProviderHierarchy.uex" path="docs/doc[@for=&quot;ServiceProviderHierarchy&quot;]" />
            <devdoc>
                This class acts as a hierarchical service provider.  It stores IServiceProviders in a sorted dictionary
                for an ordered retrieval.  When GetService is called to retrieve a service, the service providers are queried
                in a specific order.  This is useful when multiple service providers are combined such as in 
                the WindowPane implementation
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ServiceProviderHierarchy.GetService(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ServiceProviderHierarchy.uex" path="docs/doc[@for=&quot;ServiceProviderHierarchy.GetService&quot;]" />
            <devdoc>
                Retrieves the requested service by walking the hierarchy of service providers.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder">
            <!-- Failed to insert some or all of included XML --><include file="doc\ServiceProviderHierarchyOrder.uex" path="docs/doc[@for=&quot;ServiceProviderHierarchyOrder&quot;]" />
            <devdoc>
                When multiple service providers are combined in a service provider hierarchy they 
                are ordered according to a numeric ordering.  This class provides recommended service
                resolution order for common service providers.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder.PackageSite">
            <!-- Failed to insert some or all of included XML --><include file="doc\ServiceProviderHierarchy.uex" path="docs/doc[@for=&quot;ServiceProviderHierarchyOrder.PackageSite&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder.WindowPaneSite">
            <!-- Failed to insert some or all of included XML --><include file="doc\ServiceProviderHierarchy.uex" path="docs/doc[@for=&quot;ServiceProviderHierarchyOrder.WindowPaneSite&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ServiceProviderHierarchyOrder.ProjectItemContext">
            <!-- Failed to insert some or all of included XML --><include file="doc\ServiceProviderHierarchy.uex" path="docs/doc[@for=&quot;ServiceProviderHierarchyOrder.ProjectItemContext&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SettableOleDataObject">
            <!-- Failed to insert some or all of included XML --><include file="doc\SettableOleDataObject.uex" path="docs/doc[@for=SettableOleDataObject]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SettableOleDataObject.#ctor(System.Windows.Forms.IDataObject)">
            <!-- Failed to insert some or all of included XML --><include file="doc\SettableOleDataObject.uex" path="docs/doc[@for=SettableOleDataObject.SettableOleDataObject]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.SettingScope.Private">
            <summary>
            The setting is only visible to this application on this machine.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.SettingScope.RoamedNotShared">
            <summary>
            The setting is visible to this application on all machines where the user signs in to VS with the same ID.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.SettingScope.RoamedAndShared">
            <summary>
            The setting is visible to all applications in the VS family on all machines where the user signs in to VS with the same ID.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager">
            <summary>
            This is the gateway class to reach for the settings stored inside the Visual Studio. It provides two basic
            functionality. It allows to search for properties and collections inside the scopes. It hands the 
            <see cref="T:Microsoft.VisualStudio.Settings.SettingsScope" /> and <see cref="T:Microsoft.VisualStudio.Settings.WritableSettingsStore" /> classes for further manipulation of the 
            collections and properties within the scopes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.#ctor(System.IServiceProvider)">
            <summary>
            Constructor for the SettingsManager class. It requires Service Provider to reach IVsSettingsManager
            which is the interop COM interface of the service that provides the Settings related functionalities.
            </summary>
            <param name="serviceProvider">Service provider of the VS.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsSettingsManager)">
            <summary>
            Constructor which takes a settings manager instance
            </summary>
            <param name="settingsManager">The instance of the IVsSettingsManager</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.GetCollectionScopes(System.String)">
            <summary>
            Outputs the scopes that contain the given collection. If more than one scope contains the collection,
            the corresponding bit flags of those scopes are set.
            </summary>
            <param name="collectionPath">Path of the collection to be searched.</param>
            <returns>Enclosing scopes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.GetPropertyScopes(System.String,System.String)">
            <summary>
            Outputs the scopes that contain the given property. If more than one scope contains the property,
            the corresponding bit flags of those scopes are set.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property to be searched.</param>
            <returns>Enclosing scopes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.GetReadOnlySettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)">
            <summary>
            Provides the <see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> class for the requested scope which can be used for read-only 
            operations.
            </summary>
            <param name="scope">Requested scope.</param>
            <returns><see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> instance that can be used for accessing the scope.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.GetWritableSettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)">
            <summary>
            Provides the <see cref="T:Microsoft.VisualStudio.Settings.WritableSettingsStore" /> class for the requested scope which can be used both for
            reading and writing.
            </summary>
            <param name="scope">Requested scope.</param>
            <exception cref="T:System.ArgumentException">If the given scope is not a writable one.</exception>
            <returns><see cref="T:Microsoft.VisualStudio.Settings.WritableSettingsStore" /> instance that can be used for accessing the scope.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.GetApplicationDataFolder(Microsoft.VisualStudio.Settings.ApplicationDataFolder)">
            <summary>
            Returns the folder that Visual Studio uses for storing various cache, backup, template, etc. files
            </summary>
            <param name="folder">Requested folder.</param>        
            <returns>Full path of the requested folder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsManager.GetCommonExtensionsSearchPaths">
            <summary>
            Returns the list of folders that Visual Studio uses for installing/discovering machine-wide extensions.
            </summary>
            <returns>List of extensions root paths.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore">
            <summary>
            Abstract class for reading/enumerating the selected scope's collections and properties. It is obtained from 
            <see cref="M:Microsoft.VisualStudio.Settings.SettingsManager.GetReadOnlySettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)" /> method.
            
            In the methods of this class if the collection path is provided as the empty string ("") then it 
            denotes the top level collection. If the property name is empty string then it denotes the default 
            property of the collection.
            
            Collections can contain properties and sub-collections. Sub-collections paths are described with the 
            separators like directories in file system. Likewise, separator is '\' (back-slash) character. Example
            of a sub-collection path would be: "Root Collection\Internal Collection\Leaf Collection".
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetBoolean(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" /> as boolean.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>If the underling integer value for the property is non-zero, it returns true and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" /> as boolean.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in otherwise it returns true if the 
            underling integer value is non-zero and false if it is zero.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetInt32(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>Value of the property. If the value was stored as an unsigned integer previously then regular type 
            conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetInt32(System.String,System.String,System.Int32)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as an 
            unsigned integer previously then regular type conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetUInt32(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>Value of the property. If the value was stored as an signed integer previously then regular type 
            conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetUInt32(System.String,System.String,System.UInt32)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as an 
            signed integer previously then regular type conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetInt64(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int64" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>Value of the property. If the value was stored as an unsigned long previously then regular type 
            conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetInt64(System.String,System.String,System.Int64)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int64" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as an 
            unsigned long previously then regular type conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetUInt64(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int64" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>Value of the property. If the value was stored as an signed long previously then regular type 
            conversion sematics applies.</returns>        
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetUInt64(System.String,System.String,System.UInt64)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int64" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as an 
            signed long previously then regular type conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetString(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.String" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>Value of the property.</returns> 
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetString(System.String,System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.String" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetMemoryStream(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Binary" />. In order to
            access the underlying byte array at once <see cref="M:System.IO.MemoryStream.ToArray" /> method can be used.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns><see cref="T:System.IO.MemoryStream" /> for the stream of bytes this property.</returns>  
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetPropertyType(System.String,System.String)">
            <summary>
            Returns the type of the requested property.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property does not exist.</exception>
            <returns>Type of the property.</returns>  
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.PropertyExists(System.String,System.String)">
            <summary>
            Checks the existance of the property passed in to this method.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>Returns true if the property exists and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.CollectionExists(System.String)">
            <summary>
            Checks the existance of the collection passed in to this method.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <returns>Returns true if the collection exists and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetLastWriteTime(System.String)">
            <summary>
            Provides the last write time of the properties and sub collections immediate to the given collection. The method does 
            report any further changes internal to the sub collections (i.e. non-recursive). The last write time of a collection is 
            updated if properties are created, deleted or their values modified or if a sub collection is created or deleted.         
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Last update time to the collection in <see cref="F:System.DateTimeKind.Local" /> format.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetSubCollectionCount(System.String)">
            <summary>
            Returns the number of sub collections under the given collection.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Number of sub collections is returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetPropertyCount(System.String)">
            <summary>
            Returns the number of properties under the given collection.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Number of properties is returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetSubCollectionNames(System.String)">
            <summary>
            Returns the names of sub collections under the given collection.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Names of sub collections are returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetPropertyNames(System.String)">
            <summary>
            Returns the names of properties under the given collection.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Names of properties are returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.GetPropertyNamesAndValues(System.String)">
            <summary>
            Returns the names of properties under the given collection.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Names of properties is returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellSettingsStore.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsSettingsStore)">
            <summary>
            Internal constructor that takes the COM interface that provides the functionality of this class.
            </summary>
            <param name="settingsStore">COM interface wrapped by this class.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Settings.ShellWritableSettingsStore">
            <summary>
            Abstract class for both reading and writing the selected scope's collections and properties. It is obtained from 
            <see cref="M:Microsoft.VisualStudio.Settings.SettingsManager.GetWritableSettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)" /> method.
            
            This class is derived from the SettingsStore hence it inherits all the functionalities from it. It adds property and
            collection manipulation abilities on top of it.
            </summary>    
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellWritableSettingsStore.SetBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Updates the value of the specified property to the given Boolean value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>  
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellWritableSettingsStore.SetInt32(System.String,System.String,System.Int32)">
            <summary>
            Updates the value of the specified property to the given integer value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>        
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellWritableSettingsStore.SetUInt32(System.String,System.String,System.UInt32)">
            <summary>
            Updates the value of the specified property to the given unsigned integer value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>        
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellWritableSettingsStore.SetInt64(System.String,System.String,System.Int64)">
            <summary>
            Updates the value of the specified property to the given long value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int64" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>        
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellWritableSettingsStore.SetUInt64(System.String,System.String,System.UInt64)">
            <summary>
            Updates the value of the specified property to the given unsigned long value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int64" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception> 
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellWritableSettingsStore.SetString(System.String,System.String,System.String)">
            <summary>
            Updates the value of the specified property to the given string value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.String" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception> 
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellWritableSettingsStore.SetMemoryStream(System.String,System.String,System.IO.MemoryStream)">
            <summary>
            Updates the value of the specified property to the bits of the MemoryStream while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Binary" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">MemoryStream to set the bits of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception> 
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellWritableSettingsStore.CreateCollection(System.String)">
            <summary>
            Creates the given collection path by creating each nested collection while skipping the ones that already exist. 
            If the full path of collections already exist, the method simply returns.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If empty string ("") is passed to the method then it throws this exception.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellWritableSettingsStore.DeleteCollection(System.String)">
            <summary>
            Deletes the given collection recursively deleting all of the sub collections and properties in it. If the collection 
            does not exist or an empty string ("") is passed then the method returns false.
            </summary>
            <param name="collectionPath">Path of the collection to be deleted.</param>
            <returns>Result of the deletion.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellWritableSettingsStore.DeleteProperty(System.String,System.String)">
            <summary>         
            Deletes the given property from the collection. If the property or the collection does not exist then the method 
            returns false.
            </summary>
            <param name="collectionPath">Collection that contains the property to be deleted.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>Result of the deletion.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Settings.ShellWritableSettingsStore.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsWritableSettingsStore)">
            <summary>
            Internal constructor that takes the COM interface that provides the functionality of this class.
            </summary>
            <param name="writableSettingsStore">COM interface wrapped by this class.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SharedProjectUtilities">
            <summary>
            Utility methods for Shared Projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.SharedProjectUtilities.VerticalBarDelimiter">
            <summary>
            Single, static instance of an array that contains a vertical bar, which is used to split the file paths.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SharedProjectUtilities.IsSharedItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
            <summary>
            Is the given item a shared item?
            </summary>
            <param name="hierarchy">The project hierarchy.</param>
            <param name="itemId">The item id.</param>
            <returns><c>true</c> if the given item is a shared item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SharedProjectUtilities.IsSharedAssetsProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Is the given project a Shared Project?
            </summary>
            <param name="hierarchy">The project hierarchy.</param>
            <returns><c>true</c> if the given project is a Shared Project; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SharedProjectUtilities.IsProjectImportingSharedAssets(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Is the given project importing shared assets?
            </summary>
            <param name="hierarchy">The project hierarchy.</param>
            <returns><c>true</c> if the given project is importing shared assets; otherwise, <c>false</c>.</returns>
            <remarks>
            Shared Project also imports shared assets, so this method would return <c>true</c> for a Shared Project as well.
            Please use <see cref="M:Microsoft.VisualStudio.Shell.SharedProjectUtilities.IsSharedAssetsProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)" /> to identify Shared Projects.
            This method is used to identify the projects that are importing shared assets.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SharedProjectUtilities.EnumOwningProjectsOfSharedAssets(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Enumerates all the Shared Projects that own and manage the shared assets being imported by the given project.
            </summary>
            <param name="hierarchy">The project that imports the shared assets.</param>
            <returns>An enumerable of hierarchies of the Shared Projects that own and manage the shared assets being imported by the given project.</returns>
            <remarks>The shared assets owned by a Shared Project could be imported by multiple projects. A project could import shared assets from multiple Shared Projects as well.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SharedProjectUtilities.EnumImportingProjects(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Enumerates all the projects that are importing shared assets owned by the given Shared Project hierarchy.
            </summary>
            <param name="hierarchy">The Shared Project hierarchy.</param>
            <returns>An enumerable of hierarchies that are importing the shared assets owned by the given Shared Project hierarchy.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SharedProjectUtilities.GetDeploymentRelativePath(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
            <summary>
            Gets the deployment relative path of the given item id.
            </summary>
            <param name="hierarchy">The project hierarchy.</param>
            <param name="itemId">The item id.</param>
            <returns>The deployment path relative to the output directory or package directory, or <c>null</c> if failed.</returns>
            <remarks>This method works for C# and JS.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SharedProjectUtilities.GetSharedItemsImportFullPaths(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Gets the full paths of the shared ".projitems" files imported by the given project.
            </summary>
            <param name="hierarchy">The project hierarchy.</param>
            <returns>A string array of full paths of ".projitems" files, or <c>null</c> if failed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SharedProjectUtilities.GetActiveProjectContext(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Gets the active project context.
            </summary>
            <param name="hierarchy">The Shared Project hierarchy.</param>
            <returns>The active project hierarchy.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SharedProjectUtilities.SetActiveProjectContext(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Sets the active project context.
            </summary>
            <param name="hierarchy">The Shared Project hierarchy.</param>
            <param name="activeProjectContext">The active project hierarchy, could be <c>null</c> to clear the active project context.</param>
            <returns>The HRESULT.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SharedProjectUtilities.TryGetItemInSharedAssetsProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)">
            <summary>
            Gets the item id of an imported item in the Shared Project hierarchy.
            </summary>
            <param name="hierarchy">The project that is importing the shared assets that the Shared Project owns.</param>
            <param name="itemId">The item id of the imported shared item in the importing project.</param>
            <param name="sharedAssetsProject">The Shared Project hierarchy.</param>
            <param name="itemIdInSharedAssetsProject">The item id in the Shared Project hierarchy.</param>
            <returns><c>true</c> if found, the Shared Project hierarchy and the item id in that shared hierarchy; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.SharedProjectUtilities.SetHierarchyProperty(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.Int32,System.Object)">
            <summary>
            Sets the hierarchy property with the convenience to jump to the Shared Project hierarchy to set the property for the shared item.
            </summary>
            <param name="hierarchy">The project hierarchy.</param>
            <param name="itemId">The item id.</param>
            <param name="propId">The property id.</param>
            <param name="value">The property value.</param>
            <returns>The HRESULT.</returns>
            <remarks>
            For the shared item, this method will find the corresponding item in the Shared Project,
            and then set property on the item in the Shared Project.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SharedSettingsAttribute">
            <summary>
            This attribute, when applied to the class returned from the AutomationObject property of a DialogPage subclass,
            enables the object's properties to be shared with other apps and online.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.SingleTaskIdleManager">
            <summary>
            Executes a long-running operation at idle priority on the UI thread.  To support yielding frequently,
            the operation should yield return null as frequently as possible to allow the component manager to
            schedule other tasks and yield to higher-priority operations.
            
            The task will be executed repeatedly until the SingleTaskIdleManager is disposed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ProjectDesignerTabProvidersContainer.TabProviders">
            <summary>
            Gets the list of discovered MEF providers
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ProjectTabDesigner.GetProjectDesignerTabIds(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String)">
            <summary> 
            Gets applicable tab Ids for a given project and designer Id
            </summary> 
            <param name="project">The project that this check is made against</param>
            <param name="designerId">The target designer id</param>
            <returns> 
            Tab Ids that are available for the project
            </returns> 
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.UnknownEntryBucket">
            <summary>
            A special type of bucket entry used when the value is unknown.
            </summary>
            <remarks>
            <para>Buckets of this class (or derived from this class) will always be placed at the last entry in a list of buckets.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.UnknownEntryBucket.#ctor(System.String,System.Object,System.StringComparer,System.Boolean)">
            <summary>
            Constructor for an instance an instance of <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket" /> that is displayed using a string.
            </summary>
            <param name="name">Localized name used to display the group header.</param>
            <param name="tooltip">ToolTip to be displayed over the group's header (can be null).</param>
            <param name="comparer">String comparison used to compare two different groups.</param>
            <param name="expandedByDefault">Whether this bucket is initially expanded.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.MaskFilter">
            <summary>
            A helper class that implements an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IEntryFilter" /> that excludes entries whose untruncated text matches anything in a list of strings.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.MaskFilter.#ctor(System.String,System.Int32)">
            <summary>
            Create a filter that that excludes entries who <paramref name="keyName" /> property doesn't intersect <paramref name="mask" />.
            </summary>
            <param name="keyName">Name of the key used to call <see cref="T:ITableEntryHandle.TryGetValue" />.</param>
            <param name="mask">Bitmask used to test entries.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.MaskFilter.Match(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle)">
            <summary>
            Tests to see if <paramref name="entry" /> matches the filter.
            </summary>
            <param name="entry">Entry to test against the filter.</param>
            <returns>true if the entry matches the filter.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase">
            <summary>
            Describes a column of data.
            </summary>
            <remarks>
            Required MEF metadata: Name
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.Name">
            <summary>
            Unique identifier of the column.
            </summary>
            <remarks>
            <para>
            This value must match the value provided by the Name attribute.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.TryCreateImageContent(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Boolean,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker@)">
            <summary>
            Get the data for this column of an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle" /> as an <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker" />.
            </summary>
            <remarks>
            <para>
            The default implementation fails to return an <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker" />.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.TryCreateStringContent(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Get the data for this column of an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle" /> as a string.
            </summary>
            <remarks>
            <para>
            The default implementation is to get the value using <see cref="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.Name" /> as a key and, if it is a string, display that.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.TryCreateColumnContent(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Boolean,System.Windows.FrameworkElement@)">
            <summary>
            Get the data for this column of an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle" /> as an <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
            <remarks>
            <para>
            The default implementation fails to return a <see cref="T:System.Windows.FrameworkElement" />.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.TryCreateToolTip(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Object@)">
            <summary>
            Get the tool tip for this column of an <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle" />.
            </summary>
            <remarks>
            <para>
            The default implementation returns false and sets <paramref name="toolTip" /> to null.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.CompareContent(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle)">
            <summary>
            Compare the sort order of two entries of the data in one column of two different entries.
            </summary>
            <remarks>
            <para>
            The default comparisons does a <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)" /> using the column name as the key. If the left and right values are strings, then the strings are compared.
            If they are <see cref="T:System.IComparable" />s and the same underlying type, then <see cref="M:System.IComparable.CompareTo(System.Object)" /> is used. Otherwise we get the string content for this column and compare those.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.CreateBucketForEntry(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle)">
            <summary>
            Get the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IEntryBucket" /> associated this this column for this entry.
            </summary>
            <param name="entry">Entry for which to get the bucket.</param>
            <returns>The associated bucket. This can be null.</returns>
            <remarks>
            <para>The identity of a bucket is based on object.GetHashCode() and object.Equals() two entries that return different objects for their bucket will be grouped together as long as the
            two buckets are equivalent.</para>
            <para>This method is unused at the moment.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.IsFilterable">
            <summary>
            Indicated whether the column can be filtered using the default UI.
            </summary>
            <remarks>
            If this returns false then there will be no built-in UI for letting the user filter the column.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.Comparer">
            <summary>
            The <see cref="T:System.StringComparer" /> used to sort and compare entries in this column.
            </summary>
            <remarks>
            This value is used for the filtering, sorting and grouping.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.IsSortable">
            <summary>
            Indicates whether the column can be sorted using the default UI.
            </summary>
            <remarks>
            If this returns false then there will be no built-in UI for letting the user sort the column.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.DefaultVisible">
            <summary>
            Indicates whether the column is visible by default.
            </summary>
            <remarks>
            If this returns false then the column will be hidden the first time there is data in the table that could be shown using this column.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.IsHideable">
            <summary>
            Indicates whether the user can hide the column using the default UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.IsResizable">
            <summary>
            Indicates whether the user can change the column's width using the default UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.IsMovable">
            <summary>
            Indicates whether the user can move the column using the default UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.IsCopyable">
            <summary>
            Indicates whether the user can copy the column's content using the default copy command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.FilterPresets">
            <summary>
            The strings that always exist as filterable items for this list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.DisplayName">
            <summary>
            Localized name of the column.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.HeaderName">
            <summary>
            Localized name used when adding headers to entries copied from the control to the clipboard.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.DisplayImage">
            <summary>
            <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker" /> shown for this column in the header.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.MinWidth">
            <summary>
            Minimum width of the column (in pixels).
            </summary>
            <remarks>The minimum width is 22 pixels (so that there is space to display the sorting and filtering UI).</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.MaxWidth">
            <summary>
            Maximum width of the column (in pixels).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.ColumnDefinition">
            <summary>
            Gets the width of the item in the table's header (which is inherited by the corresponding columns of the entries).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.TextWrapping">
            <summary>
            Indicates whether the user can copy the column's content should be wrapped if it is too large to fit.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.TryGetFilterItems(Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Get the filterable items for the column.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.DefaultWidth">
            <summary>
            Gets the default width associated with a column.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.TableColumnDefinitionBase.CreateBucketForUnknownEntry(Microsoft.VisualStudio.Shell.TableControl.ITableColumnDefinition)">
            <summary>
            Create a bucket that is used when there is no data in the column that could be used to create a normal bucket.
            </summary>
            <param name="columnDefinition"></param>
            <returns></returns>
            <remarks>
            The table control will always place unknown buckets last in a list of buckets.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.TableControlEventProcessorBase">
            <summary>
            Helper class for those that want to implement only part of the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableControlEventProcessor" /> interface.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntriesSnapshotBase">
            <summary>
            Helper class for those that want to implement only part of the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntriesSnapshot" /> interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntriesSnapshotBase.TryCreateImageContent(System.Int32,System.String,System.Boolean,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker@)">
            <summary>
            Get the <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker" /> for the virtual entry at position <paramref name="index" /> and <paramref name="columnName" />.
            </summary>
            <param name="index">Index of the virtual entry in the snapshot.</param>
            <param name="columnName">Name of the column for which to get the <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker" />.</param>
            <param name="singleColumnView">true if the table control is displaying everything in a single column.</param>
            <param name="content">The <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker" /> to display in the column.</param>
            <returns>true if <paramref name="content" /> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntriesSnapshotBase.TryCreateStringContent(System.Int32,System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Get the <see cref="T:System.String" /> for the virtual entry at position <paramref name="index" /> and <paramref name="columnName" />.
            </summary>
            <param name="index">Index of the virtual entry in the snapshot.</param>
            <param name="columnName">Name of the column for which to get the <see cref="T:System.String" />.</param>
            <param name="truncatedText">Truncate the text for fit on a single line.</param>
            <param name="singleColumnView">true if the table control is displaying everything in a single column.</param>
            <param name="content">The <see cref="T:System.String" /> to display in the column.</param>
            <returns>true if <paramref name="content" /> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntriesSnapshotBase.TryCreateColumnContent(System.Int32,System.String,System.Boolean,System.Windows.FrameworkElement@)">
            <summary>
            Get the <see cref="T:System.Windows.FrameworkElement" /> for the virtual entry at position <paramref name="index" /> and <paramref name="columnName" />.
            </summary>
            <param name="index">Index of the virtual entry in the snapshot.</param>
            <param name="columnName">Name of the column for which to get the <see cref="T:System.Windows.FrameworkElement" />.</param>
            <param name="singleColumnView">true if the table control is displaying everything in a single column.</param>
            <param name="content">The <see cref="T:System.Windows.FrameworkElement" /> to display in the column.</param>
            <returns>true if <paramref name="content" /> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntriesSnapshotBase.CanCreateDetailsContent(System.Int32)">
            <summary>
            Indicates whether the virtual entry at position <paramref name="index" /> has details content that can be displayed.
            </summary>
            <param name="index">Index of the virtual entry in the snapshot.</param>
            <returns>true if the entry has content that could be displayed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntriesSnapshotBase.TryCreateDetailsContent(System.Int32,System.Windows.FrameworkElement@)">
            <summary>
            Get the details content for the virtual entry <paramref name="index" /> so that it can be displayed in the table control.
            </summary>
            <param name="index">Index of the virtual entry in the snapshot.</param>
            <param name="expandedContent"><see cref="T:System.Windows.FrameworkElement" /> to display below the entry in the table control.</param>
            <returns>true if <paramref name="expandedContent" /> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntriesSnapshotBase.TryCreateDetailsStringContent(System.Int32,System.String@)">
            <summary>
            Get the string equivalent of the details content for the virtual entry <paramref name="index" /> (used for search and copy and paste).
            </summary>
            <param name="index">Index of the virtual entry in the snapshot.</param>
            <param name="content">The string equivalent to display in the column.</param>
            <returns>true if <paramref name="content" /> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntriesSnapshotBase.TryCreateToolTip(System.Int32,System.String,System.Object@)">
            <summary>
            Get the tooltip for the entry and <paramref name="columnName" />.
            </summary>
            <param name="index">Index of the virtual entry in the snapshot.</param>
            <param name="columnName">Name of the column for which to get the image.</param>
            <param name="toolTip">The object to display as a tool tip for the column.</param>
            <returns>true if <paramref name="toolTip" /> should be used.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntryBase">
            <summary>
            Helper class for those that want to implement only part of the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableEntry" /> interface.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntryBase.TryCreateImageContent(System.String,System.Boolean,Microsoft.VisualStudio.Imaging.Interop.ImageMoniker@)">
            <summary>
            Get the <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker" /> for the entry and <paramref name="columnName" />.
            </summary>
            <param name="columnName">Name of the column for which to get the <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker" />.</param>
            <param name="singleColumnView">true if the table control is displaying everything in a single column.</param>
            <param name="content">The <see cref="T:Microsoft.VisualStudio.Imaging.Interop.ImageMoniker" /> to display in the column.</param>
            <returns>true if <paramref name="content" /> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntryBase.TryCreateStringContent(System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Get the <see cref="T:System.String" /> for the entry and <paramref name="columnName" />.
            </summary>
            <param name="columnName">Name of the column for which to get the <see cref="T:System.String" />.</param>
            <param name="truncatedText">Truncate the text for fit on a single line.</param>
            <param name="singleColumnView">true if the table control is displaying everything in a single column.</param>
            <param name="content">The <see cref="T:System.String" /> to display in the column.</param>
            <returns>true if <paramref name="content" /> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntryBase.TryCreateColumnContent(System.String,System.Boolean,System.Windows.FrameworkElement@)">
            <summary>
            Get the <see cref="T:System.Windows.FrameworkElement" /> for the entry and <paramref name="columnName" />.
            </summary>
            <param name="columnName">Name of the column for which to get the <see cref="T:System.Windows.FrameworkElement" />.</param>
            <param name="singleColumnView">true if the table control is displaying everything in a single column.</param>
            <param name="content">The <see cref="T:System.Windows.FrameworkElement" /> to display in the column.</param>
            <returns>true if <paramref name="content" /> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntryBase.CanCreateDetailsContent">
            <summary>
            Does the entry have details content that can be displayed.
            </summary>
            <returns>true if the entry has content that could be displayed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntryBase.TryCreateDetailsContent(System.Windows.FrameworkElement@)">
            <summary>
            Get the details content for the entry so that it can be displayed in the table control.
            </summary>
            <param name="expandedContent"><see cref="T:System.Windows.FrameworkElement" /> to display below the entry in the table control.</param>
            <returns>true if <paramref name="expandedContent" /> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntryBase.TryCreateDetailsStringContent(System.String@)">
            <summary>
            Get the string equivalent of the details content for the entry (used for search and copy and paste).
            </summary>
            <param name="content">The string equivalent to display in the column.</param>
            <returns>true if <paramref name="content" /> should be used.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableControl.WpfTableEntryBase.TryCreateToolTip(System.String,System.Object@)">
            <summary>
            Get the tooltip for the entry and <paramref name="columnName" />.
            </summary>
            <param name="columnName">Name of the column for which to get the image.</param>
            <param name="toolTip">The object to display as a tool tip for the column.</param>
            <returns>true if <paramref name="toolTip" /> should be used.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.Shell.TableManager.Boxes" -->
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.Boxes.ErrorRank">
            <summary>
            Value that indicates the rank of an in the error list (errors with a lower rank are, by default, displayed before errors with a higher rank).
            </summary>
            <remarks>
            <para>
            Boxed equivalents of <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ErrorRank" /> for the value returned when calling <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.TryGetValue(System.Int32,System.String,System.Object@)" /> using the 
            <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorRank" /> key.
            </para>
            <para>
            It is better, for performance reasons, to return values that have been boxed when returning though an out <see cref="T:System.Object" />.
            </para>
            <para>
            You should use the actual enumeration (<see cref="T:Microsoft.VisualStudio.Shell.TableManager.ErrorRank" />) when comparing values.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.Boxes.SuppressionState">
            <summary>
            Value that indicates whether an error has been suppressed.
            </summary>
            <remarks>
            <para>
            Boxed equivalents of <see cref="T:Microsoft.VisualStudio.Shell.TableManager.SuppressionState" /> for the value returned when calling <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.TryGetValue(System.Int32,System.String,System.Object@)" /> using the 
            <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.SuppressionState" /> key.
            </para>
            <para>
            It is better, for performance reasons, to return values that have been boxed when returning though an out <see cref="T:System.Object" />.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.Boxes.ErrorSource">
            <summary>
            Value that indicates the source of an error in the error list.
            </summary>
            <remarks>
            <para>
            Boxed equivalents of <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ErrorSource" /> for the value returned when calling <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntry.TryGetValue(System.String,System.Object@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot.TryGetValue(System.Int32,System.String,System.Object@)" /> using the 
            <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ErrorSource" /> key.
            </para>
            <para>
            It is better, for performance reasons, to return values that have been boxed when returning though an out <see cref="T:System.Object" />.
            </para>
            <para>
            You should use the actual enumeration (<see cref="T:Microsoft.VisualStudio.Shell.TableManager.ErrorSource" />) when comparing values.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.Boxes.ErrorSource.Build">
            <summary>
            Used to indicate any error generated by an explicit build command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.Boxes.ErrorSource.Other">
            <summary>
            Used to indicate any error generated from any compilation process that was not explicitly invoked by the end-user (e.g. in response to typing a character).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.TableEntriesSnapshotBase">
            <summary>
            Helper class for those that want to implement only part of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot" /> interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableManager.TableEntriesSnapshotBase.Count">
            <summary>
            Number of entries in this snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableManager.TableEntriesSnapshotBase.VersionNumber">
            <summary>
            Get the version number associated with the snapshot.
            </summary>
            <remarks>
            <para>
            Intentially return an invalid VersionNumber so that this snapshot will be different than any valid snapshot.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.TableEntriesSnapshotBase.StartCaching">
            <summary>
            Hint to the snapshot that there will be a lot of access to the snapshot's data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.TableEntriesSnapshotBase.StopCaching">
            <summary>
            Hint to the snapshot that the snapshot's entries will no longer be accessed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.TableEntriesSnapshotBase.TryGetValue(System.Int32,System.String,System.Object@)">
            <summary>
            Get the data for the <paramref name="keyName" /> of the entry at <paramref name="index" />.
            </summary>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.TableEntriesSnapshotBase.IndexOf(System.Int32,Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot)">
            <summary>
            Returns the index of the entry at <paramref name="currentIndex" /> in this snapshot in a later snapshot (<paramref name="newSnapshot" />).
            </summary>
            <param name="currentIndex">Index of the entry in this <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshot" />.</param>
            <param name="newSnapshot">Desired snapshot.</param>
            <returns>The index in <paramref name="newSnapshot" /> if it exists or -1 otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.TableEntriesSnapshotBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.TableEntriesSnapshotFactoryBase">
            <summary>
            Helper class for those that want to implement only part of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory" /> interface.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TableManager.TableEntriesSnapshotFactoryBase.EmptySnapshot">
            <summary>
            You can use this if a <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntriesSnapshotFactory" /> needs to return an empty snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.TableEntriesSnapshotFactoryBase.GetCurrentSnapshot">
            <summary>
            Get the current snapshot of the entries associated with the factory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TableManager.TableEntriesSnapshotFactoryBase.CurrentVersionNumber">
            <summary>
            The version number associated with the current snapshot.
            </summary>
            <remarks><para>Returns -1, unless overridden, to match the version number of the returned snapshot.</para></remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TableManager.TableEntriesSnapshotFactoryBase.GetSnapshot(System.Int32)">
            <summary>
            Get the snapshot associated with the specified <paramref name="versionNumber" />. Return null if that snapshot
            is no longer available.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TableManager.TableEntryBase">
            <summary>
            Helper class for those that want to implement only part of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableEntry" /> interface.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TaskCategory">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskCategory.uex" path="docs/doc[@for=&quot;TaskCategory&quot;]" />
            <devdoc>
                This class implements IVsTask.  It provides a 
                framework-friendly way to define a package and its associated 
                services.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.All">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskCategory.uex" path="docs/doc[@for=&quot;TaskCategory.All&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.BuildCompile">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskCategory.uex" path="docs/doc[@for=&quot;TaskCategory.BuildCompile&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.Comments">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskCategory.uex" path="docs/doc[@for=&quot;TaskCategory.Comments&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.CodeSense">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskCategory.uex" path="docs/doc[@for=&quot;TaskCategory.CodeSense&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.ShortCuts">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskCategory.uex" path="docs/doc[@for=&quot;TaskCategory.ShortCuts&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.User">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskCategory.uex" path="docs/doc[@for=&quot;TaskCategory.User&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.Misc">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskCategory.uex" path="docs/doc[@for=&quot;TaskCategory.Misc&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.Html">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskCategory.uex" path="docs/doc[@for=&quot;TaskCategory.Html&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TaskErrorCategory">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskErrorCategory.uex" path="docs/doc[@for=&quot;TaskErrorCategory&quot;]" />
            <devdoc>
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskErrorCategory.Error">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskErrorCategory.uex" path="docs/doc[@for=&quot;TaskErrorCategory.Error&quot;]" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskErrorCategory.Warning">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskErrorCategory.uex" path="docs/doc[@for=&quot;TaskErrorCategory.Warning&quot;]" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskErrorCategory.Message">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskErrorCategory.uex" path="docs/doc[@for=&quot;TaskErrorCategory.Message&quot;]" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TaskListItem">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem&quot;]" />
            <devdoc>
                This class implements IVsTaskItem.
                Prior to Dev17, this class was called Task.
                It was renamed in Dev17 to avoid a naming conflict with the System.Threading.Tasks.Task class.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskListItem.contextNameKeyword">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.contextNameKeyword&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.TaskListItem&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.#ctor(System.Exception)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.Task1&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskListItem.CanDelete">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.CanDelete&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskListItem.Category">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.Category&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskListItem.Checked">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.Checked&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskListItem.Column">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.Column&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskListItem.Document">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.Document&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskListItem.HelpKeyword">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.HelpKeyword&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskListItem.ImageIndex">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.ImageIndex&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskListItem.IsCheckedEditable">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IsCheckedEditable&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskListItem.IsPriorityEditable">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IsPriorityEditable&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskListItem.IsTextEditable">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IsTextEditable&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskListItem.Line">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.Line&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskListItem.Priority">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.Priority&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskListItem.SubcategoryIndex">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.SubcategoryIndex&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskListItem.Text">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.Text&quot;]/*" />
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.TaskListItem.Deleted">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.Deleted&quot;]/*" />
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.TaskListItem.Removed">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.Removed&quot;]/*" />
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.TaskListItem.Help">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.Help&quot;]/*" />
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.TaskListItem.Navigate">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.Navigate&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.OnDeleted(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.OnDeleted&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.OnRemoved(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.OnRemoved&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.OnHelp(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.OnHelp&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.OnNavigate(System.EventArgs)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.OnNavigate&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#CanDelete(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.CanDelete&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#Category(Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.Category&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#Column(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.Column&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#Document(System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.Document&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#HasHelp(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.HasHelp&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#ImageListIndex(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.ImageListIndex&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#IsReadOnly(Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.IsReadOnly&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#Line(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.Line&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#NavigateTo">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.NavigateTo&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#NavigateToHelp">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.NavigateToHelp&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#OnDeleteTask">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.OnDeleteTask&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#OnFilterTask(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.OnFilterTask&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#SubcategoryIndex(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.SubcategoryIndex&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#get_Checked(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.get_Checked&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#get_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.get_Priority&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#get_Text(System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.get_Text&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#put_Checked(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.put_Checked&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#put_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.put_Priority&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.Microsoft#VisualStudio#Shell#Interop#IVsTaskItem#put_Text(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsTaskItem.put_Text&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskListItem.GetUserContext(Microsoft.VisualStudio.Shell.Interop.IVsUserContext@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.GetUserContext&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ErrorTask">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;ErrorTask&quot;]" />
            <devdoc>
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ErrorTask.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;ErrorTask.ErrorTask&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ErrorTask.#ctor(System.Exception)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;ErrorTask.ErrorTask1&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ErrorTask.ErrorCategory">
            <summary>
            Gets or sets the error category associated with this task.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ErrorTask.HierarchyItem">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;ErrorTask.Project&quot;]/*" />
            Get/Set the hierarchy item associated with this task.
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ErrorTask.Microsoft#VisualStudio#Shell#Interop#IVsErrorItem#GetHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsErrorItem.GetProject&quot;]/*" />
            todo: This method will soon switch to out IVsHierarchy ppProject
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ErrorTask.Microsoft#VisualStudio#Shell#Interop#IVsErrorItem#GetCategory(System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskListItem.uex" path="docs/doc[@for=&quot;TaskListItem.IVsErrorItem.GetCategory&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TaskPriority">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskPriority.uex" path="docs/doc[@for=&quot;TaskPriority&quot;]" />
            <devdoc>
                This class implements IVsTask.  It provides a 
                framework-friendly way to define a package and its associated 
                services.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskPriority.High">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskPriority.uex" path="docs/doc[@for=&quot;TaskPriority.High&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskPriority.Normal">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskPriority.uex" path="docs/doc[@for=&quot;TaskPriority.Normal&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.TaskPriority.Low">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskPriority.uex" path="docs/doc[@for=&quot;TaskPriority.Low&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TaskProvider">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider&quot;]" />
            <devdoc>
                This class implements IVsTaskProvider.  It provides a 
                framework-friendly way to define a package and its associated 
                services.  
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.#ctor(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.TaskProvider&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Finalize">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.Finalize&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.MaintainInitialTaskOrder">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.MaintainTaskOrder&quot;]/*" />
            Determines whether or not the task list should maintain the task order given to it by the task provider.
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ProviderGuid">
            The TaskList groups all tasks from multiple providers
            that provide the same GUID into one list.  
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.ProviderGuid&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ProviderName">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.ProviderName&quot;]/*" />
            Returns a localized human-readable name for this data provider.
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.AlwaysVisible">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.AlwaysVisible&quot;]/*" />
            Provider is always visible in dropdown even if it has no tasks.
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.DisableAutoRoute">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.DisableAutoRoute&quot;]/*" />
            Provider is always visible in dropdown even if it has no tasks.
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ToolbarGroup">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.ToolbarGroup&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ToolbarId">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.ToolbarId&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.ImageList">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.ImageList&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.Subcategories">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.Subcategories&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.Tasks">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.Tasks&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.VsTaskList">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.VsTaskList&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.Dispose&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Dispose(System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.Dispose1&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.GetService(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.GetService&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Navigate(Microsoft.VisualStudio.Shell.TaskListItem,System.Guid)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;Navigate&quot;]/*" />
            <devdoc>
                Navigates the document in the given task to the given logical view.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Refresh">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.Refresh&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Show">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.Show&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.SuspendRefresh">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.SuspendRefresh&quot;]/*" />
            <devdoc>
            SuspendRefresh stops refresh of the task list from happening until ResumeRefresh
            is called.  It supports nested Suspend/Resume.  The reason for this method is because
            by default, every change to the TaskCollection results in a call to Refresh, and
            the task list updates synchronously when Refresh() is called, so this allows 
            batching of the updates to occur which results in cleaner UI experience.  For
            example, without this refreshing a long task list will cause the task list scrollbar 
            to shrink and grow in a very visible way. By calling Suspend/Resume instead the
            the update of the a longs task list happens with very little visual noise.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.ResumeRefresh">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.ResumeRefresh&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider#EnumTaskItems(Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider.EnumTaskItems&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider#ImageList(System.IntPtr@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider.ImageList&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider#OnTaskListFinalRelease(Microsoft.VisualStudio.Shell.Interop.IVsTaskList)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider.OnTaskListFinalRelease&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider#ReRegistrationKey(System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider.ReRegistrationKey&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider#SubcategoryList(System.UInt32,System.String[],System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider.SubcategoryList&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider2#EnumTaskItems(Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider2.EnumTaskItems&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider2#ImageList(System.IntPtr@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider2.ImageList&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider2#OnTaskListFinalRelease(Microsoft.VisualStudio.Shell.Interop.IVsTaskList)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider2.OnTaskListFinalRelease&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider2#ReRegistrationKey(System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider2.ReRegistrationKey&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider2#SubcategoryList(System.UInt32,System.String[],System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider2.SubcategoryList&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider2#MaintainInitialTaskOrder(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider2.MaintainInitialTaskOrder&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#GetProviderFlags(System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider3.GetProviderFlags&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#GetProviderName(System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider3.GetProviderName&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#GetProviderGuid(System.Guid@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider3.GetProviderGuid&quot;]/*" />
            <devdoc>
            Returns a unique ID for this provider.  This is used to persist and restore per-provider
            data managed by the task list, such as user customizations of column width and order.
            </devdoc>
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#GetProviderToolbar(System.Guid@,System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskProvider.IVsTaskProvider3.GetProviderToolbar&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#GetColumnCount(System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IVsTaskProvider3.GetColumnCount&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#GetColumn(System.Int32,Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IVsTaskProvider3.GetColumn&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#GetSurrogateProviderGuid(System.Guid@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IVsTaskProvider3.GetSurrogateProviderGuid&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#OnBeginTaskEdit(Microsoft.VisualStudio.Shell.Interop.IVsTaskItem)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IVsTaskProvider3.OnBeginTaskEdit&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.Microsoft#VisualStudio#Shell#Interop#IVsTaskProvider3#OnEndTaskEdit(Microsoft.VisualStudio.Shell.Interop.IVsTaskItem,System.Int32,System.Int32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IVsTaskProvider3.OnEndTaskEdit&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.#ctor(Microsoft.VisualStudio.Shell.TaskProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.TaskCollection&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Count">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.Count&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Item(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.this&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Add(Microsoft.VisualStudio.Shell.TaskListItem)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.Add&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Clear">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.Clear&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Contains(Microsoft.VisualStudio.Shell.TaskListItem)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.Contains&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.GetEnumerator">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.GetEnumerator&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.IndexOf(Microsoft.VisualStudio.Shell.TaskListItem)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IndexOf&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Insert(System.Int32,Microsoft.VisualStudio.Shell.TaskListItem)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.Insert&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Remove(Microsoft.VisualStudio.Shell.TaskListItem)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.Remove&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.RemoveAt(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.RemoveAt&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.ICollection.CopyTo&quot;]/*" />
            <internalonly />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#ICollection#IsSynchronized">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.ICollection.IsSynchronized&quot;]/*" />
            <internalonly />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#ICollection#SyncRoot">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.ICollection.SyncRoot&quot;]/*" />
            <internalonly />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#IsFixedSize">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IList.IsFixedSize&quot;]/*" />
            <internalonly />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#IsReadOnly">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IList.IsReadOnly&quot;]/*" />
            <internalonly />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#Item(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IList.this&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#Add(System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IList.Add&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#Clear">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IList.Clear&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#Contains(System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IList.Contains&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#IndexOf(System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IList.IndexOf&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IList.Insert&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#Remove(System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IList.Remove&quot;]/*" />
            <internalonly />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#RemoveAt(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;TaskCollection.IList.RemoveAt&quot;]/*" />
            <internalonly />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ErrorListProvider">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;ErrorListProvider&quot;]/*" />
            <devdoc>
            Use this provider to provide tasks for the Visual Studio Error List
            window. This task provider also has a Guid which is returned from
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.#ctor(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;ErrorListProvider.TaskProvider&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.Finalize">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;ErrorListProvider.Finalize&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.Dispose(System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;ErrorListProvider.Dispose1&quot;]/*" />
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ErrorListProvider.VsTaskList">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;ErrorListProvider.VsTaskList&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.BringToFront">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;ErrorListProvider.BringToFront&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.ForceShowErrors">
            <!-- Failed to insert some or all of included XML --><include file="doc\TaskProvider.uex" path="docs/doc[@for=&quot;ErrorListProvider.ForceShowErrors&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.Show">
            <!-- Failed to insert some or all of included XML --><include file="doc\ErrorListProvider.uex" path="docs/doc[@for=&quot;ErrorListProvider.Show&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ToolWindowCollection">
            <summary>
            Internal class to store the collection of tool windows owned by a package.
            The content of this collection will change not only on explicit requests
            from the package, but also based on the frame events raised by the window.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ToolWindowCollection.ToolWindowID">
            <summary>
            Helper class used as key in the collection of windows.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ToolWindowCollection.ToolWindowListener">
            <summary>
            Helper class that listen for the events raised by the window frame.
            We are interested in the events raised by IVsWindowFrameNotify3, but we need
            to implement IVsWindowFrameNotify in order to register this object
            for notifications. The methods in IVsWindowFrameNotify are not called
            by the shell because we are implementing the other interface.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.ToolWindowCollection.ToolWindowListener.OnFrameClosed">
            <summary>
            Public event raised when the frame is closed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowCollection.ToolWindowListener.SubscribeForEvents(Microsoft.VisualStudio.Shell.ToolWindowPane)">
            <summary>
            Register this object with the window frame to receive notifications.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowCollection.ToolWindowListener.UnsubscribeForEvents(Microsoft.VisualStudio.Shell.ToolWindowPane)">
            <summary>
            Unregister this object from the window frame's notification.
            Note that this method will handle error cases without throwing exceptions because
            there is no way to handle them.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.ToolWindowCollection._listeners">
            <summary>
            This collection is typically small, so we can use HybridDictionary (which internally
            uses a list with linear search characteristics) for small collections and automatically
            self-promotes to a full Dictionary once the collection reaches a certain threshold size.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ToolWindowPane">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane&quot;]/*" />
            <summary>
            Summary description for ToolWindowPane.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.#ctor">
            <summary>
            Creates a new tool window pane with a null parent service provider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.#ctor(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane.ToolWindowPane&quot;]/*" />
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.Caption">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane.Caption&quot;]/*" />
            <summary>
            Get or Set the text on the title bar of the ToolWindow
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.Frame">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane.Frame&quot;]/*" />
            <summary>
            Get or Set the Frame (IvsWindowFrame) hosting the ToolWindow
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.Package">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane.Package&quot;]/*" />
            <summary>
            Get or Set the Package (Microsoft.VisualStudio.Shell.Package) owning the ToolWindow.
            This should only be set by the base Package class when it creates the toolwindow.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.ToolBar">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane.ToolBar&quot;]/*" />
            <summary>
            If the toolwindow has a ToolBar, it is described by this parameter.
            Otherwise this is null
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.ToolBarDropTarget">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane.ToolBarDropTarget&quot;]/*" />
            <summary>
            If the toolwindow has a ToolBar, allows intercepting drag and drop operations on the toolbar.
            Otherwise this is null
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.ToolBarCommandTarget">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane.ToolBarCommandTarget&quot;]/*" />
            <summary>
            If the toolwindow has a ToolBar then this property allows to customize its command target. If this value is
            null then window frame of this toolwindow is used as the command target for the ToolBar. Like other toolbar
            related properties, this property must be set before the initialization of the ToolWindowPane is complete.        
            </summary>
            <exception cref="T:System.Exception">If this property is set after the intialization of this ToolWindowPane then an 
            <see cref="T:System.Exception" /> is thrown.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.ToolBarLocation">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane.ToolBarLocation&quot;]/*" />
            <summary>
            Get or Set where the toolbar should be in the tool window (Up, down, left, right).
            This parameter is based on VSTWT_LOCATION
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.ToolClsid">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane.ToolClsid&quot;]/*" />
            <summary>
            This is used to specify the CLSID of a tool that should be used for this toolwindow
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.BitmapResourceID">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane.BitmapResourceID&quot;]/*" />
            <summary>
            Get or Set the resource ID for the bitmap strip from which to take the window frame icon. BitmapImageMoniker 
            should be used instead, as using BitmapIndex and BitmapResourceId results in an icon that is not DPI-aware.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.BitmapIndex">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane.BitmapIndex&quot;]/*" />
            <summary>
            Get or Set the index of the image to use in the bitmap strip for the window frame icon. BitmapImageMoniker 
            should be used instead, as using BitmapIndex and BitmapResourceId results in an icon that is not DPI-aware.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.BitmapImageMoniker">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane.BitmapImageMoniker&quot;]/*" />
            <summary>
            Get or Set the ImageMoniker for the icon for this tool window. This property should be used instead
            of BitmapResource and BitmapIndex to allow for DPI-aware icons.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.UpdateBitmapImageMonikerOnFrame">
            <summary>
            Updates the frame with the value from bitmapImageMoniker, if it's not null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.SearchHost">
            <summary>
            Gets the search host implementation associated with this tool window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.GetIVsWindowPane">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane.GetIVsWindowPane&quot;]/*" />
            <summary>
            This method makes it possible to provide an IVsWindowPane not derived from ToolWindowPane
            To support that scenario one would override this method and create their IVsWindowPane and
            return it.
            </summary>
            <returns>IVsWindowPane to be hosted in the toolwindow frame</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.OnToolWindowCreated">
            <!-- Failed to insert some or all of included XML --><include file="doc\ToolWindowPane.uex" path="docs/doc[@for=&quot;ToolWindowPane.OnToolWindowCreated&quot;]/*" />
            <summary>
            This method can be overriden by the derived class to execute
            any code that needs to run after the IVsWindowFrame is created.
            If the toolwindow has a toolbar with a combobox, it should make
            sure its command handler are set by the time they return from
            this method.
            This is called when someone set the Frame property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.OnToolBarAdded">
            <summary>
            This should be overriden if you want to run code before the window is shown
            but after its toolbar is added.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.AddToolbar(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <summary>
            Adds the toolbar for this tool window to a window frame.
            </summary>
            <param name="frame">The window frame to which the toolbar is added</param>
            <returns>
            True if the tool window has a toolbar that was added to the frame, false if
            the tool window doesn't have a toolbar.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.Microsoft#VisualStudio#Shell#Interop#IVsWindowSearch#Category">
            <summary>
            Return the search category.
            </summary>
            <param name="pguidCategoryId">The search category (used for instance to store MRU items if the search supports MRU)</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.SearchCategory">
            <summary>
            The search category that's used for storing MRU items (should the window search implementation for your toolwindow support most-recently-used search strings)
            By default, the toolwindow guid is used for the search category.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.ClearSearch">
            <summary>
            Clear the pane of results from a previously completed or partial search
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.CreateSearch(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery,Microsoft.VisualStudio.Shell.Interop.IVsSearchCallback)">
            <summary>
            Override at least this function if you need to support search in a toolwindow
            </summary>
            <param name="dwCookie">The cookie identifying the search</param>
            <param name="pSearchQuery">The search query</param>
            <param name="pSearchCallback">A callback interface whose functions need to be called when the search task is complete or has made more progress.</param>
            <returns>The search task created. The search begins when an explicit call to Start method on the task will be made.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.OnNavigationKeyDown(System.UInt32,System.UInt32)">
            <summary>
            Allows the pane to intercept certains keys (after a search is started), and navigate between the results or select one of the results displayed in the pane.
            </summary>
            <param name="dwNavigationKey">Navigation key of interest of values from VSConstants.VsSearchNavigationKeys</param>
            <param name="dwModifiers">Modifier flags of values from VSConstants.VsUIAccelModifiers</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.ProvideSearchSettings(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
            <summary>
            Allows override of default search settings. By default, the search is started delayed, with indefinite progress.
            The named of properties that can be overriden are defined in the class <see cref="T:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames" />.
            Values implementing <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIObject" /> interface can be constructed for common types using <see cref="T:Microsoft.Internal.VisualStudio.PlatformUI.BuiltInPropertyValue" /> class, or
            one could use helper functions like <see cref="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.SetValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,System.Object)" /> to set values in the data source.
            </summary>
            <param name="pSearchSettings">The data source with default search settings that can be overriden by the toolwindow.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.SearchEnabled">
            <summary>
            Override this if you want to support search in your window.
            You will also need to override other functions from IVsWindowSearch interface, like CreateSearch, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.SearchFiltersEnum">
            <summary>
            Override this function if the toolwindow supports search filters
            The class <see cref="T:Microsoft.VisualStudio.PlatformUI.WindowSearchFilterEnumerator" /> can be used to construct an enumerator over an array of search filters implementing <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchFilter" /> interface.
            </summary>
            <param name="ppEnum">An enumeration of the supported search filters</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ToolWindowPane.SearchOptionsEnum">
            <summary>
            Override this function if the toolwindow supports search options
            The class <see cref="T:Microsoft.VisualStudio.PlatformUI.WindowSearchOptionEnumerator" /> can be used to construct an enumerator over an array of search options implementing <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowSearchOption" /> interface.
            </summary>
            <param name="ppEnum">An enumeration of the supported search options</param>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.ToolWindowPane.InfoBarClosed">
            <summary>
            Event raised when an info bar associated with this ToolWindowPane is closed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.ToolWindowPane.InfoBarActionItemClicked">
            <summary>
            Event raised when a button or hyperlink on an info bar associated with this ToolWindowPane
            is clicked.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.AddInfoBar(Microsoft.VisualStudio.Shell.Interop.IVsInfoBar)">
            <summary>
            Adds an info bar to this ToolWindowPane.  The info bar will show at the top of the pane's frame
            when that frame is visible on screen.
            </summary>
            <param name="infoBar">The info bar to add to the pane.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.AddInfoBar(Microsoft.VisualStudio.Shell.Interop.IVsUIElement)">
            <summary>
            Adds an info bar to this ToolWindowPane.  The info bar will show at the top of the pane's frame
            when that frame is visible on screen.
            </summary>
            <param name="uiElement">The UI element representing the info bar.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.RemoveInfoBar(Microsoft.VisualStudio.Shell.Interop.IVsInfoBar)">
            <summary>
            Removes an info bar from this ToolWindowPane.
            </summary>
            <param name="infoBar">The info bar to remove from the pane.  This info bar must
            have been added using AddInfoBar.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.RemoveInfoBar(Microsoft.VisualStudio.Shell.Interop.IVsUIElement)">
            <summary>
            Removes and info bar from this ToolWindowPane.
            </summary>
            <param name="uiElement">The info bar UI element to remove from the pane.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.OnInfoBarClosed(Microsoft.VisualStudio.Shell.Interop.IVsInfoBarUIElement,Microsoft.VisualStudio.Shell.Interop.IVsInfoBar)">
            <summary>
            Called when an info bar added via AddInfoBar is closed.  If this method is overridden,
            the base implementation must be called to raise the InfoBarClosed event.
            </summary>
            <param name="infoBarUI">The UI element for the info bar that was closed.</param>
            <param name="infoBar">The info bar model for the info bar that was closed.
            May be null if an info bar UI element was added without having a known model.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.OnInfoBarActionItemClicked(Microsoft.VisualStudio.Shell.Interop.IVsInfoBarUIElement,Microsoft.VisualStudio.Shell.Interop.IVsInfoBar,Microsoft.VisualStudio.Shell.Interop.IVsInfoBarActionItem)">
            <summary>
            Called when an action item on an info bar added via AddInfoBar is clicked.  If this method is overridden,
            the base implementation must be called to raise the InfoBarActionItemClicked event.
            </summary>
            <param name="infoBarUI">The UI element for the info bar that was closed.</param>
            <param name="infoBar">The info bar model for the info bar that was closed.
            May be null if an info bar UI element was added without having a known model.</param>
            <param name="actionItem">The action item that was clicked on the info bar.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.AddInfoBar(Microsoft.VisualStudio.Shell.ToolWindowPane.InfoBarEvents)">
            <summary>
            Helper method for adding an info bar sourced from either an IVsInfoBar data model
            or a direct UI element.
            </summary>
            <param name="events">The event sink storing data about a particular info bar.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.AddPendingInfoBar(System.Object)">
            <summary>
            Adds an info bar to a list of info bars that are pending load.
            </summary>
            <param name="uiElementOrInfoBarEvents">The info bar to put into the frame
            once it's available.  For IVsInfoBarUIElements, this object will be an InfoBarEvents
            wrapper.  For IVsUIElements that don't implement IVsInfoBarUIElement,
            this will be the direct raw UI element.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.AddInfoBarDirect(Microsoft.VisualStudio.Shell.Interop.IVsUIElement)">
            <summary>
            Directly adds an info bar element to the frame's info bar host.
            </summary>
            <param name="uiElement">The UI element to add to the host.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.ConnectInfoBars">
            <summary>
            Connects all pending info bars after the frame has been connected to this ToolWindowPane.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.ConnectInfoBarsDirect(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Connects pending info bars when the frame has been connected to this ToolWindowPane.
            </summary>
            <param name="infoBarObjects">The enumeration of info bars to add.
            For IVsInfoBarUIElements, this object will be an InfoBarEvents
            wrapper.  For IVsUIElements that don't implement IVsInfoBarUIElement,
            this will be the direct raw UI element.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.TryGetInfoBarHost(Microsoft.VisualStudio.Shell.Interop.IVsInfoBarHost@)">
            <summary>
            Tries to get the info bar host from the frame.
            </summary>
            <param name="infoBarHost">The IVsInfoBarHost for placing info bars in this frame.</param>
            <returns>True if retrieving the host succeeded, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ToolWindowPane.TryCreateInfoBarUI(Microsoft.VisualStudio.Shell.Interop.IVsInfoBar,Microsoft.VisualStudio.Shell.Interop.IVsInfoBarUIElement@)">
            <summary>
            Creates an IVsInfoBarUIElement for an IVsInfoBar by using a UI factory.
            </summary>
            <param name="infoBar">The info bar to create a UI element for.</param>
            <param name="uiElement">The created UI element for the info bar.</param>
            <returns>True if creation succeeded, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ToolWindowPane.InfoBarEvents">
            <summary>
            Event sink for listening to close and click events on an info bar.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.UIContext">
            <summary>
            Represents the active state of a UIContext
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.UIContext.UIContextChanged">
            <summary>
            Event that fires whenever the UIContext becomes active or inactive.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Shell.UIContext.PropertyChanged">
            <summary>
            Event that fires when the IsActive property changes values.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContext.FromUIContextGuid(System.Guid)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.Shell.UIContext" /> instance identified with the given guid.
            </summary>
            <param name="contextGuid">Guid of the UIContext</param>
            <returns>Constructed UIContext instance.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIContext.IsZombie">
            <summary>
            Gets a value indicating whether this <see cref="T:Microsoft.VisualStudio.Shell.UIContext" /> is a zombie.
            This can be <c>true</c> when VS is in command line mode, or if this value is queried for too early during startup.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIContext.IsActive">
            <summary>
            Returns the current state of the UIContext whether it is active or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContext.WhenActivated(System.Action)">
            <summary>
            Execute the given action if the context is active. If the context
            is not currently active, the action will be executed when it is
            first activated. The action executes at most once.
            </summary>
            <param name="action">The operation to execute</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContext.GetAwaiter">
            <summary>
            Method that enables UIContexts to be awaitable. The awaiter resumes the caller on the same context, i.e.,
            If the caller was on the UI thread when awaited, the code after the await would resume on the UI thread.
            </summary>
            <returns>A task awaiter</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIContext.Guid">
            <summary>
            Gets the Guid used to create this UIContext.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.UIContextChangedEventArgs">
            <summary>
            Event arguments for <see cref="E:Microsoft.VisualStudio.Shell.UIContext.UIContextChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContextChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructs an instance of <see cref="T:Microsoft.VisualStudio.Shell.UIContextChangedEventArgs" />.
            </summary>
            <param name="activated">Whether UIContext is active or not.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIContextChangedEventArgs.Activated">
            <summary>
            Gets if the UIContext has become active or not.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.UIContextImpl">
            <summary>
            Implementation details for the UI Context monitor
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.UIContextImpl.DummyContext">
            <summary>
            Dummy UIContext to be used when the monitor selection service is not
            able to support UIContexts (e.g. command line mode)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIContextImpl.Reset">
            <summary>
            Used for unit tests to avoid state bleeding between tests due to the singleton
            instance of this class caching registered UI contexts.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.UIElementDialogPage">
            <summary>
            Class which is used to seamlessly host WPF content inside a native dialog
            running an IsDialogMessage-style message loop.  UIElementDialogPage enables
            tabbing into and out of the WPF child HWND, and enables keyboard navigation
            within the WPF child HWND.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.UIElementDialogPage.DialogKeyPendingEvent">
            <summary>
            Routed event used to determine whether or not key input in the dialog should be handled by the dialog or by
            the content of this page.  If this event is marked as handled, the keypress should be handled by the content,
            and DLGC_WANTALLKEYS will be returned from WM_GETDLGCODE.  If the event is not handled, then only arrow keys,
            tabbing, and character input will be handled within this dialog page.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIElementDialogPage.Window">
            <summary>
            Returns the handle to the UI control hosted in the ToolsOption page.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIElementDialogPage.Child">
            <summary>
            Gets the WPF child element to be hosted inside the dialog page.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIElementDialogPage.HookChildHwndSource(System.Windows.UIElement)">
            <summary>
            Observes for HwndSource changes on the given UIElement,
            and adds and removes an HwndSource hook when the HwndSource
            changes.
            </summary>
            <param name="child">The UIElement to observe.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.UIElementDialogPage.DialogPageElementHost">
            <summary>
            Subclass of ElementHost designed to work around focus problems with ElementHost.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.UIElementDialogPage.DialogKeyboardInputSite">
            <summary>
            The default IKeyboardInputSite that ElementHost uses relies on being hosted
            in a pure Windows Forms window for tabbing outside the ElementHost's WPF content.
            However, this DialogPageElementHost is hosted inside a Win32 dialog, and should
            rely on the Win32 navigation logic directly.  This replaces the default
            IKeyboardInputSite with one that has specialized handling for OnNoMoreTabStops.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.UIElementDialogPage.DialogKeyboardInputSite.Sink">
            <summary>
            Gets the IKeyboardInputSink associated with this site.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.Url">
            <summary>
            This class wraps the Uri class and provides an unescaped "LocalPath" for file URL's
            and an unescaped AbsoluteUri for other schemes, plus it also returned an un-hex-escaped
            result from MakeRelative so it can be presented to the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.Url.Directory">
            <summary>Returns the AbsoluteUrl for the parent directory containing the file 
            referenced by this URL object, where the Directory string is also unescaped.</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.Url.GetRemainder(System.Int32)">
            <summary>
            Return unescaped relative path starting segment i.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.PackageUtilities">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities&quot;]" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.PackageUtilities.InvalidFilenameCharacters">
            <summary>
            An array of characters that are considered invalid when found in a segment of a file path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetSystemAssemblyPath">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.GetSystemAssemblyPath&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.EnsureOutputPath(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.EnsureOutputPath&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.ContainsInvalidFileNameChars(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.ContainsInvalidFileNameChars&quot;]" />
            <devdoc>
            Returns true if the name that can represent a path, absolute or relative, or a file name contains invalid filename characters.
            </devdoc>
            <param name="name">File name</param>
            <returns>true if file name is invalid</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.IsFileNameInvalid(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.IsFileNameInvalid&quot;]" />
            <devdoc>
            Checks if a file name is invalid.
            </devdoc>
            <param name="fileName">The name of the file</param>
            <returns>True if the file is invalid.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.CopyUrlToLocalAsync(System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            Downloads a file from a given URL to a local file path.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.CopyUrlToLocal(System.Uri,System.String)">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.PackageUtilities.CopyUrlToLocalAsync(System.Uri,System.String,System.Threading.CancellationToken)" />
            <remarks>A timeout of 10 seconds is applied.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.MakeRelativeIfRooted(System.String,Microsoft.VisualStudio.Shell.Url)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.MakeRelativeIfRooted&quot;]" />
            <devdoc>
            If this file is in the same folder the Url or below make it relative to the current Url
            </devdoc>
            <param name="fileName">filename (is rooted) to be transformed</param>
            <param name="url">the location to make the filename relative to</param>
            <returns>the relative path to the url or returns filename if not rooted</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetPathDistance(System.Uri,System.Uri)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.GetPathDistance&quot;]" />
            <devdoc>
            Given two uris calculates the distance from the second path top the first one.
            </devdoc>
            <returns>The distance in path, if it can make it or the fullpath of the second uri if there if relative path does not make sense.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.MakeRelative(System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.MakeRelative&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.CreateCAUUIDFromGuidArray(System.Guid[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.CreateCAUUIDFromGuidArray&quot;]" />
            <devdoc>
            Creates a CAUUID from a guid array. Memory is allocated for the elems.
            It is the responsability of the caller to release this memory.
            </devdoc>
            <param name="guids" />
            <returns />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetIntPointerFromImage(System.Drawing.Image)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.GetIntPointerFromImage&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetImageList(System.Reflection.Assembly,System.String[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.GetImageList&quot;]" />
            <devdoc>
            Creates an imagelist from resourcenames that are assumed to be icons.
            </devdoc>
            <param name="assembly" />
            <param name="resourceNames" />
            <returns />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetImageList(System.IO.Stream)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.GetImageList&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetImageList(System.Object)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.GetImageList&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.ConvertToType``1(``0,System.Type,System.Globalization.CultureInfo)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.ConvertToType&quot;]" />
            <devdoc>
            Helper method to call a converter explicitely to convert to an enum type
            </devdoc>
            <typeparam name="T">The enum to convert to</typeparam>
            <param name="value">The enum value to be converted to</param>
            <param name="typeToConvert">The type to convert</param>
            <param name="culture">The culture to use to read the localized strings</param>
            <returns />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.ConvertFromType``1(System.String,System.Globalization.CultureInfo)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.ConvertFromType&quot;]" />
            <devdoc>
            Helper method for converting from a string to an enum using a converter.
            </devdoc>
            <param name="value" />
            <param name="culture">The culture to use to read the localized strings</param>
            <returns />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.SetStringValueFromConvertedEnum``1(``0,System.Globalization.CultureInfo)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.SetStringValueFromConvertedEnum&quot;]" />
            <devdoc>
            Sets a string value from an enum
            </devdoc>
            <typeparam name="T">The enum type</typeparam>
            <param name="enumValue">The value of the enum.</param>
            <param name="culture" />
            <returns />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.CreateInstance(Microsoft.VisualStudio.Shell.Interop.ILocalRegistry,System.Guid)">
            <summary>
            Creates a cocreateable COM object.
            </summary>
            <param name="localRegistry">The SLocalRegistry service.</param>
            <param name="clsid">The CLSID of the object to create.</param>
            <returns>The instantiated object, or null if unsuccessful.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.CreateInstance(System.Guid)">
            <summary>
            Creates a cocreateable COM object.
            </summary>
            <param name="clsid">The CLSID of the object to create.</param>
            <returns>The instantiated object, or null if unsuccessful.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.CreateInstance(System.Type)">
            <summary>
            Creates a cocreateable COM object.
            </summary>
            <param name="cocreateableType">The type whose GUID is used to cocreate the COM object.</param>
            <returns>The instantiated object, or null if unsuccessful.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.QueryService(Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.Guid)">
            <summary>
            Gets a service exposed by a service provider based on its service GUID.
            </summary>
            <param name="serviceProvider">The service provider to query.</param>
            <param name="serviceGuid">The service GUID.</param>
            <returns>The service, if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.QueryService``1(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary>
            Gets a service exposed by a service provider based on its service type.
            </summary>
            <typeparam name="TService">The type whose <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> specifies the service GUID to query for.</typeparam>
            <param name="serviceProvider">The service provider to query.</param>
            <returns>The service, if found; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.IsCapabilityMatch(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String)">
            <summary>
            Checks whether a given project matches the requirements prescribed in an AppliesTo expression.
            </summary>
            <param name="project">The project to test compatibility.</param>
            <param name="capabilityAppliesToExpression">
            The capability expression, such as "(VisualC | CSharp) + (MSTest | NUnit)".
            The '|' is the OR operator.
            The '&amp;' and '+' characters are both AND operators.
            The '!' character is the NOT operator.
            Parentheses force evaluation precedence order.
            A null or empty expression is evaluated as a match.
            </param>
            <returns><c>true</c> if the project contains a matching set of project capabilities; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.IsCapabilityMatch(System.String,System.String)">
            <summary>
            Checks whether a given set of project capabilities fulfills the requirements prescribed in an AppliesTo expression.
            </summary>
            <param name="capabilities">A space-delimited list of project capabilities, same format as __VSHPROPID5.VSHPROPID_ProjectCapabilities  -- null and empty is allowed and results in an empty set of project capabilities during evaluation.</param>
            <param name="capabilityAppliesToExpression">
            The capability expression, such as "(VisualC | CSharp) + (MSTest | NUnit)".
            The '|' is the OR operator.
            The '&amp;' and '+' characters are both AND operators.
            The '!' character is the NOT operator.
            Parentheses force evaluation precedence order.
            A null or empty expression is evaluated as a match.
            </param>
            <returns><c>true</c> if the project contains a matching set of project capabilities; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.IsCapabilityMatch(Microsoft.VisualStudio.Shell.Interop.IVsBooleanSymbolPresenceChecker,System.String)">
            <summary>
            Checks whether a given project matches the requirements prescribed in an AppliesTo expression.
            </summary>
            <param name="capabilityPresenceChecker">The project capability presence checker to use when evaluating the expression.</param>
            <param name="capabilityAppliesToExpression">
            The capability expression, such as "(VisualC | CSharp) + (MSTest | NUnit)".
            The '|' is the OR operator.
            The '&amp;' and '+' characters are both AND operators.
            The '!' character is the NOT operator.
            Parentheses force evaluation precedence order.
            A null or empty expression is evaluated as a match.
            </param>
            <returns><c>true</c> if the project contains a matching set of project capabilities; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.GetEnumConverter``1">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.GetEnumConverter&quot;]" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.ProfferService``2(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Proffers a service implemented by the specified type to a service container
            </summary>
            <typeparam name="TService">Service type</typeparam>
            <typeparam name="TImpl">Type implementing <typeparamref name="TService" /></typeparam>
            <param name="serviceContainer">Service container to proffer to</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.ProfferService``1(Microsoft.VisualStudio.Shell.IAsyncServiceContainer,System.Func{System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Proffers a service implemented by the specified type to an async service container.
            When the service is queried the first time, the <paramref name="creator" /> function
            will be called.  The proffered service will be promoted to the parent async service
            container.
            </summary>
            <typeparam name="TService">Service type</typeparam>
            <param name="serviceContainer">Service container to proffer to</param>
            <param name="creator">The creator function</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.ProfferService``1(Microsoft.VisualStudio.Shell.IAsyncServiceContainer,System.Func{System.Threading.Tasks.Task{System.Object}},System.Boolean)">
            <summary>
            Proffers a service implemented by the specified type to an async service container.
            When the service is queried the first time, the <paramref name="creator" /> function
            will be called.
            </summary>
            <typeparam name="TService">Service type</typeparam>
            <param name="serviceContainer">Service container to proffer to</param>
            <param name="creator">The creator function</param>
            <param name="promote">Indicates whether the service should be promoted to the parent service container</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.ProfferService``1(Microsoft.VisualStudio.Shell.IAsyncServiceContainer,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Proffers a service implemented by the specified type to an async service container.
            When the service is queried the first time, the <paramref name="creator" /> function
            will be called.  The proffered service will be promoted to the parent async service
            container.
            </summary>
            <typeparam name="TService">Service type</typeparam>
            <param name="serviceContainer">Service container to proffer to</param>
            <param name="creator">The creator function</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.ProfferService``1(Microsoft.VisualStudio.Shell.IAsyncServiceContainer,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Object}},System.Boolean)">
            <summary>
            Proffers a service implemented by the specified type to an async service container.
            When the service is queried the first time, the <paramref name="creator" /> function
            will be called.
            </summary>
            <typeparam name="TService">Service type</typeparam>
            <param name="serviceContainer">Service container to proffer to</param>
            <param name="creator">The creator function</param>
            <param name="promote">Indicates whether the service should be promoted to the parent service container</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.IsFilePartInvalid(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.IsFilePartInValid&quot;]" />
            <devdoc>
            Checks whether a file part contains invalid characters or is empty.
            </devdoc>
            <param name="filePart">One segment of a file path or file name. This can be any part of a non rooted path.</param>
            <returns><c>true</c> if <paramref name="filePart" /> contains invalid characters or is empty; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.IsFileNameAllGivenCharacter(System.Char,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\Utilities.uex" path="docs/doc[@for=&quot;PackageUtilities.IsFileNameAllGivenCharacter&quot;]" />
            <devdoc>
            Checks if the file name is all the given character.
            </devdoc>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Shell.PackageUtilities.TrimPrefix(System.String,System.String,System.StringComparison)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Shell.PackageUtilities.TrimSuffix(System.String,System.String,System.StringComparison)" -->
        <member name="M:Microsoft.VisualStudio.Shell.PackageUtilities.IsExperimentalVersionOfVsForVsipDevelopment(System.String@)">
            <summary>
            Return true if this application was launched with the "/rootsuffix" command line switch.
            </summary>
            <param name="rootSuffix">argument of the /rootsuffix commandline switch. This will typically be "Exp".</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.ValueTokenizer">
            <summary>
            ValueTokenizer will keep a list of Tokens and Values that correspond to those tokens.
            This class is used to tokenize / untokenize a given string.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.ValueTokenizer.ReplaceEnvironmentVariables">
            <summary>
            Indicates if environment variables will be replaced when untokenizing a string.
            To be replaced, environment variables must be in the format: %variable%
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ValueTokenizer.AddToken(System.String,System.String)">
            <summary>
            Add a token and its value to our list.
            </summary>
            <param name="tokenName">Token to add</param>
            <param name="value">Value of the token</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ValueTokenizer.TokenizeFrontValue(System.Object)">
            <summary>
            If the list contains a value that is at the front of the parameter string,
            it will replace it with its corresponding token.
            </summary>
            <param name="value">String to be converted</param>
            <returns>Tokenized string</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.ValueTokenizer.UntokenizeValue(System.Object)">
            <summary>
            If the list contains a token that is part of the parameter string, it will replace it with its corresponding value.
            Optionally, replaces environment variables found in the parameter string.
            </summary>
            <param name="value">String to be converted</param>
            <returns>Untokenized string</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsBrushes">
            <devdoc>
            Class used to map between VSCOLOR identifiers (used by IVsUIShell2.GetVSSysColorEx)
            and keys used by WPF ResourceDictionaries.  The keys provided by this class can be used
            to reference System.Windows.Media.Brush instances that Visual Studio places in Application.Current.Resources.
            
            Example: this could be used from XAML to reference a VS color:
                <Border xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.10.0" Background="{DynamicResource {x:Static vsshell:VsBrushes.DropShadowBackgroundKey}}" />
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsBrushes.GetBrushKey(System.Int32)">
            <devdoc>
            Gets the WPF ResourceDictionary brush key for a given VSCOLOR identifier.
            The input is an identifier from the VSCOLOR enumeration used with
            IVsUIShell2.GetVSSysColorEx.  The output is a key which can be used to reference
            the brush in Visual Studio from XAML.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsBrushes.GetColorID(System.Object)">
            <devdoc>
            Gets the VSCOLOR identifier for a given WPF brush resource key.
            The input is a key which can be used to reference
            the color in Visual Studio from XAML.
            The output is an identifier from the VSCOLOR enumeration used with
            IVsUIShell2.GetVSSysColorEx.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsColors">
            <devdoc>
            Class used to map between VSCOLOR identifiers (used by IVsUIShell2.GetVSSysColorEx)
            and keys used by WPF ResourceDictionaries.  The keys provided by this class can be used
            to reference System.Windows.Media.Color instances that Visual Studio places in Application.Current.Resources.
            
            Example: this could be used from XAML to reference a VS color:
                <SolidColorBrush xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.10.0" Color="{DynamicResource {x:Static vsshell:VsColors.DropShadowBackgroundKey}}" />
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsColors.GetColorKey(System.Int32)">
            <devdoc>
            Gets the WPF ResourceDictionary color key for a given VSCOLOR identifier.
            The input is an identifier from the VSCOLOR enumeration used with
            IVsUIShell2.GetVSSysColorEx.  The output is a key which can be used to reference
            the color in Visual Studio from XAML.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsColors.GetColorID(System.Object)">
            <devdoc>
            Gets the VSCOLOR identifier for a given WPF color resource key.
            The input is a key which can be used to reference
            the color in Visual Studio from XAML.
            The output is an identifier from the VSCOLOR enumeration used with
            IVsUIShell2.GetVSSysColorEx.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsColors.GetCurrentThemedColorValues">
            <summary>
            Gets and returns all of the current color values in a single Dictionary.  This is useful for scenarios
            where colors are required outside the Visual Studio process or in an AppDomain other than the primary
            AppDomain, where all of the colors may need to be copied in bulk.
            </summary>
            <returns>A dictionary mapping the keys for colors to their ARGB value for the current theme.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsColors.GetThemedColorRgba(Microsoft.VisualStudio.Shell.Interop.IVsUIShell5,Microsoft.VisualStudio.Shell.ThemeResourceKey)">
            <summary>
            Gets a uint VS_RGBA value from the current theme for the given color key.
            The returned value ha the red channel in the low byte to the alpha channel in the high byte.
            </summary>
            <param name="vsUIShell">The IVsUIShell5 service, used to get the color's value.</param>
            <param name="themeResourceKey">The key to find the color for.</param>
            <returns>The current theme's VS_RGBA value of the named color.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsColors.GetThemedGDIColor(Microsoft.VisualStudio.Shell.Interop.IVsUIShell5,Microsoft.VisualStudio.Shell.ThemeResourceKey)">
            <summary>
            Gets a System.Drawing.Color value from the current theme for the given color key.
            </summary>
            <param name="vsUIShell">The IVsUIShell5 service, used to get the color's value.</param>
            <param name="themeResourceKey">The key to find the color for.</param>
            <returns>The current theme's value of the named color.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsColors.GetThemedWPFColor(Microsoft.VisualStudio.Shell.Interop.IVsUIShell5,Microsoft.VisualStudio.Shell.ThemeResourceKey)">
            <summary>
            Gets a System.Windows.Media.Color value from the current theme for the given color key.
            </summary>
            <param name="vsUIShell">The IVsUIShell5 service, used to get the color's value.</param>
            <param name="themeResourceKey">The key to find the color for.</param>
            <returns>The current theme's value of the named color.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsEnumerable`3">
            <summary>
            Represents a VS-style enumeration of TComEnumerated objects created from an enumeration of TEnumerated.
            Base class for VS-style enumerators using Dev10 and older enumerator interfaces that use PreserveSig
            </summary>
            <typeparam name="TComEnumerator">COM enumerator type (e.g. IVsUIEnumDataSourceVerbs)</typeparam>
            <typeparam name="TComEnumerated">Type enumerated by <typeparamref name="TComEnumerator" /> (e.g. string)</typeparam>
            <typeparam name="TEnumerated">The type of elements in the collection wrapped by the COM enumerator type (e.g. UIDataSourceVerb)</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsEnumerable`3.#ctor(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Constructs an Enumerator instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsEnumerable`3.CreateEnumerator(System.Collections.Generic.IEnumerable{`2},System.Int32)">
            <summary>
            Create a new instance of derived class that is the COM-enumerator over the enumerated collection,
            starting from the specified enumerator position.
            Derived classes need to implement the following pattern:
            - create a private constructor with similar parameters as this function, calling the protected constructor 
              in this base class with the same signature (collection/enumeratorPosition)
            - override the CreateEnumerator function and call the derived class' constructor with the 2 parameters
            </summary>
            <param name="collection">The collection to be enumerated</param>
            <param name="enumeratorPosition">The position of the created enumerator in the collection</param>
            <returns>An instance of the derived class implementing the enumerator</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsEnumerable`3.GetElement(`2,`1@)">
            <summary>
            Converts an element in the enumerated input collection of type TEnumerated to a TComEnumerated element 
            to be returned by the VS-style enumerator.
            (e.g. converts a UIDataSourceVerb to the COM-enumerated type 'string' by selecting the verb's name)
            </summary>
            <param name="enumeratedElement">An element in the input enumerated collection</param>
            <param name="comElement">An element to be returned by the Next() function of the com enumerator</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsEnumerable`2">
            <summary>
            Base class for VS-style enumerators using Dev10 and older enumerator interfaces that use PreserveSig
            </summary>
            <typeparam name="TComEnumerator">COM enumerator type (e.g. IEnumString)</typeparam>
            <typeparam name="TComEnumerated">Type enumerated by <typeparamref name="TComEnumerator" /> (e.g. string)</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsEnumerableEx`2">
            <summary>
            Base class for VS-style enumerators using Dev11 and later enumerator interfaces that don't use PreserveSig
            </summary>
            <typeparam name="TComEnumerator">COM enumerator type (e.g. IVsEnumWindowSearchOptions)</typeparam>
            <typeparam name="TComEnumerated">Type enumerated by <typeparamref name="TComEnumerator" /> (e.g. IVsWindowSearchOption)</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsFonts">
            <devdoc>
            This class contains the resource names for Environment fonts.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.EnvironmentFontFamilyKey">
            <summary>
            The resource key for the Environment font family.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.EnvironmentFontSizeKey">
            <summary>
            The resource key for the Environment font's size.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment375PercentFontSizeKey">
            <summary>
            The resource key for the Environment font with 375% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment330PercentFontSizeKey">
            <summary>
            The resource key for the Environment font with 330% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment310PercentFontSizeKey">
            <summary>
            The resource key for the Environment font with 310% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment283PercentFontSizeKey">
            <summary>
            The resource key for the Environment font with 283% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment200PercentFontSizeKey">
            <summary>
            The resource key for the Environment font with 200% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment155PercentFontSizeKey">
            <summary>
            The resource key for the Environment font with 155% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment133PercentFontSizeKey">
            <summary>
            The resource key for the Environment font with 133% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment122PercentFontSizeKey">
            <summary>
            The resource key for the Environment font with 122% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment111PercentFontSizeKey">
            <summary>
            The resource key for the Environment font with 111% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment90PercentFontSizeKey">
            <summary>
            The resource key for the Environment font with 90% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment66PercentFontSizeKey">
            <summary>
            The resource key for the Environment font with 66% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment375PercentFontWeightKey">
            <summary>
            The resource key for the Environment font weight for 375% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment330PercentFontWeightKey">
            <summary>
            The resource key for the Environment font weight for 330% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment310PercentFontWeightKey">
            <summary>
            The resource key for the Environment font weight for 310% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment283PercentFontWeightKey">
            <summary>
            The resource key for the Environment font weight for 283% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment200PercentFontWeightKey">
            <summary>
            The resource key for the Environment font weight for 200% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment155PercentFontWeightKey">
            <summary>
            The resource key for the Environment font weight for 155% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment133PercentFontWeightKey">
            <summary>
            The resource key for the Environment font weight for 133% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment122PercentFontWeightKey">
            <summary>
            The resource key for the Environment font weight for 122% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment111PercentFontWeightKey">
            <summary>
            The resource key for the Environment font weight for 111% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment90PercentFontWeightKey">
            <summary>
            The resource key for the Environment font weight for 90% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.Environment66PercentFontWeightKey">
            <summary>
            The resource key for the Environment font weight for 66% scaling
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.EnvironmentBoldFontWeightKey">
            <summary>
            The resource key for the Environment font weight of Bold
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.CaptionFontFamilyKey">
            <summary>
            The resource key for the Caption font family.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.CaptionFontSizeKey">
            <summary>
            The resource key for the Caption font's size.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsFonts.CaptionFontWeightKey">
            <summary>
            The resource key for the Caption font's weight.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsMenus">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_CODEWIN">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_CODEWIN&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_ITEMNODE">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_ITEMNODE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_PROJNODE">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_PROJNODE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_REFERENCEROOT">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_REFERENCEROOT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_REFERENCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_REFERENCE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_FOLDERNODE">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_FOLDERNODE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_NOCOMMANDS">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_NOCOMMANDS&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.VSCmdOptQueryParameterList">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.VSCmdOptQueryParameterList&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_XPROJ_MULTIITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_XPROJ_MULTIITEM&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_XPROJ_PROJITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_XPROJ_PROJITEM&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_DEPENDENCYTARGET">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_DEPENDENCYTARGET&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_REFERENCE_GROUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_REFERENCE_GROUP&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_PACKAGEREFERENCE_GROUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_PACKAGEREFERENCE_GROUP&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_PACKAGEREFERENCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_PACKAGEREFERENCE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_COMREFERENCE_GROUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_COMREFERENCE_GROUP&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_COMREFERENCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_COMREFERENCE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_PROJECTREFERENCE_GROUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_PROJECTREFERENCE_GROUP&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_PROJECTREFERENCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_PROJECTREFERENCE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_SHAREDPROJECTREFERENCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_SHAREDPROJECTREFERENCE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_FRAMEWORKREFERENCE_GROUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_FRAMEWORKREFERENCE_GROUP&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_FRAMEWORKREFERENCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_FRAMEWORKREFERENCE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_ANALYZERREFERENCE_GROUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_ANALYZERREFERENCE_GROUP&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_ANALYZERREFERENCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_ANALYZERREFERENCE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_SDKREFERENCE_GROUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_SDKREFERENCE_GROUP&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_SDKREFERENCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_SDKREFERENCE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_DEPENDENCY_TRANSITIVE_ITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_DEPENDENCY_TRANSITIVE_ITEM&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_TRANSITIVE_ASSEMBLY_REFERENCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_TRANSITIVE_ASSEMBLY_REFERENCE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_TRANSITIVE_PACKAGE_REFERENCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_TRANSITIVE_PACKAGE_REFERENCE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_TRANSITIVE_PROJECT_REFERENCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_TRANSITIVE_PROJECT_REFERENCE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CTXT_PROJWIN_FILECONTENTS">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_PROJWIN_ITEMCONTENTS&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.IDM_VS_CSCD_PROJWIN_FILECONTENTS_SCOPELIST">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.IDM_VS_CTXT_PROJWIN_ITEMCONTENTS&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.guidStandardCommandSet97">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.guidStandardCommandSet97&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.guidStandardCommandSet2K">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.guidStandardCommandSet2K&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.guidVsVbaPkg">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.guidVsVbaPkg&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.guidSHLMainMenu">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.guidSHLMainMenu&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.guidVSUISet">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.guidVSUISet&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.guidCciSet">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.guidCciSet&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsMenus.guidVsUIHierarchyWindowCmds">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsMenus.uex" path="docs/doc[@for=&quot;VsMenus.guidVsUIHierarchyWindowCmds&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VSRegistry">
            <summary>
            Helper class to handle the registry of the instance of VS that is
            hosting this code.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VSRegistry.RegistryRoot(Microsoft.VisualStudio.Shell.Interop.__VsLocalRegistryType)">
            <summary>
            Returns a read-only RegistryKey object for the root of a given storage type.
            It is up to the caller to dispose the returned object.
            </summary>
            <param name="registryType">The type of registry storage to open.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VSRegistry.RegistryRoot(Microsoft.VisualStudio.Shell.Interop.__VsLocalRegistryType,System.Boolean)">
            <summary>
            Returns a RegistryKey object for the root of a given storage type.
            It is up to the caller to dispose the returned object.
            </summary>
            <param name="registryType">The type of registry storage to open.</param>
            <param name="writable">Flag to indicate is the key should be writable.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VSRegistry.RegistryRoot(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.__VsLocalRegistryType,System.Boolean)">
            <summary>
            Returns a RegistryKey object for the root of a given storage type.
            It is up to the caller to dispose the returned object.
            </summary>
            <param name="provider">The service provider to use to access the Visual Studio's services.</param>
            <param name="registryType">The type of registry storage to open.</param>
            <param name="writable">Flag to indicate is the key should be writable.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsResourceKeys">
            <summary>
            Exposes WPF resource keys for Style and ControlTemplate values that apply to common WPF
            controls.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ProgressBarStyleKey">
            <summary>
            Gets the key that can be used at runtime to dynamically bind to a Style for a
            System.Windows.Controls.ProgressBar.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsResourceKeys.GetScrollBarStyleKey(System.Boolean)">
            <summary>
            Returns the key to use for the style for themed or unthemed ScrollBars
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ScrollBarStyleKey">
            <summary>
            Gets the key that can be used at runtime to dynamically bind to a Style for a
            System.Windows.Controls.ScrollBar.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ButtonStyleKey">
            <summary>
            Gets the key that can be used at runtime to dynamically bind to a Style for a
            <see cref="T:System.Windows.Controls.Button" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.CheckBoxStyleKey">
            <summary>
            Gets the key that can be used at runtime to dynamically bind to a Style for a
            <see cref="T:System.Windows.Controls.CheckBox" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ComboBoxStyleKey">
            <summary>
            Gets the key that can be used at runtime to dynamically bind to a Style for a
            <see cref="T:System.Windows.Controls.ComboBox" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ComboBoxItemStyleKey">
            <summary>
            Gets the key that can be used at runtime to dynamically bind to a Style for a
            <see cref="T:System.Windows.Controls.ComboBoxItem" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.TextBoxStyleKey">
            <summary>
            Gets the key that can be used at runtime to dynamically bind to a Style for a
            <see cref="T:System.Windows.Controls.TextBox" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.UnthemedScrollBarStyleKey">
            <summary>
            Gets the key that can be used to apply the default, unthemed style to ScrollBars
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsResourceKeys.GetScrollViewerStyleKey(System.Boolean)">
            <summary>
            Returns the key to use for the style for themed or unthemed ScrollBars
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ScrollViewerStyleKey">
            <summary>
            Gets the key that can be used at runtime to dynamically bind to a Style for a
            System.Windows.Controls.ScrollViewer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.UnthemedScrollViewerStyleKey">
            <summary>
            Gets the key that can be used to apply the default, unthemed style to ScrollBars
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsResourceKeys.GetGridViewScrollViewerStyleKey(System.Boolean)">
            <summary>
            Returns the key to use for the style for themed or unthemed ScrollBars
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.CustomGridViewScrollViewerStyleKey">
            <summary>
            Gets the key that can be used at runtime to dynamically bind to a Style to replace
            GridView.GridViewScrollViewerStyleKey
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.UnthemedGridViewScrollViewerStyleKey">
            <summary>
            Gets the key that can be used to apply the default, unthemed style to ScrollBars
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.LargeToolTipStyleKey">
            <summary>
            Gets the key that can be used at runtime to dynamically bind to a Style for a
            System.Windows.Controls.ToolTip.
            </summary>
            <remarks>
            <para>This should be used by any tooltips that are (potentially) large so there isn't a jarring contrast between it and the background
            in the dark theme. This style is used, for example, by the tooltip for the editor's collapsed text adornment.</para>
            
            <para>The name must match the name used EditorStyleNames.CollapsedAdornmentToolTipStyleName (defined in MS.VS.Text.UI.Wpf).</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ProgressBarTemplateKey">
            <summary>
            Gets the key that can be used at runtime to dynamically bind to a ControlTemplate for a
            System.Windows.Controls.ProgressBar.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.TextBlockEnvironmentBoldStyleKey">
            <summary>
            Gets the key that can be used to apply a bold style for a TextBlock
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.TextBlockEnvironment375PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 375% environment font scaling for a TextBlock
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.TextBlockEnvironment330PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 330% environment font scaling for a TextBlock
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.TextBlockEnvironment310PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 310% environment font scaling for a TextBlock
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.TextBlockEnvironment283PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 283% environment font scaling for a TextBlock
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.TextBlockEnvironment200PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 200% environment font scaling for a TextBlock
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.TextBlockEnvironment155PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 155% environment font scaling for a TextBlock
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.TextBlockEnvironment133PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 133% environment font scaling for a TextBlock
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.TextBlockEnvironment122PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 122% environment font scaling for a TextBlock
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.TextBlockEnvironment111PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 111% environment font scaling for a TextBlock
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.TextBlockEnvironment90PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 90% environment font scaling for a TextBlock
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.TextBlockEnvironment66PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 66% environment font scaling for a TextBlock
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.LabelEnvironmentBoldStyleKey">
            <summary>
            Gets the key that can be used to apply a bold style for a Label
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.LabelEnvironment375PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 375% environment font scaling for a Label
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.LabelEnvironment330PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 330% environment font scaling for a Label
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.LabelEnvironment310PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 310% environment font scaling for a Label
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.LabelEnvironment283PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 283% environment font scaling for a Label
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.LabelEnvironment200PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 200% environment font scaling for a Label
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.LabelEnvironment155PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 155% environment font scaling for a Label
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.LabelEnvironment133PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 133% environment font scaling for a Label
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.LabelEnvironment122PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 122% environment font scaling for a Label
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.LabelEnvironment111PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 111% environment font scaling for a Label
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.LabelEnvironment90PercentFontSizeStyleKey">
            <summary>
            Gets the key that can be used to apply a style for 90% environment font scaling for a Label
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogButtonStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.Button" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogCheckBoxStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.CheckBox" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogComboBoxStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.ComboBox" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogTextBoxStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.TextBox" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogLabelStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.Label" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogRadioButtonStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.RadioButton" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogHyperlinkStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Documents.Hyperlink" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogTreeViewStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.TreeView" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogTreeViewItemStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.TreeViewItem" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogGridViewColumnHeaderStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.GridViewColumnHeader" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogGridViewColumnHeaderGripperStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for the <see cref="T:System.Windows.Controls.Primitives.Thumb" />
            of a <see cref="T:System.Windows.Controls.GridViewColumnHeader" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogListBoxStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.ListBox" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogListViewStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.ListView" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogListViewItemStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.ListViewItem" />
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogListViewItemGridStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.ListViewItem" />
            in a grid.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogDefaultStylesKey">
            <summary>
            Gets the key that can be used to merge in a <see cref="T:System.Windows.ResourceDictionary" /> containing themed dialog styles
            defined without a key.  Merging in this ResourceDictionary causes these styles to be applied by default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogTabControlNavigationStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.TabControl" />
            used for a navigation menu.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogTabItemNavigationStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.TabItem" />
            used for a navigation menu item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsResourceKeys.ThemedDialogToggleButtonStyleKey">
            <summary>
            Gets the key that can be used to apply a themed dialog style for a <see cref="T:System.Windows.Controls.Primitives.ToggleButton" />
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsSearchTask">
            <summary>
            VsSearchTask can be used as base class for implementing search-able toolwindows
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsSearchTask.SearchCallback">
            <summary>
            The callback interface that needs to be called when the search is complete
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsSearchTask.TaskStatus">
            <summary>
            The status of the current search
            This needs to be set to appropriate values as the search progresses
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsSearchTask.SetTaskStatus(Microsoft.VisualStudio.VSConstants.VsSearchTaskStatus)">
            <summary>
            Helper function to set the task status
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsSearchTask.SearchResults">
            <summary>
            The number of search results found
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsSearchTask.#ctor(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery,Microsoft.VisualStudio.Shell.Interop.IVsSearchCallback)">
            <summary>
            Constructor
            </summary>
            <param name="dwCookie">Cookie, a task identifier</param>
            <param name="pSearchQuery">The search query used by the search task</param>
            <param name="pSearchCallback">A callback interface whose functions need to be called when the search task is complete or has made more progress.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsSearchTask.ErrorCode">
            <summary>
            The error code describing the search result, should the search task have completed with errors
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsSearchTask.Id">
            <summary>
            The search task identifier
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsSearchTask.SearchQuery">
            <summary>
            The search query used by the search task
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsSearchTask.Microsoft#VisualStudio#Shell#Interop#IVsSearchTask#Status">
            <summary>
            The task status
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsSearchTask.Start">
            <summary>
            Starts the search task
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsSearchTask.Stop">
            <summary>
            Stops the search task
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsSearchTask.OnStartSearch">
            <summary>
            Called on background threads when the search is started. Override to do task-specific search. 
            Set the SearchResults to indicate the number of results found so far.
            Call the SearchCallback on ReportProgress to report progress (if progress is supported) 
            and call it on ReportComplete when the search is completed (with or without errors).
            Set the TaskStatus appropriately when done to Completed/Error.
            During the search, TaskStatus can be periodically checked if the search task was Stopped.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsSearchTask.OnStopSearch">
            <summary>
            Called on the UI thread when the search is stopped. Override to do task-specific stop actions. 
            Note: a search can be set to stopped state even before it's actually started
            Override to stop the search, and set the SearchResults appropriately so it can be reported for completion
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsServiceProviderWrapper">
            <summary>
            Wraps a service provider instance. The class is intended to be used for exposing a SVsService provider value to a VS MEF composition container.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsServiceProviderWrapper.#ctor(System.IServiceProvider)">
            <summary>
            Constructs an instance of the class.
            </summary>
            <param name="serviceProvider">The instance of the service provider to wrap</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsServiceProviderWrapper.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type. Delegates all the work of retirieving the requested service to the wrapped service provider.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType or null if there is no service object of type serviceType.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsShellUtilities">
             <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities&quot;]/*" />
             <devdoc>
            This class provides some useful static shell based methods.
             </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.PreFocusOptionsPageComboBox(System.Windows.FrameworkElement,System.Windows.Input.MouseDevice)">
             <summary>
             If the mouse is over a combobox, this method will force focus into it, but only if the calling options page
             doesn't already have keyboard focus.
             </summary>
             <param name="optionsPage">The options page calling this helper.</param>
             <param name="mouseDevice">The mouse device received from a WPF mouse event.</param>
             <remarks>
             This helper is designed to work around a focus issue with WPF comboboxes hosted in Win32 UI. (If the
             options page doesn't have keyboard focus, and the user clicks the combobox, its drop down won't open on the
             first click.) By placing this method call in the OnPreviewMouseLeftButtonDown of the options page, focus is
             moved to the combobox before the real mouse down event is triggered. When the mouse down event does
             trigger, since the combobox already has focus, the dropdown opens as expected.
            
             If an options page is not WPF, or doesn't contain any comboboxes, this method should not be called. It is
             designed to be called in the OnPreviewMouseLeftButtonDown override. If called from some other location, it
             may not function as intended.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetMinimumDragDistance">
            <summary>
            Gets the minimum drag distance that should signal the beginning of a drag operation.
            </summary>
            <returns>
            A <see cref="T:System.Windows.Vector" /> containing the minimum horizonal and vertical drag distance in device units.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetDpiContext(System.Object)">
            <summary>
            Tries to get the <see cref="T:Microsoft.VisualStudio.Utilities.DpiAwarenessContext" /> from the given object by checking if
            it implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDpiAware" /> and asking for its <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDPIMODE" />. If
            the given object doesn't implement <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDpiAware" /> it returns System awareness.
            </summary>
            <remarks>
            WPF content doesn't need to implement this interface, it's only needed for non-WPF UI.
            Additionally, since all non-WPF UI needs to do some work to support PerMonitor
            awareness, the fallback needs to be System awareness or else UI bugs can occur.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetDpiContext(System.Object,Microsoft.VisualStudio.Utilities.DpiAwarenessContext)">
            <summary>
            Tries to get the <see cref="T:Microsoft.VisualStudio.Utilities.DpiAwarenessContext" /> from the given object by checking if
            it implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDpiAware" /> and asking for its <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDPIMODE" />. If
            the given object doesn't implement <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDpiAware" /> it returns the given default
            context.
            </summary>
            <remarks>
            WPF content doesn't need to implement this interface, it's only needed for non-WPF UI.
            Additionally, since all non-WPF UI needs to do some work to support PerMonitor
            awareness, the fallback needs to be System awareness or else UI bugs can occur.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ToDpiContext(Microsoft.VisualStudio.Shell.Interop.__VSDPIMODE)">
            <summary>
            Converts a <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDPIMODE" /> to a <see cref="T:Microsoft.VisualStudio.Utilities.DpiAwarenessContext" />. If an
            unsupported/unknown <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDPIMODE" /> is given, this method will throw a
            <see cref="T:System.NotSupportedException" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.RenameDocument(System.IServiceProvider,System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.RenameDocument&quot;]/*" />
            <devdoc>
            Rename document in the running document table from oldName to newName.
            </devdoc>
            <param name="site">The service provider.</param>
            <param name="oldName">Full path to the old name of the document.</param>
            <param name="newName">Full path to the new name of the document.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocument(System.IServiceProvider,System.String,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.OpenDocument&quot;]/*" />
            <devdoc>
            Open document using the appropriate project.
            </devdoc>
            <param name="provider">The service provider.</param>
            <param name="fullPath">Full path to the document.</param>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <param name="hierarchy">Reference to the IVsUIHierarchy interface of the project that can open the document.</param>
            <param name="itemID"> Reference to the hierarchy item identifier of the document in the project.</param>
            <param name="windowFrame">A reference to the window frame that is mapped to the document.</param>
            <param name="view">A reference to the primary view of the document.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocument(System.IServiceProvider,System.String,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.OpenDocument&quot;]/*" />
            <devdoc>
            Open document using the appropriate project.
            </devdoc>
            <param name="provider">The service provider.</param>
            <param name="fullPath">Full path to the document.</param>
            <param name="logicalView">GUID identifying the logical view.</param>
            <param name="hierarchy">Reference to the IVsUIHierarchy interface of the project that contains the Open document.</param>
            <param name="itemID"> Reference to the hierarchy item identifier of the document in the project.</param>
            <param name="windowFrame">A reference to the window frame that is mapped to the document.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.TryOpenDocument(System.IServiceProvider,System.String,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.TryOpenDocument&quot;]/*" />
            <devdoc>
            Tries to open document using the appropriate project.
            </devdoc>
            <param name="provider">The service provider.</param>
            <param name="fullPath">Full path to the document.</param>
            <param name="logicalView">GUID identifying the logical view.</param>
            <param name="hierarchy">Reference to the IVsUIHierarchy interface of the project that contains the Open document.</param>
            <param name="itemID"> Reference to the hierarchy item identifier of the document in the project.</param>
            <param name="windowFrame">A reference to the window frame that is mapped to the document.</param>
            <returns>VsConstants.S_OK if successful, a failure code otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetTextView(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetTextView&quot;]/*" />
            <devdoc>
            Get primary view for a window frame.
            </devdoc>
            <param name="windowFrame">The window frame</param>
            <returns>A reference to an IVsTextView if successful. Otherwise null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetWindowObject(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetWindowObject&quot;]/*" />
            <devdoc>
            Get Window interface for the window frame.
            </devdoc>
            <param name="windowFrame">The window frame.</param>
            <returns>A reference to the Window interaface if succesfull. Otherwise null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.IsDocumentOpen(System.IServiceProvider,System.String,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.IsDocumentOpen&quot;]/*" />
            <devdoc>
            Determine if a document is opened with a given logical view.
            </devdoc>
            <param name="provider">The service provider.</param>
            <param name="fullPath">Full path to the document</param>
            <param name="logicalView">GUID identifying the logical view. If logicalView is set to Guid.Empty, it will return true if any view is open.</param>
            <param name="hierarchy">Reference to the IVsUIHierarchy interface of the project that contains the Open document</param>
            <param name="itemID"> Reference to the hierarchy item identifier of the document in the project</param>
            <param name="windowFrame">A reference to the window frame that is mapped to the document</param>
            <returns>true if the document is open with the given logical view</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenAsMiscellaneousFile(System.IServiceProvider,System.String,System.String,System.Guid,System.String,System.Guid)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.OpenAsMiscellaneousFile&quot;]/*" />
            <devdoc>
            Open a file using the miscellaneous project.
            </devdoc>
            <param name="provider">The service provider.</param>
            <param name="path">Path to the item to open.</param>
            <param name="caption">Caption of the item.</param>
            <param name="editor">Unique identifier of the editor type.</param>
            <param name="physicalView">Name of physical view.</param>
            <param name="logicalView">Name of logical view.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetMiscellaneousProject(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetMiscellaneousProject&quot;]/*" />
            <devdoc>
            Get miscellaneous project from current solution
            </devdoc>
            <param name="provider">The service provider</param>
            <returns>A refernce to the IVsProject3 interface for the misceleneous project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetMiscellaneousProject(System.IServiceProvider,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetMiscellaneousProject&quot;]/*" />
            <devdoc>
            Get miscellaneous project from current solution
            </devdoc>
            <param name="provider">The service provider</param>
            <param name="create">If false, does not force creation of the misc project</param>
            <returns>A refernce to the IVsProject3 interface for the misceleneous project.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenBrowser(System.String)">
            <summary>
            Open the user's default browser on the given URL.
            The default browser is set in the "Browse With..." UI
            The internal browser will not be used if the shell is in a modal state.
            </summary>
            <param name="page">The URL to open.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenSystemBrowser(System.String)">
            <summary>
            Open the system default browser on the given URL.
            </summary>
            <param name="page">The URL to open.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenBrowser(System.String,System.UInt32)">
            <summary>
            Open a browser on the given URL, with the given flags.
            </summary>
            <param name="page">The URL to open.</param>
            <param name="flags">The __VSOSPFLAGS values to pass to IVsUIShellOpenDocument.OpenStandardPreviewer.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocument(System.IServiceProvider,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.OpenDocument&quot;]/*" />
            <devdoc>
            Open a document.
            </devdoc>
            <param name="provider">The service provider.</param>
            <param name="path">Full path to the document.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocumentWithSpecificEditor(System.IServiceProvider,System.String,System.Guid,System.Guid)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.OpenDocumentWithSpecificEditor&quot;]/*" />
            <devdoc>
            Open a document using a specific editor.
            </devdoc>
            <param name="provider">The service provider.</param>
            <param name="fullPath">Full path to the document.</param>
            <param name="editorType">Unique identifier of the editor type.</param>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <returns>A reference to the window frame that is mapped to the document.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OpenDocumentWithSpecificEditor(System.IServiceProvider,System.String,System.Guid,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.OpenDocumentWithSpecificEditor&quot;]/*" />
            <devdoc>
            Open a document using a specific editor.
            </devdoc>
            <param name="provider">The service provider.</param>
            <param name="fullPath">Full path to the document.</param>
            <param name="editorType">Unique identifier of the editor type.</param>
            <param name="logicalView">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>
            <param name="hierarchy">Reference to the IVsUIHierarchy interface of the project that can open the document.</param>
            <param name="itemID"> Reference to the hierarchy item identifier of the document in the project.</param>
            <param name="windowFrame">A reference to the window frame that is mapped to the document.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetProject(System.IServiceProvider,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetProject&quot;]/*" />
            <devdoc>
            Get reference to the IVsHierarchy interface for project that owns the document.
            </devdoc>
            <param name="site">The service provider.</param>
            <param name="moniker">The document moniker.</param>
            <returns>
            If the document is open, this is a reference to the IVsUIHierarchy Interface implementation of the project that owns the document.
            If the document is not open, the value of this parameter is NULL.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetRunningDocumentContents(System.IServiceProvider,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetRunningDocumentContents&quot;]/*" />
            <devdoc>
            Get contents of file loaded by the running document table.
            </devdoc>
            <param name="site">The service provider.</param>
            <param name="path">Path to the file.</param>
            <returns>The contents of the file if it is loaded by RDT. Otherwise it returns null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetRDTDocumentInfo(System.IServiceProvider,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData@,System.UInt32@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetRDTDocumentInfo&quot;]/*" />
            <devdoc>
            Get a reference to the IVsPersistDocData interface associated to a document in the Running Document Table.
            </devdoc>
            <param name="site">The service provider.</param>
            <param name="documentName">Path to the document.</param>
            <param name="hierarchy">[out, optional] Reference to the IVsHierarchy interface for the project who owns the document.</param>
            <param name="itemid">[out, optional] Reference to an item identifier in the hierarchy. </param>
            <param name="persistDocData">[out] A reference to the IVsPersistDocData interface associated to the document</param>
            <param name="docCookie">[out, optional] A reference to an abstract handle to the document. </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.SaveFileIfDirty(System.IServiceProvider,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.SaveFileIfDirty&quot;]/*" />
            <devdoc>
            Save file if it is dirty.
            </devdoc>
            <param name="site">The service provider.</param>
            <param name="fullPath">The full path of the file to be saved.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.SaveFileIfDirty(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.SaveFileIfDirty&quot;]/*" />
            <devdoc>
            Save document data for a text view.
            </devdoc>
            <param name="view">The view to be saved</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.PromptYesNo(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.OLEMSGICON,Microsoft.VisualStudio.Shell.Interop.IVsUIShell)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.PromptYesNo&quot;]/*" />
            <devdoc>
            Prompt the user with the specified message.
            </devdoc>
            <param name="message">The message to show.</param>
            <param name="title">The title of the message box.</param>
            <param name="icon">The icon to show on the message box.</param>
            <param name="uiShell">A reference to a IVsUIShell interface.</param>
            <returns>Return true if the result is Yes, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ShowMessageBox(System.IServiceProvider,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.OLEMSGICON,Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.ShowMessageBox&quot;]/*" />
            <devdoc>
            Show message box.
            </devdoc>
            <param name="serviceProvider">The service provider</param>
            <param name="message">The message to show</param>
            <param name="title">The title of the message box</param>
            <param name="icon">The icon to show on the message box</param>
            <param name="msgButton">The button type</param>
            <param name="defaultButton">The default button</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. If a referernce to the IVsUIShell interface cannot be retrived from the service provider then InvalidOperationException is thrown.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetTaskItems(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetTaskItems&quot;]/*" />
            <devdoc>
            Get list of all tasks items as IVsTaskItem2.
            </devdoc>
            <param name="serviceProvider">The service provider.</param>
            <returns>A list of task items.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetTaskItems2(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetTaskItems2&quot;]/*" />
            <devdoc>
            Get list of all tasks items.
            </devdoc>
            <param name="serviceProvider">The service provider.</param>
            <returns>A list of task items.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetTaskItems3(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetTaskItems3&quot;]/*" />
            <devdoc>
            Get list of all tasks items.
            </devdoc>
            <param name="serviceProvider">The service provider.</param>
            <returns>A list of task items.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetErrorListItems(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetErrorListItems&quot;]/*" />
            <devdoc>
            Gets the items in the error list.
            </devdoc>
            <param name="serviceProvider">The service provider.</param>
            <returns>A list of items in the error list.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.EmptyTaskList(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.EmptyTaskList&quot;]/*" />
            <devdoc>
            Empty the task list.
            </devdoc>
            <param name="serviceProvider">The service provider.</param>
            <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.LaunchDebugger(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.LaunchDebugger&quot;]/*" />
            <devdoc>
            Launch the debugger.
            </devdoc>
            <param name="serviceProvider">The service provider.</param>
            <param name="info">A reference to a VsDebugTargetInfo object.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetHierarchy(System.IServiceProvider,System.Guid)">
             <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetHierarchy&quot;]/*" />
             <devdoc>
             Get reference to IVsHierarchy interface from project guid.
             </devdoc>
             <param name="site">The service provider.</param>
             <param name="projectGuid">A project guid.</param>
            <returns>A reference to an IVsHierarchy interface.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetUIHierarchyWindow(System.IServiceProvider,System.Guid)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetUIHierarchyWindow&quot;]/*" />
            <devdoc>
            Get reference to IVsUIHierarchyWindow interface from guid persistence slot.
            </devdoc>
            <param name="serviceProvider">The service provider.</param>
            <param name="guidPersistenceSlot">Unique identifier for a tool window created using IVsUIShell::CreateToolWindow. The caller of this method can use predefined identifiers that map to tool windows if those tool windows are known to the caller. </param>
            <returns>A reference to an IVsUIHierarchyWindow interface.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetOutputWindowPane(System.IServiceProvider,System.Guid)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetOutputWindowPane&quot;]/*" />
            <devdoc>
            Get reference to IVsOutputWindowPane interface from pane guid.
            </devdoc>
            <param name="serviceProvider">The service provider.</param>
            <param name="guidPane">A guid for the pane.</param>
            <returns>A reference to an IVsOutputWindowPane interface.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetDebugMode(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetDebugMode&quot;]/*" />
            <devdoc>
            Get debug mode of the shell (design/break/shell).
            </devdoc>
            <param name="serviceProvider">The service provider.</param>
            <returns>A DBGMODE enumeration.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.IsVisualStudioInDesignMode(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.IsVisualStudioInDesignMode&quot;]/*" />
            <devdoc>
            Is Visual Studio in design mode.
            </devdoc>
            <param name="serviceProvider">The service provider.</param>
            <returns>true if visual studio is in design mode</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.IsSolutionBuilding(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.IsSolutionBuilding&quot;]/*" />
            <devdoc>
            Is current solution building or deploying
            </devdoc>
            <param name="serviceProvider">The service provider</param>
            <returns>true if solution is building or deploying.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.IsInAutomationFunction(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.IsInAutomationFunction&quot;]/*" />
            <devdoc>
            Is an extensibility object executing an automation function.
            </devdoc>
            <param name="serviceProvider">The service provider.</param>
            <returns>true if the extensiblity object is executing an automation function.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ApplyTreeViewThemeStyles(System.Windows.Forms.TreeView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.ApplyTreeViewThemeStyles&quot;]/*" />
            <devdoc>
            Modify a WinForms TreeView control to use the new Explorer style theme.  Hot tracking is enabled by default.
            </devdoc>
            <param name="treeView">The tree view control to modify</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ApplyTreeViewThemeStyles(System.Windows.Forms.TreeView,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.ApplyTreeViewThemeStyles&quot;]/*" />
            <devdoc>
            Modify a WinForms TreeView control to use the new Explorer style theme.
            </devdoc>
            <param name="treeView">The tree view control to modify.</param>
            <param name="enableHotTracking">true to enable hot tracking on the tree view control; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ApplyListViewThemeStyles(System.Windows.Forms.ListView)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.ApplyListViewThemeStyles&quot;]/*" />
            <devdoc>
            Modify a WinForms ListView control to use the new Explorer style theme
            </devdoc>
            <param name="listView">The list view control to modify</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetEnvironmentFont(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\VsShellUtilities.uex" path="docs/doc[@for=&quot;VsShellUtilities.GetEnvironmentFont&quot;]/*" />
            <devdoc>
            Retrieve the host's EnvironmentFont as a System.Drawing.Font
            </devdoc>
            <param name="provider">The host's service provider</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.TryGetPackageExtensionPoint``2(System.Guid,System.Guid)">
            <summary>
            Create an instance of an extension point from the given package.
            This is analagous to finding an "Export" of a given type (T) with
            instance metadata given by the "instance" Guid.
            </summary>
            <typeparam name="TExtensionPoint">Type of extension point</typeparam>
            <typeparam name="TInterface">Interface requested</typeparam>
            <param name="package">Package containing the instance</param>
            <param name="instance">Instance identifier for the requested extension point</param>
            <returns>The extension point</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetPackageExtensionPoint``2(System.Guid,System.Guid)">
            <summary>
            Create an instance of an extension point from the given package.
            This is analagous to finding an "Export" of a given type (T) with
            instance metadata given by the "instance" Guid.
            </summary>
            <typeparam name="TExtensionPoint">Type of extension point</typeparam>
            <typeparam name="TInterface">Interface requested</typeparam>
            <param name="package">Package containing the instance</param>
            <param name="instance">Instance identifier for the requested extension point</param>
            <returns>The extension point</returns>
            <exception cref="T:System.ArgumentException">The extension point is not recognized by the package, or the package does not use attributes to declare any class implementing the extension.</exception>
            <exception cref="T:System.InvalidCastException">The package does not implement the IVsPackageExtensionProvider interface, or the extension provider was created but it does not implement the TInterface interface.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.LookupPackageString(System.Guid,System.String)">
            <summary>
            If the given string is in the correct format to indicate a localized resource,
            then look it up in the given package. Accepted formats are "#nnnn" or "@nnnn"
            where nnnn is a decimal resource ID. The # prefix indicates a native resource
            and the @ prefix indicates a managed resource, however these are just hints.
            Either prefix will work whether the package's satellite DLL is managed or
            native.
            </summary>
            <param name="package">The GUID of the package containing the localized resource</param>
            <param name="s">The input string which may represent a localized resource</param>
            <returns>The localized resource or, if look-up failed, then the original string</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Utility function to retreive the config provider object for a given project.
            It will use the established (by build manager) alghoritm fo accessing the config provider
            1) If project provides a browse object - QI from the browse object
            2) else if project implements IVsGetCfgProvider - use IVsGetCfgProvider::GetCfgProvider()
            3) finally QI for IVsCfgProvider on the project hierarchy itself.
            </summary>
            <param name="hierarchy">The project hierarchy</param>
            <returns>IVsCfgProvider object for the given project</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.SetOleCmdText(System.IntPtr,System.String)">
            <summary>
            Utility function to set the actual text in OLECMDTEXT marshaled structure.
            Used in typical commad routing code (implementations of Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)
            </summary>
            <param name="pCmdText">marshaled OLECMDTEXT structure that needs to be filled in</param>
            <param name="text">Command caption text</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsShellUtilities.ShutdownToken">
            <summary>
            Gets a token that is canceled when the application is shutting down.
            </summary>
            <remarks>
            This property is safe to access from any thread.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsShellUtilities.ShellIsZombie">
            <summary>
            The Shell will be in zombie state until initialized and while shutting down.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsShellUtilities.shellIsInitialized">
            <summary>
            The shell is initialized once the main window is visible and all services are available.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetProvisionalViewingStatus(System.String)">
            <summary>
            Gets the provisional viewing status for a file.
            </summary>
            <param name="documentMoniker">The document moniker which identifies the file.</param>
            <returns>A member of the __VSPROVISIONALVIEWINGSTATUS enumeration that describes how the file can be opened
            in the preview tab.</returns>
            <remarks>This method considers the IVsHierarchy property VSHPROPID_ProvisionalViewingStatus, if the document moniker
            is included in a project.  If the IVsHierarchy does not implement that property, or if the file is not part of a
            project, then this method uses IVsUIShellOpenDocument3.GetProvisionalViewingStatusForFile.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetProvisionalViewingStatus(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
            <summary>
            Gets the provisional viewing status for an item in a project hierarchy.
            </summary>
            <param name="hierarchy">The hierarchy containing the item.</param>
            <param name="itemid">The item within the hierarchy.</param>
            <returns>A member of the __VSPROVISIONALVIEWINGSTATUS enumeration that describes how the item can be opened
            in the preview tab.</returns>
            <remarks>This method considers the IVsHierarchy property VSHPROPID_ProvisionalViewingStatus.  If the IVsHierarchy does
            not implement that property, then this method uses IVsUIShellOpenDocument3.GetProvisionalViewingStatusForFile on the
            document moniker for the item.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ShowToolsOptionsPage``1">
            <summary>
            Invokes the Tools &gt; Options dialog with the given page selected
            </summary>
            <typeparam name="T">The dialog page type</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ShowToolsOptionsPage(System.Guid)">
            <summary>
            Invokes the Tools &gt; Options dialog with the given page selected
            </summary>
            <param name="pageGuid">The <see cref="T:System.Guid" /> of the page to select</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.WhenPropertyChanged(Microsoft.VisualStudio.Shell.Interop.IVsShell,System.Int32,System.Action{System.Object})">
            <summary>
            Invokes a callback when a shell property next changes.
            </summary>
            <param name="shell">The shell service.</param>
            <param name="propid">The property to listen for changes to.</param>
            <param name="callback">The callback to invoke at most once when the property next changes.</param>
            <returns>A disposable that may cancel the subscription early.</returns>
            <remarks>Must be called while on the main thread.</remarks>
            <seealso cref="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OnPropertyChanged(Microsoft.VisualStudio.Shell.Interop.IVsShell,System.Int32,System.Action{System.Object})" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.OnPropertyChanged(Microsoft.VisualStudio.Shell.Interop.IVsShell,System.Int32,System.Action{System.Object})">
            <summary>
            Invokes a callback each time a shell property changes.
            </summary>
            <param name="shell">The shell service.</param>
            <param name="propid">The property to listen for changes to.</param>
            <param name="callback">The callback to invoke each time the property changes.</param>
            <returns>A disposable that may cancel the subscription.</returns>
            <remarks>Must be called while on the main thread.</remarks>
            <seealso cref="M:Microsoft.VisualStudio.Shell.VsShellUtilities.WhenPropertyChanged(Microsoft.VisualStudio.Shell.Interop.IVsShell,System.Int32,System.Action{System.Object})" />
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ConvertLocalUriToRemoteUriAsync(System.Uri,System.Threading.CancellationToken,System.String)">
            <summary>
            Converts a local URI to a remote URI using a given provider's URI scheme.
            </summary>
            <param name="localUri">The local URI.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="remoteScheme">The desired scheme of the returned remote URI.</param>
            <returns>The remote URI.</returns>
            <remarks>
            <paramref name="localUri" /> can be a <see cref="T:System.Uri" /> returned from
            <see cref="M:Microsoft.VisualStudio.Shell.VsShellUtilities.DownloadFileAsync(System.Uri,System.IProgress{Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData},System.Threading.CancellationToken)" /> or from <see cref="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ConvertRemoteUriToLocalUriAsync(System.Uri,System.Threading.CancellationToken)" />.
            <para>
            If the provider does not support <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" />,
            <paramref name="localUri" /> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.ConvertRemoteUriToLocalUriAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Converts a remote URI using the provider's URI scheme to a local URI.
            </summary>
            <param name="remoteUri">The remote URI.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The local URI.</returns>
            <remarks>
            The local file may not exist if it has not been downloaded.  Use the
            <see cref="M:Microsoft.VisualStudio.Shell.VsShellUtilities.DownloadFileAsync(System.Uri,System.IProgress{Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData},System.Threading.CancellationToken)" /> method to ensure the file has been downloaded.
            <para>
            If the provider does not support <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" />,
            <paramref name="remoteUri" /> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.DownloadFileAsync(System.Uri,System.IProgress{Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData},System.Threading.CancellationToken)">
            <summary>
            Downloads a remote file if it has not already been downloaded.
            </summary>
            <param name="remoteUri">The URI of the file to download.</param>
            <param name="progress">The interface through which progress is reported (optional).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The URI of the local file.</returns>
            <remarks>
            If the provider does not support <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" />,
            <paramref name="remoteUri" /> is returned.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetRemoteFileSystemProviderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the remote file system provider for <paramref name="scheme" />.
            </summary>
            <param name="scheme">The scheme of the remote file system provider.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The remote file system provider.  It should be disposed when it is no longer needed.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetRemoteFileSystemProviderAsync(System.String,Microsoft.ServiceHub.Framework.IServiceBroker,System.Threading.CancellationToken)">
            <summary>
            Returns the remote file system provider for <paramref name="scheme" />.
            </summary>
            <param name="scheme">The scheme of the remote file system provider.</param>
            <param name="broker">The service broker</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The remote file system provider.  It should be disposed when it is no longer needed.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsShellUtilities.GetFileSystemProviderDescriptorAsync(System.String,Microsoft.ServiceHub.Framework.IServiceBroker,System.Threading.CancellationToken)">
            <summary>
            Returns the descriptor for the file system provider for <paramref name="scheme" />.
            </summary>
            <param name="scheme">The scheme of the file system provider.</param>
            <param name="broker">The service broker</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The file system provider descriptor.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsShellUtilities.ProviderDescriptorMap">
            <summary>
            A map from <see cref="T:System.Uri" /> schemes to descriptors for file system providers.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper">
            <summary>
            Helper methods for using Visual Studio task library in managed code.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.DefaultWaitDialogDelay">
            <summary>
            The default delay before a threaded wait dialog appears during a synchronous block of the UI thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.ServiceInstance">
            <summary>
            Gets the task scheduler service instance.
            </summary>
            <remarks>
            If service query failed we will keep retrying as GlobalServices class might not have been initialized yet.
            This can be true for older versions of Visual Studio Shell assembly.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CreateTaskBody(Microsoft.VisualStudio.Shell.VsTaskBodyCallback)">
            <summary>
            Creates a task body that can be consumed by task scheduler service.
            </summary>
            <param name="action">Anonymous method to execute as the task body.</param>
            <returns>an implementation of IVsTaskBody.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CreateTaskBody``1(System.Action{``0})">
            <summary>
            Creates a task body that can be consumed by task scheduler service.
            </summary>
            <param name="action">Anonymous method to execute as the task body.</param>
            <returns>an implementation of IVsTaskBody.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CreateTaskBody``1(System.Func{``0,System.Object})">
            <summary>
            Creates a task body that can be consumed by task scheduler service.
            </summary>
            <param name="action">Anonymous method to execute as the task body.</param>
            <returns>an implementation of IVsTaskBody.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CreateTaskBody(System.Func{System.Object})">
            <summary>
            Creates a task body that can be consumed by task scheduler service.
            </summary>
            <param name="action">Anonymous method to execute as the task body.</param>
            <returns>an implementation of IVsTaskBody.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CreateTaskBody(System.Action)">
            <summary>
            Creates a task body that can be consumed by task scheduler service.
            </summary>
            <param name="action">Anonymous method to execute as the task body.</param>
            <returns>an implementation of IVsTaskBody.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CreateAndStartTask(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,System.Action)">
            <summary>
            Creates a Visual Studio task that will be executed with the specified context.
            </summary>
            <param name="scheduler">The scheduler that will execute the task.</param>
            <param name="context">Where the task will be executed.</param>
            <param name="action">Anonymous method to execute as the task body.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CreateAndStartTask(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.VsTaskBodyCallback)">
            <summary>
            Creates a Visual Studio task that will be executed with the specified context.
            </summary>
            <param name="scheduler">The scheduler that will execute the task.</param>
            <param name="context">Where the task will be executed.</param>
            <param name="action">VsTaskBodyCallback action to execute as the task body.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CreateAndStartTask(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody)">
            <summary>
            Creates a Visual Studio task that will be executed with the specified context.
            </summary>
            <param name="scheduler">The scheduler that will execute the task.</param>
            <param name="context">Where the task will be executed.</param>
            <param name="pTaskBody">Action to be executed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CreateAndStartTaskEx(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.VsTaskCreationOptions,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody,System.Object)">
            <summary>
            Creates a Visual Studio task that will be executed with the specified context.
            </summary>
            <param name="scheduler">The scheduler that will execute the task.</param>
            <param name="context">Where the task will be executed.</param>
            <param name="options">The options to apply to the created task.</param>
            <param name="pTaskBody">Action to be executed.</param>
            <param name="pAsyncState">The state object to store with the task.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Delay(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,System.TimeSpan)">
            <summary>
            Returns a task that delays execution of the subsequent task by a given period of time.
            </summary>
            <param name="scheduler">The task scheduler service.</param>
            <param name="delay">The amount of time to delay the subsequent task.</param>
            <returns>The delaying task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Yield(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource)">
            <summary>
            Yields the current operation on the thread, the rest of the async method will be scheduled as a continuation.
            </summary>
            <param name="scheduler">Task scheduler service instance.</param>
            <param name="context">Context to use for scheduling the rest of the async method.</param>
            <param name="taskCompletionSource">If a task completion source is passed in, the task created will be added as a dependency.</param>
            <returns>an awaiter implementation to use with await keyword.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Yield(Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource)">
            <summary>
            Yields the current operation on the thread, the rest of the async method will be scheduled as a continuation.
            </summary>
            <param name="context">Context to use for scheduling the rest of the async method.</param>
            <param name="taskCompletionSource">If a task completion source is passed in, the task created will be added as a dependency.</param>
            <returns>an awaiter implementation to use with await keyword.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CompleteAfterTask``1(Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource,System.Threading.Tasks.Task{``0})">
            <summary>
            Sets a continuation on the task passed in so that task completion source is set to correct state after the task
            is completed/faulted or canceled.
            </summary>
            <typeparam name="T">Return type of the task.</typeparam>
            <param name="taskCompletionSource">Task completion source that will be set once the task is completed.</param>
            <param name="task">Task that will be used to set the state of the task completion source.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CopyTaskResultIfCompleted``1(System.Threading.Tasks.Task{``0},Microsoft.VisualStudio.Shell.Interop.IVsTaskCompletionSource)">
            <summary>
            Returns true if the task was completed, otherwise false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.InvokeAsync``1(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsInvokableAsyncFunction{``0})">
            <summary>
            Helper function that transforms a TPL task from an async function into an IVsTask.
            </summary>
            <param name="scheduler">IVsTaskScheduler used to create the IVsTaskCompletionSource.</param>
            <param name="asyncFunction">Asynchronous function that takes an IVsTaskCompletionSource and returns a TPL task.</param>
            <returns>Returns an IVsTask that only completes once the TPL task returned from asyncFunction completes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Delay(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,System.Double)">
            <summary>
            Returns a task that delays execution of the subsequent task by a given period of time.
            </summary>
            <param name="scheduler">The task scheduler service.</param>
            <param name="delayMilliseconds">The number of milliseconds to delay the subsequent task.</param>
            <returns>The delaying task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.RunAsync``1(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.Shell.VsTaskRunContext,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Wraps the invocation of an async method such that it may
            execute asynchronously, but may potentially be
            synchronously completed (waited on) in the future.
            </summary>
            <typeparam name="T">The type of value returned by the asynchronous operation.</typeparam>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="priority">
            The priority with which to schedule any work on the UI thread,
            when and if <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" /> is called.
            </param>
            <param name="asyncMethod">The method that, when executed, will begin the async operation.</param>
            <returns>An object that tracks the completion of the async operation, and allows for later synchronous blocking of the main thread for completion if necessary.</returns>
            <remarks>
            Exceptions thrown by the delegate are captured by the returned <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask" />.
            Note that the <paramref name="asyncMethod" /> delegate begins its execution on the caller's thread,
            and must explicitly call <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" /> if the main thread is desired.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.RunAsync(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.Shell.VsTaskRunContext,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Wraps the invocation of an async method such that it may
            execute asynchronously, but may potentially be
            synchronously completed (waited on) in the future.
            </summary>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="priority">
            The priority with which to schedule any work on the UI thread,
            when and if <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" /> is called.
            </param>
            <param name="asyncMethod">The method that, when executed, will begin the async operation.</param>
            <returns>An object that tracks the completion of the async operation, and allows for later synchronous blocking of the main thread for completion if necessary.</returns>
            <remarks>
            Exceptions thrown by the delegate are captured by the returned <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask" />.
            Note that the <paramref name="asyncMethod" /> delegate begins its execution on the caller's thread,
            and must explicitly call <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" /> if the main thread is desired.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.RunAsyncAsVsTask``1(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.Shell.VsTaskRunContext,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates an IVsTask to track a cancelable async operation.
            </summary>
            <typeparam name="T">The type of value returned by the async operation.</typeparam>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="priority">
            The priority with which to schedule any work on the UI thread,
            when and if <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" /> is called.
            </param>
            <param name="asyncMethod">The method that, when executed, will begin the async operation.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTask" /> instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})">
            <summary>
            Blocks the calling (UI) thread till a cancelable, async operation completes.
            An optionally cancelable wait dialog is displayed if the operation takes too long.
            </summary>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="waitCaption">The title of the wait dialog, when and if it appears.</param>
            <param name="asyncMethod">
            The operation which would otherwise be async but is blocking the UI thread in this scenario.
            A means of updating the wait dialog's progress display, and a CancellationToken signaling user cancellation are provided.
            </param>
            <param name="delayToShowDialog">The time to wait for <paramref name="asyncMethod" /> to complete before displaying the wait dialog. The default (null) is 2 seconds.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if not called on the UI thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Run``1(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})" />
            <typeparam name="T">The return type of the async operation.</typeparam>
            <returns>The result of <paramref name="asyncMethod" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})">
            <summary>
            Blocks the calling (UI) thread till an async operation completes.
            An optionally cancelable wait dialog is displayed if the operation takes too long.
            </summary>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="waitCaption">The title of the wait dialog, when and if it appears.</param>
            <param name="asyncMethod">
            The operation which would otherwise be async but is blocking the UI thread in this scenario.
            A means of updating the wait dialog's progress display is provided.
            </param>
            <param name="delayToShowDialog">The time to wait for <paramref name="asyncMethod" /> to complete before displaying the wait dialog. The default (null) is 2 seconds.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if not called on the UI thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Run``1(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})" />
            <typeparam name="T">The return type of the async operation.</typeparam>
            <returns>The result of <paramref name="asyncMethod" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})">
            <summary>
            Blocks the calling (UI) thread till an async operation completes.
            Cancellation is offered to the user.
            </summary>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="waitCaption">The title of the wait dialog, when and if it appears.</param>
            <param name="waitMessage">The message inside the wait dialog, when and if it appears.</param>
            <param name="asyncMethod">
            The operation which would otherwise be async but is blocking the UI thread in this scenario.
            </param>
            <param name="delayToShowDialog">The time to wait for <paramref name="asyncMethod" /> to complete before displaying the wait dialog. The default (null) is 2 seconds.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if not called on the UI thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Run``1(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})" />
            <typeparam name="T">The return type of the async operation.</typeparam>
            <returns>The result of <paramref name="asyncMethod" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})">
            <summary>
            Blocks the calling (UI) thread till an async operation completes.
            No cancellation is offered to the user.
            </summary>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="waitCaption">The title of the wait dialog, when and if it appears.</param>
            <param name="waitMessage">The message inside the wait dialog, when and if it appears.</param>
            <param name="asyncMethod">
            The operation which would otherwise be async but is blocking the UI thread in this scenario.
            </param>
            <param name="delayToShowDialog">The time to wait for <paramref name="asyncMethod" /> to complete before displaying the wait dialog. The default (null) is 2 seconds.</param>
            <exception cref="T:System.Runtime.InteropServices.COMException">Thrown if not called on the UI thread.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Run``1(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <inheritdoc cref="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Run(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.String,System.String,System.Func{System.IProgress{Microsoft.VisualStudio.Shell.ThreadedWaitDialogProgressData},System.Threading.Tasks.Task},System.Nullable{System.TimeSpan})" />
            <typeparam name="T">The return type of the async operation.</typeparam>
            <returns>The result of <paramref name="asyncMethod" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.StartOnIdle(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Func{System.Threading.Tasks.Task},Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Schedules a delegate for background execution on the UI thread without inheriting any claim to the UI thread from its caller.
            </summary>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="asyncMethod">The async delegate to invoke on the UI thread sometime in the future.</param>
            <param name="priority">The priority to use when switching to the UI thread or resuming after a yielding await.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask" /> that represents the on-idle operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.StartOnIdle(Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Action,Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Schedules a delegate for background execution on the UI thread without inheriting any claim to the UI thread from its caller.
            </summary>
            <param name="joinableTaskFactory">The factory to use for creating the task.</param>
            <param name="action">The delegate to invoke on the UI thread sometime in the future.</param>
            <param name="priority">The priority to use when switching to the UI thread or resuming after a yielding await.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask" /> that represents the on-idle operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.FileAndForget(Microsoft.VisualStudio.Threading.JoinableTask,System.String,System.String,System.Func{System.Exception,System.Boolean})">
            <summary>
            Records error information when the given <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask" /> faults.
            </summary>
            <param name="joinableTask">The task to track failures of.</param>
            <param name="faultEventName">
            An event name following data model schema to use when filing a fault event when <paramref name="joinableTask" /> faults.
            Must not be null or empty.
            It consists of 3 parts and must follows pattern [product]/[featureName]/[entityName]. FeatureName could be a one-level feature or feature hierarchy delimited by "/".
            For examples: vs/platform/opensolution; vs/platform/editor/lightbulb/fixerror.
            </param>
            <param name="faultDescription">
            A description to include in the fault telemetry event when <paramref name="joinableTask" /> faults.
            This value is not put in a bucket parameter, but it is in the ErrorInformation.txt file in the
            Cab file sent to Watson, and in the AI event.</param>
            <param name="fileOnlyIf">
            An optional exception filter that must return <c>true</c> for the exception to be reported to the VS activity log and fault telemetry.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.FileAndForget(System.Threading.Tasks.Task,System.String,System.String,System.Func{System.Exception,System.Boolean})">
            <summary>
            Records error information when the given <see cref="T:System.Threading.Tasks.Task" /> faults.
            </summary>
            <param name="task">The task to track failures of.</param>
            <param name="faultEventName">
            An event name following data model schema to use when filing a fault event when <paramref name="task" /> faults.
            Must not be null or empty.
            It consists of 3 parts and must follows pattern [product]/[featureName]/[entityName]. FeatureName could be a one-level feature or feature hierarchy delimited by "/".
            For examples,
            vs/platform/opensolution;
            vs/platform/editor/lightbulb/fixerror;
            This value is also provided as the source (first argument) to <see cref="M:Microsoft.VisualStudio.Shell.ActivityLog.TryLogError(System.String,System.String)" />.
            </param>
            <param name="faultDescription">
            A description to include in the fault telemetry event when <paramref name="task" /> faults.
            This value is not put in a bucket parameter, but it is in the ErrorInformation.txt file in the
            Cab file sent to Watson, and in the AI event.
            If specified, this value is used as part of the message (second argument) to <see cref="M:Microsoft.VisualStudio.Shell.ActivityLog.TryLogError(System.String,System.String)" />.
            </param>
            <param name="fileOnlyIf">
            An optional exception filter that must return <c>true</c> for the exception to be reported to the VS activity log and fault telemetry.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.AsVsTask``1(Microsoft.VisualStudio.Threading.JoinableTask{``0})">
            <summary>
            Wraps a <see cref="T:Microsoft.VisualStudio.Threading.JoinableTask`1" /> instance in an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTask" /> that can be
            returned to COM clients.
            </summary>
            <typeparam name="T">The type of value returned by the asynchronous operation.</typeparam>
            <param name="joinableTask">The task to wrap.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTask" /> instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.WithPriority(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory" /> that schedules work with the specified Visual Studio UI thread priority.
            </summary>
            <param name="joinableTaskFactory">The underlying <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory" /> to use.</param>
            <param name="priority">
            The priority with which to schedule any work on the UI thread,
            when and if <see cref="M:Microsoft.VisualStudio.Threading.JoinableTaskFactory.SwitchToMainThreadAsync(System.Threading.CancellationToken)" /> is called.
            </param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory" /> that may be used for scheduling async work with the specified priority.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.GetAwaiter(Microsoft.VisualStudio.Shell.Interop.IVsTask)">
            <summary>
            Extension method for IVsTask to support await syntax in managed code.
            </summary>
            <param name="task">IVsTask instance to be used for scheduling continuations.</param>
            <returns>an awaitable object for IVsTask instance.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.GetAwaiter(Microsoft.Internal.VisualStudio.Shell.VsTaskAwaiter)">
             <summary>
             Extension method to add await support for VsTaskAwaiter instance which can be
             returned from ResumeWith call.
            
             We simply return the same awaiter instance.
             </summary>
             <returns>Returns the same instance of awaiter that this method was called on.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.GetAwaiter(Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Allows awaiting on a <see cref="T:Microsoft.VisualStudio.Shell.VsTaskRunContext" /> in order to execute code at a particular priority
            on or off the UI thread.
            </summary>
            <param name="context">The context to run the next segment from the calling async method with.</param>
            <returns>An awaiter that will cause the caller to switch to a particular <see cref="T:System.Threading.Tasks.TaskScheduler" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.GetTaskScheduler(Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Gets the <see cref="T:System.Threading.Tasks.TaskScheduler" /> that executes tasks on the thread and with the priority
            specified by the specified <see cref="T:Microsoft.VisualStudio.Shell.VsTaskRunContext" />.
            </summary>
            <param name="context">Indicates the thread and priority that tasks should be scheduled on.</param>
            <returns>The requested <see cref="T:System.Threading.Tasks.TaskScheduler" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.ResumeWith(Microsoft.VisualStudio.Shell.Interop.IVsTask,Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Extension method for task awatier to support awaits with a specific context.
            </summary>
            <param name="task">The task that will be used to schedule continuations.</param>
            <param name="context">Context that the continuation would be scheduled under.</param>
            <returns>an awaitable object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.ContinueWith(Microsoft.VisualStudio.Shell.Interop.IVsTask,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody)">
            <summary>
            Override for IVsTask.ContinueWith to use proper enum types.
            </summary>
            <remarks>See comments for IVsTask for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.ContinueWith(Microsoft.VisualStudio.Shell.Interop.IVsTask,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.VsTaskContinuationOptions,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody,System.Object)">
            <summary>
            Override for IVsTask.ContinueWithEx to use proper enum types.
            </summary>
            <remarks>See comments for IVsTask for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Wait(Microsoft.VisualStudio.Shell.Interop.IVsTask,System.Int32,Microsoft.VisualStudio.Shell.VsTaskWaitOptions)">
            <summary>
            Override for IvsTask.WaitEx to use proper enum types.
            </summary>
            <remarks>See comments for IVsTask for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.Wait(Microsoft.VisualStudio.Shell.Interop.IVsTask,System.Int32)">
            <summary>
            Override for IvsTask.WaitEx with default options.
            </summary>
            <remarks>See comments for IVsTask for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CreateTask(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody)">
            <summary>
            Override for IVsTaskSchedulerService.CreateTask to use proper enum types.
            </summary>
            <remarks>See comments for IVsTaskSchedulerService for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CreateTask(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.VsTaskCreationOptions,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody,System.Object)">
            <summary>
            Override for IVsTaskSchedulerService.CreateTaskEx to use proper enum types.
            </summary>
            <remarks>See comments for IVsTaskSchedulerService for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CreateTaskCompletionSource(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskCreationOptions,System.Object)">
            <summary>
            Override for IVsTaskSchedulerService.CreateTaskCompletionSourceEx to use proper enum types.
            </summary>
            <remarks>See comments for IVsTaskSchedulerService for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.ContinueWhenAllCompleted(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.Interop.IVsTask[],Microsoft.VisualStudio.Shell.Interop.IVsTaskBody)">
            <summary>
            Override for IVsTaskSchedulerService.ContinueWhenAllCompleted to use proper enum types.
            </summary>
            <remarks>See comments for IVsTaskSchedulerService for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.ContinueWhenAllCompleted(Microsoft.VisualStudio.Shell.Interop.IVsTaskSchedulerService,Microsoft.VisualStudio.Shell.VsTaskRunContext,Microsoft.VisualStudio.Shell.Interop.IVsTask[],Microsoft.VisualStudio.Shell.VsTaskContinuationOptions,Microsoft.VisualStudio.Shell.Interop.IVsTaskBody,System.Object)">
            <summary>
            Override for IVsTaskSchedulerService.ContinueWhenAllCompletedEx to use proper enum types.
            </summary>
            <remarks>See comments for IVsTaskSchedulerService for method documentation.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.ApplyCancellationToken(Microsoft.VisualStudio.Shell.Interop.IVsTask,System.Threading.CancellationToken)">
            <summary>
            Signals a VS Task to abort operations as soon as possible when the specified token is canceled.
            </summary>
            <param name="task">The task that may be canceled.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CancelOnShutdown(Microsoft.VisualStudio.Shell.Interop.IVsTask,Microsoft.VisualStudio.Shell.AsyncPackage)">
            <summary>
            Ensures that <paramref name="task" /> will be canceled when <paramref name="package" /> is disposed.
            The package's Dispose method will not return until <paramref name="task" /> completes.
            </summary>
            <param name="task">The task to cancel on shutdown</param>
            <param name="package">The package whose disposal will trigger the cancellation of <paramref name="task" /></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.CancelWhenCancellationRequested(Microsoft.VisualStudio.Shell.Interop.IVsTask,Microsoft.VisualStudio.Threading.JoinableTaskFactory,System.Threading.CancellationToken)">
            <summary>
            Ensures that <paramref name="task" /> will be canceled when cancellation is requested for
            <paramref name="cancellationToken" />.
            </summary>
            <param name="task">The task to cancel.</param>
            <param name="jtf">The <see cref="T:Microsoft.VisualStudio.Threading.JoinableTaskFactory" /> to use.</param>
            <param name="cancellationToken">The token whose cancellation triggers the cancellation of <paramref name="task" />.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.IsUIThreadContext(Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Gets a value indicating whether the specified context represents UI thread work.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.IsUIThreadJoinableTaskSafeContext(Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Gets a value indicating whether the specified context represents UI thread work.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.SchedulerModifyingJoinableTaskFactoryWrapper">
            <summary>
            A JoinableTaskFactory that delegates to an existing one, except for scheduling UI thread work,
            which can be customized.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.SchedulerModifyingJoinableTaskFactoryWrapper.scheduler">
            <summary>
            The scheduler to use for UI thread work.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.SchedulerModifyingJoinableTaskFactoryWrapper.#ctor(Microsoft.VisualStudio.Threading.JoinableTaskFactory,Microsoft.VisualStudio.Shell.VsTaskRunContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.SchedulerModifyingJoinableTaskFactoryWrapper" /> class.
            </summary>
            <param name="innerFactory">The existing factory.</param>
            <param name="context">The priority with which to schedule any UI thread work.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsTaskLibraryHelper.SchedulerModifyingJoinableTaskFactoryWrapper.PostToUnderlyingSynchronizationContext(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            Posts work to the UI thread.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsManagedTaskBody">
            <summary>
            Managed implementation of a task body that will be within a task in the library.
            This object has to be thread safe.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.UIWin32ElementWrapper.Microsoft#VisualStudio#Shell#Interop#IVsBroadcastMessageEvents#OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.IVsBroadcastMessageEvents.OnBroadcastMessage&quot;]/*" />
            <internalonly />
            <devdoc>
            Receives broadcast messages from the shell
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.WindowPane">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane&quot;]" />
            <devdoc>
                This is a quick way to implement a tool window pane.  This class
                implements IVsWindowPane; you must provide an implementation of an
                object that returns an IWin32Window, however.  In addition to
                IVsWindowPane this object implements IOleCommandTarget, mapping
                it to IMenuCommandService and IObjectWithSite, mapping the site
                to services that can be querried through its protected GetService
                method.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.#ctor">
            <summary>
            Creates a new window pane with a null parent service provider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.#ctor(System.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.WindowPane&quot;]" />
            <devdoc>
                Creates a new window pane.  The window pane can accept a service provider
                to use when resolving services.  This provider can be null.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.WindowPane.Window">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.Window&quot;]" />
            <devdoc>
                Retrieves the window associated with this window pane.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.WindowPane.InitializationMode">
            <devdoc>
            Stores the state for how this WindowPane was initialized. Initialization
            happens through either IVsWindowPane.CreatePaneWindow or IVsUIElementPane.CreateUIElementPane.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.WindowPane.Content">
            <devdoc>
            Override or set to provide the content of this tool window.   Expected kinds of objects include
            FrameworkElement, IVsUIWpfElement, IVsUIWin32Element.   If the object is not of one of the expected
            types, it will be wrapped in a ContentControl, treated as WPF and any styling or formatting may
            be applied through the global resource dictionary.
            If your tool content is created from xaml, override the setter to provide a backing store for the content.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Dispose">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.Dispose&quot;]" />
            <devdoc>
                Can be called to dispose this editing window.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Dispose(System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.Dispose1&quot;]" />
            <devdoc>
                Called when this window pane is being disposed.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.EnsureCommandService">
            <devdoc>
            This is a separate method so the jitter doesn't see MenuCommandService (from system.design.dll) in
            the GetService call and load the assembly.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.GetService(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.GetService&quot;]" />
            <devdoc>
                Maps to IServiceProvider for service routing.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Initialize">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.Initialize&quot;]" />
            <devdoc>
                This method is called after the window pane has been sited.  Any initialization
                that requires window frame services from VS can be done by overriding this
                method.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.OnClose">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.OnClose&quot;]/*" />
            <devdoc>
                The OnClose method is called in response to the ClosePane method on
                IVsWindowPane.  The default implementation calls Dispose();
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.OnCreate">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.OnCreate&quot;]/*" />
            <devdoc>
                The OnCreate method is called during the CreatePaneWindow method of
                IVsWindowPane.  This provides a handy hook for knowing when VS wants
                the window.  The default implementation does nothing.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.PreProcessMessage(System.Windows.Forms.Message@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.PreProcessMessage&quot;]" />
            <devdoc>
                This method will be called to pre-process keyboard
                messages before VS handles them.  It is directly
                attached to IVsWindowPane::TranslateAccellerator.
                The default implementation calls the PreProcessMessage
                method on a Windows Forms control.  You may override this if your
                window pane is not based on Windows Forms.
                Arguments and return values are the
                same as for Windows Forms:  return true if you handled
                the message, false if you want the default processing
                to occur.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.IOleCommandTarget.Exec&quot;]/*" />
            <internalonly />
            <devdoc>
            This is called by Visual Studio when the user has requested to execute a particular
            command.  There is no need to override this method.  If you need access to menu
            commands use IMenuCommandService.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#OLE#Interop#IOleCommandTarget#QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.IOleCommandTarget.QueryStatus&quot;]/*" />
            <internalonly />
            <devdoc>
            This is called by Visual Studio when it needs the status of our menu commands.  There
            is no need to override this method.  If you need access to menu commands use
            IMenuCommandService.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.System#IServiceProvider#GetService(System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.IServiceProvider.GetService&quot;]/*" />
            <internalonly />
            <devdoc>
            IServiceProvider implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsUIElementPane#CloseUIElementPane">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.IVsUIElementPane.CloseUIElementPane&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsUIElementPane implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsUIElementPane#CreateUIElementPane(System.Object@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.IVsUIElementPane.CreateUIElementPane&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsUIElementPane implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsUIElementPane#GetDefaultUIElementSize(Microsoft.VisualStudio.OLE.Interop.SIZE[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.IVsUIElementPane.GetDefaultSize&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsUIElementPane implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.LoadUIState(System.IO.Stream)">
            <summary>
            Override to load previously saved state of the pane
            </summary>
            <param name="??"></param>
            <param name="??"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsUIElementPane#LoadUIElementState(Microsoft.VisualStudio.OLE.Interop.IStream)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.IVsUIElementPane.LoadUIElementState&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsUIElementPane implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.SaveUIState(System.IO.Stream@)">
            <summary>
            Override to save custom state information to be used later when the pane is reconstructed.
            </summary>
            <returns>The stream with the state information</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsUIElementPane#SaveUIElementState(Microsoft.VisualStudio.OLE.Interop.IStream)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.IVsUIElementPane.SaveUIElementState&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsUIElementPane implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsUIElementPane#SetUIElementSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.IVsUIElementPane.SetUIElementSite&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsUIElementPane implementation.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WindowPane.Microsoft#VisualStudio#Shell#Interop#IVsUIElementPane#TranslateUIElementAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
            <!-- Failed to insert some or all of included XML --><include file="doc\WindowPane.uex" path="docs/doc[@for=&quot;WindowPane.IVsUIElementPane.TranslateUIElementAccelerator&quot;]/*" />
            <internalonly />
            <devdoc>
            IVsUIElementPane implementation.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.WindowPane.PaneInitializationMode">
            <devdoc>
            Enumerates the possible initialization states for a WindowPane instance.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.WrapperPolicy.s_ComWrapperFactory">
            <summary>
            Factory object for creating IComWrapper instances.
            Internal and not readonly so that unit tests can provide an alternative implementation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Shell.WrapperPolicy.s_ComWrapperFactory2">
            <summary>
            Factory object for creating IFreeThreadedComWrapper instances.
            Internal and not readonly so that unit tests can provide an alternative implementation.
            Different instance than IComWrapperFactory as not to break unit tests that provider an
            alternative implementation for s_ComWrapperFactory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WrapperPolicy.CreateAggregatedObject(System.Object)">
            <summary>
            Wraps the provided object in a native layer that implements STA-threaded COM behavior.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WrapperPolicy.CreateFreeThreadedAggregatedObject(System.Object)">
            <summary>
            Wraps the provided object in a native layer that implements free-threaded COM behavior.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.WrapperPolicy.TryGetWrapper(System.Object)">
            <summary>
            Return the RCW for the native IComWrapper instance aggregating "managedObject"
            if there is one. Return "null" if "managedObject" is not aggregated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsExecutionContextTrackerHelper">
            <summary>
            Helpers for Visual Studio Execution Context Tracker service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Shell.VsExecutionContextTrackerHelper.Instance">
            <summary>
            Gets the execution context tracker instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsExecutionContextTrackerHelper.GetCurrentContext">
            <summary>
            Gets the current execution context cookie or Nil cookie of service is not available.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Shell.VsExecutionContextTrackerHelper.CaptureCurrentContext">
            <summary>
            Captures the current execution contexts and returns it.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Shell.VsExecutionContextTrackerHelper.CapturedContext">
            <summary>
            Helper to execute an action under a different context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.AssemblyEnumerationService">
            <devdoc>
                This service enumerates the set of SDK components for Visual Studio.  Components are returned as
                an enumeration of assembly names.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.AssemblyEnumerationService.#ctor(System.IServiceProvider)">
            <devdoc>
                CTor.  provider must be valid.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.AssemblyEnumerationService.EnumFactory">
            <devdoc>
                Returns a VS enumerator factory that can be used to enumerate components.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.AssemblyEnumerationService.GetAssemblyNames">
            <devdoc>
                Retrieves an enumerator that can enumerate
                assembly names matching name.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.AssemblyEnumerationService.GetAssemblyNames(System.String)">
            <devdoc>
                Retrieves an enumerator that can enumerate
                assembly names matching name.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.AssemblyEnumerationService.VSAssemblyEnumerator">
            <devdoc>
                This is an IEnumerator that sits on top of VS's own enumerator.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.AssemblyEnumerationService.VSAssemblyEnumerator.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsComponentEnumeratorFactory,System.String)">
            <devdoc>
                Ctor.  enumFactory must be valid.
            </devdoc>
        </member>
        <member name="P:Microsoft.VisualStudio.AssemblyEnumerationService.VSAssemblyEnumerator.System#Collections#IEnumerator#Current">
            <devdoc>
                Current element. This throws if there is no current element.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.AssemblyEnumerationService.VSAssemblyEnumerator.System#Collections#IEnumerator#MoveNext">
            <devdoc>
                Moves to the next element. This returns false if we are at the end or are otherwise unable
                to move.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.AssemblyEnumerationService.VSAssemblyEnumerator.System#Collections#IEnumerator#Reset">
            <devdoc>
                Rests the enumerator back to the beginning.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.AssemblyEnumerationService.VSAssemblyEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <devdoc>
                The enumerator for this service.  This returns an enumerator that contains
                a list of assembly names.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.AsyncServiceProviderInjection`2">
            <summary>
            Extenders using the VisualStudio.Extensibility model to develop in-process extension can use
            <see cref="T:Microsoft.VisualStudio.Extensibility.AsyncServiceProviderInjection`2" /> to retrieve services offered by the async
            service provider through .NET dependency injection.
            </summary>
            <typeparam name="TService">The type that defines the service. <typeparamref name="TService" />
            is passed to <see cref="M:Microsoft.VisualStudio.Shell.IAsyncServiceProvider.GetServiceAsync(System.Type)" /> when retrieving the service.
            </typeparam>
            <typeparam name="TInterface">The expected type of the retrieved service.
            The value returned by <see cref="M:Microsoft.VisualStudio.Shell.IAsyncServiceProvider.GetServiceAsync(System.Type)" /> is cast to
            <typeparamref name="TInterface" />.</typeparam>
            <remarks>Extensions should retrieve instances of this type through dependency injection.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.AsyncServiceProviderInjection`2.#ctor(Microsoft.VisualStudio.Shell.IAsyncServiceProvider2)">
            <summary>
            This constructor is for internal use only.
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Extensibility.AsyncServiceProviderInjection`2" />.
            </summary>
            <param name="asyncServiceProvider">The async service provider.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.AsyncServiceProviderInjection`2.GetServiceAsync(System.Boolean)">
            <summary>
            Asynchronously returns the retrieved service.
            </summary>
            <returns>An instance of the <typeparamref name="TService" /> service.</returns>
            <remarks>Multiple calls to this method will return the same instance of <typeparamref name="TInterface" />.
            </remarks>
            <exception cref="T:Microsoft.VisualStudio.Shell.ServiceUnavailableException">When <paramref name="assumePresent" /> is <see langword="true" /> and
            there isn't any service of type <typeparamref name="TService" /> available.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.AsyncServiceProviderInjection`2.GetServiceAsync">
            <summary>
            Asynchronously returns the retrieved service.
            </summary>
            <returns>An instance of the <typeparamref name="TService" /> service.</returns>
            <remarks>Multiple calls to this method will return the same instance of <typeparamref name="TInterface" />.
            </remarks>
            <exception cref="T:Microsoft.VisualStudio.Shell.ServiceUnavailableException">If there isn't any service of type <typeparamref name="TService" />
            available.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.MefInjection`2">
            <summary>
            Extenders using the VisualStudio.Extensibility model to develop in-process extension can use
            <see cref="T:Microsoft.VisualStudio.Extensibility.MefInjection`2" /> to retrieve MEF services through .NET dependency
            injection.
            </summary>
            <typeparam name="TService">The type that defines the service. <typeparamref name="TService" />
            is passed to <see cref="M:Microsoft.VisualStudio.ComponentModelHost.IComponentModel.GetService``1" /> when retrieving the service.
            </typeparam>
            <typeparam name="TInterface">The expected type of the retrieved service.
            The value returned by <see cref="M:Microsoft.VisualStudio.ComponentModelHost.IComponentModel.GetService``1" /> is cast to <typeparamref name="TInterface" />.
            </typeparam>
            <remarks>Extensions should retrieve instances of this type through dependency injection.
            This class should be used only when exactly one instance of <typeparamref name="TService" /> exists in the
            composition container.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.MefInjection`2.#ctor(Microsoft.VisualStudio.Extensibility.AsyncServiceProviderInjection{Microsoft.VisualStudio.ComponentModelHost.SComponentModel,Microsoft.VisualStudio.ComponentModelHost.IComponentModel})">
            <summary>
            This constructor is for internal use only.
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Extensibility.MefInjection`2" />.
            </summary>
            <param name="componentModel">The MEF host in Visual Studio.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.MefInjection`2.GetServiceAsync">
            <summary>
            Asynchronously returns the retrieved service.
            </summary>
            <returns>An instance of the <typeparamref name="TService" /> service.</returns>
            <remarks>Multiple calls to this method will return the same instance of <typeparamref name="TInterface" />.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Extensibility.MefInjection`1">
            <summary>
            Extenders using the VisualStudio.Extensibility model to develop in-process extension can use
            <see cref="T:Microsoft.VisualStudio.Extensibility.MefInjection`1" /> to retrieve MEF services through .NET dependency
            injection.
            </summary>
            <typeparam name="TService">The type of the retrieved service. <typeparamref name="TService" />
            is passed to <see cref="M:Microsoft.VisualStudio.ComponentModelHost.IComponentModel.GetExtensions``1" /> when retrieving the service.
            </typeparam>
            <remarks>Extensions should retrieve instances of this type through dependency injection.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Extensibility.MefInjection`1.#ctor(Microsoft.VisualStudio.Extensibility.AsyncServiceProviderInjection{Microsoft.VisualStudio.ComponentModelHost.SComponentModel,Microsoft.VisualStudio.ComponentModelHost.IComponentModel})">
            <summary>
            This constructor is for internal use only.
            Creates an instance of <see cref="T:Microsoft.VisualStudio.Extensibility.MefInjection`1" />.
            </summary>
            <param name="componentModel">The MEF host in Visual Studio.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.Unbox">
            <summary>
            Unboxes an object that contains a value type into a specific, possibly-different
            value type.  Value truncation may occur when using methods of this type, as
            the original source value is cast to the target value without ensuring that
            the target value can contain the original source value.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.EmbeddedObjectHelper">
            <summary>
            Static helper class that contains dependency properties used by containers such as Peek to obtain references to
            command handling and user context objects defined by the objects they contain.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.EmbeddedObjectHelper.OleCommandTargetProperty">
            <summary>
            <see cref="T:System.Windows.DependencyProperty" /> used to bind the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> on embedded objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.EmbeddedObjectHelper.GetOleCommandTarget(System.Windows.UIElement)">
            <summary>
            Gets <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> value for the provided embedded <see cref="T:System.Windows.UIElement" />.
            </summary>
            <param name="element">An instance of <see cref="T:System.Windows.UIElement" /> to be used in embedded environments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.EmbeddedObjectHelper.SetOleCommandTarget(System.Windows.UIElement,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
            <summary>
            Sets <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> value for the provided embedded <see cref="T:System.Windows.UIElement" />.
            </summary>
            <param name="element">An instance of <see cref="T:System.Windows.UIElement" /> to be used in embedded environments.</param>
            <param name="value">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> to be set.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.EmbeddedObjectHelper.UserContextProviderProperty">
            <summary>
            <see cref="T:System.Windows.DependencyProperty" /> used to bind the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProvideUserContext" /> on embedded objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.EmbeddedObjectHelper.GetUserContextProvider(System.Windows.UIElement)">
            <summary>
            Gets <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProvideUserContext" /> value for the provided embedded <see cref="T:System.Windows.UIElement" />.
            </summary>
            <param name="element">An instance of <see cref="T:System.Windows.UIElement" /> to be used in embedded environments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.EmbeddedObjectHelper.SetUserContextProvider(System.Windows.UIElement,Microsoft.VisualStudio.Shell.Interop.IVsProvideUserContext)">
            <summary>
            Sets <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProvideUserContext" /> value for the provided embedded <see cref="T:System.Windows.UIElement" />.
            </summary>
            <param name="element">An instance of <see cref="T:System.Windows.UIElement" /> to be used in embedded environments.</param>
            <param name="value">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProvideUserContext" /> to be set.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.EnumerableGuidsCollection">
            <summary>
            IEnumerable wrapper for IVsEnumGuids
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.EnumerableSearchProvidersCollection">
            <summary>
            IEnumerable wrapper for IVsEnumSearchProviders
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchProviderSettingsDataSource.PropertyNames.SearchResultsCacheable">
            <summary>
            The name of the property indicating Whether the Most Recently Executed provider (IVsMRESearchProvider) can cache the text properties of the result items for faster recent item retrieval. VSUI_TYPE_BOOL. Default=True.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchProviderSettingsDataSource.PropertyNames.SearchProgressType">
            <summary>
            The name of the property indicating the progress type supported by the search provider. VSUI_TYPE_DWORD(VSSEARCHPROGRESSTYPE). Default=SPT_NONE.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchProviderSettingsDataSource.SearchResultsCacheableProperty">
            <summary>
            Gets the SearchResultsCacheable property descriptor for this datasource.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchProviderSettingsDataSource.SearchProgressTypeProperty">
            <summary>
            Gets the SearchProgressTypeProperty property descriptor for this datasource.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SearchProviderSettingsDataSource.SearchResultsCacheable">
            <summary>
            Gets or sets a value indicating whether the search results for this search provider should have their display properties
            cached in the Recent Items store when executed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SearchProviderSettingsDataSource.SearchProgressType">
            <summary>
            Gets or sets the progress type to use for this search provider during a search.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SearchUtilities">
            <summary>
            The Search Utilities class
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchUtilities.CreateSearchQueryParser">
            <summary>
            Create and returns a search query parser
            </summary>
            <returns>An object implementing IVsUIWpfIVsSearchQueryParserLoader interface</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchUtilities._searchQueryParser">
            <summary>
            An instance of the search query parser shared by the helper methods
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchUtilities.CreateSearchQuery(System.String)">
            <summary>
            Create a new search query from the search string
            </summary>
            <param name="searchString">String to parse into a search query</param>
            <returns>A search query built from the search string</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchUtilities.BuildSearchString(Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery)">
            <summary>
            Rebuilds a search string from a search query
            </summary>
            <param name="searchQuery">A search query to get the search string from</param>
            <returns>The rebuilt string of the search query</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchUtilities.BuildSearchString(Microsoft.VisualStudio.Shell.Interop.IVsSearchToken[])">
            <summary>
            Rebuilds a search string from an array of search tokens
            </summary>
            <param name="searchTokens">An array of search tokens to get the search string from</param>
            <returns>The rebuilt string of the search tokens</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchUtilities.GetSearchToken(System.String)">
            <summary>
             Returns a search token that will parse to the specified token text
            </summary>
            <param name="tokenText">The text of the token to be returned</param>
            <returns>A search token with the specified text</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchUtilities.GetSearchFilterToken(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.__VSSEARCHFILTERTOKENTYPE)">
            <summary>
            Returns a search filter token built from the specified filter token components
            </summary>
            <param name="filterField">The filter's field</param>
            <param name="filterValue">The filter's value</param>
            <param name="filterTokenType">The type of the filter token to be returned</param>
            <returns>A search filter token with the specified components</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchUtilities.ExtractSearchTokens(Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery)">
            <summary>
            Returns an enumerable of IVsSearchTokens from an IVsSearchQuery.
            </summary>
            <param name="query">The query to extract the search tokens from.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.AbstractPoint">
            <summary>
            A class that represents a point abstractly.  This is useful with controls or panels that support
            multiple orientations.  The rendering or layout code for the control or panel can be written using
            a single, "natural" orientation and then the point can be converted, if necessary, to the control's
            or panel's actual orientation as needed.  This can substantially simplify rendering or layout logic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractPoint.NaturalOrientation">
            <summary>
            The "natural" orientation of the geometric unit, from the perspective of the context in which it is used.
            For example, it may be most natural to write the layout code for a StackPanel using Vertical
            orientation since a stack in the real world is a vertical thing.
            
            The choice of natural orientation within a given context is not important, as long as the same
            natural orientation is used consistently throughout that context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractPoint.ActualOrientation">
            <summary>
            The actual orientation of the geometric unit.  This is typically determined by the value of the Orientation 
            property of the control or panel in which this structure is used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractPoint.IsNatural">
            <summary>
            Indiates whether the size's actual orientation matches its natural orientation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractPoint.AbstractX">
            <summary>
            The abstract X of the point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractPoint.AbstractY">
            <summary>
            The abstract Y of the point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractPoint.RealPoint">
            <summary>
            The real, non-abstract point represented by this structure.  If IsNatural is true, the real point
            and the abstract point are the same. If IsNatural is false, the real point is the inverse of the
            abstract point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractPoint.RealX">
            <summary>
            The real, non-abstract X of the point.  If IsNatural is true, the real X and the abstract
            X are the same. If IsNatural is false, the real X is the abstract Y.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractPoint.RealY">
            <summary>
            The real, non-abstract Y of the point.  If IsNatural is true, the real Y and the abstract
            Y are the same. If IsNatural is false, the real Y is the abstract X.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AbstractPoint.ToString">
            <summary>
            Creates a string representation of this abstract point
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AbstractPoint.Invert(System.Windows.Point)">
            <summary>
            Returns a Point structure with the input's X and Y properties swapped.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.AbstractSize">
            <summary>
            A class that represents size abstractly.  This is useful with controls or panels that support
            multiple orientations.  The rendering or layout code for the control or panel can be written using
            a single, "natural" orientation and then the size can be converted, if necessary, to the control's
            or panel's actual orientation as needed.  This can substantially simplify rendering or layout logic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractSize.NaturalOrientation">
            <summary>
            The "natural" orientation of the geometric unit, from the perspective of the context in which it is used.
            For example, it may be most natural to write the layout code for a StackPanel using Vertical
            orientation since a stack in the real world is a vertical thing.
            
            The choice of natural orientation within a given context is not important, as long as the same
            natural orientation is used consistently throughout that context.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractSize.ActualOrientation">
            <summary>
            The actual orientation of the geometric unit.  This is typically determined by the value of the Orientation 
            property of the control or panel in which this structure is used.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractSize.IsNatural">
            <summary>
            Indiates whether the size's actual orientation matches its natural orientation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractSize.AbstractWidth">
            <summary>
            The abstract width of the size.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractSize.AbstractHeight">
            <summary>
            The abstract height of the size.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractSize.RealSize">
            <summary>
            The real, non-abstract size represented by this structure.  If IsNatural is true, the real size
            and the abstract size are the same. If IsNatural is false, the real size is the inverse of the
            abstract size.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractSize.RealWidth">
            <summary>
            The real, non-abstract width of the size.  If IsNatural is true, the real width and the abstract
            width are the same. If IsNatural is false, the real width is the abstract height.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AbstractSize.RealHeight">
            <summary>
            The real, non-abstract height of the size.  If IsNatural is true, the real height and the abstract
            height are the same. If IsNatural is false, the real height is the abstract width.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AbstractSize.ToString">
            <summary>
            Creates a string representation of this abstract size
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AbstractSize.Invert(System.Windows.Size)">
            <summary>
            Returns a Size structure with the input's Width and Height properties swapped.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.PlatformUI.AccessKeyConverter.Convert(System.String,System.Object,System.Globalization.CultureInfo)" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.PlatformUI.AccessKeyRemovingConverter.Convert(System.String,System.Object,System.Globalization.CultureInfo)" -->
        <member name="T:Microsoft.VisualStudio.PlatformUI.BooleanToCustomVisibilityConverter">
            <summary>
            Converter from a boolean value to a Visibility constant. 
            This convert allows the actual Visibility values to be specified as properties.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.BooleanToCustomVisibilityConverter.VisibilityIfTrue">
            <summary>
            Gets or sets the visibility state to evaluate to if the input value is true.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.BooleanToCustomVisibilityConverter.VisibilityIfFalse">
            <summary>
            Gets or sets the visibility state to evaluate to if the input value is false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.BooleanToCustomVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the BooleanToCustomVisibilityConverter.  By default, this
            converter behaves like the WPF BooleanToVisibilityConverter unless the VisibilityIfTrue
            and VisibilityIfFalse properties are changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.BooleanToCustomVisibilityConverter.Convert(System.Boolean,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a boolean value to a Visibility constant.
            </summary>
            <param name="value">Value to convert</param>
            <param name="parameter">Conversion parameter.</param>
            <param name="culture">Culture for conversion.</param>
            <returns>VisibilityIfTrue if <paramref name="value" /> is true, VisibilityIfFalse otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.BooleanToFlowDirectionConverter">
            <summary>
            Converter from a boolean value to a FlowDirection constant. This value is stored in the Main window's
            data source as a boolean, if it is true it indicates that layout should be Right to Left, and
            if it is false layout should be Left to Right.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.BooleanToFlowDirectionConverter.Convert(System.Boolean,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a boolean value to a FlowDirection constant.
            </summary>
            <param name="value">Value to convert</param>
            <param name="parameter">Conversion parameter.</param>
            <param name="culture">Culture for conversion.</param>
            <returns>FlowDirection.LeftToRight if <paramref name="value" /> is false, FlowDirection.RightToLeft otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.BooleanToHiddenVisibilityConverter">
            <summary>
            Converter from a boolean value to a Visibility constant. 
            Unlike System.Windows.Control.BooleanToVisibilityConverter, this converter
            maps false to Hidden instead of Collapsed.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.BooleanToHiddenVisibilityConverter.Convert(System.Boolean,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a boolean value to a Visibility constant.
            </summary>
            <param name="value">Value to convert</param>
            <param name="parameter">Conversion parameter.</param>
            <param name="culture">Culture for conversion.</param>
            <returns>Visibility.Hidden if <paramref name="value" /> is false, Visibility.Visible otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.DeviceToLogicalPixelConverter">
            <summary>
            Converts a device pixel component (x, y) to logical component for the
            specified axis (use HorizontalAxis for x, VerticalAxis for y value).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DeviceToLogicalPixelConverter.Convert(System.Int32,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a device coordinate component provided in 'value' parameter to logical
            pixel component. Note that 'parameter' parameter need to be either HorizontalAxis or
            VerticalAxis to determine which axis is going to be used for the conversion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.DpiHelper">
             <summary>
             Helper class providing static properties, static methods and extension methods
             for scaling coordinates and images according to current System DPI set in 
             Windows's Display Properties.
             The class scales images designed for 100% zoom levels (96dpi).
            
             This class should be used by code running inside Visual Studio or other
             appids. The class provides public static properties and methods for easy 
             binding/calling, and public static extension methods; the actual scaling
             implementation is delegated to the DpiHelper class from Microsoft.VisualStudio.Utilities. 
            
             This class allows the user to override the shell default scaling algorithms 
             via registry settings under the running appid's hive.
             E.g. The user can set ImageScaling125, ImageScaling200, etc with values from ImageScalingMode
             enumeration to control the scaling algorithm used for managed Image objects at 125% and 200%.
             Similarly, the user can set BitmapScaling150, BitmapScaling200, etc to control the scaling 
             algorithm of WPF ImageSources. And the user can set boolean registry values like 
             UseBitmapPreScaling250 to control whether image scaling at 250% should be done in 2 steps,
             with NearestNeighbor up to the largest 100% multiple (200%), and from there with the algorithm
             specified by BitmapScaling250.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.DpiHelper.DpiHelperImplementation">
            <summary>
            The DpiHelper actual implementation.
            Derives from the Microsoft.VisualStudio.Utilities.Dpi.DpiHelper scaling helper, 
            and overrides a couple of functions allowing user-override of the scaling 
            algorithms via registry settings under the running appid's hive.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.ImageScalingMode">
            <summary>
            Retuns the ImageScalingMode algorithm to be used for resizing images in WinForms/Win32.
            This allows the shell to control the algorithm depending on the DPI zoom scale, and allows the user to override it via registry settings like
            General\ImageScalingXXX = (ImageScalingMode)value, with XXX the zoom factor in percents, e.g. ImageScaling150, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.BitmapScalingMode">
            <summary>
            Retuns the BitmapScalingMode algorithm to be used for resizing images in WPF.
            This allows the shell to control the algorithm depending on the DPI zoom scale, and allows the user to override it via registry settings like
            General\BitmapScalingXXX = (BitmapScalingMode)value, with XXX the zoom factor in percents, e.g. BitmapScaling150, etc.
            Note that for WPF scaling, there is an additional registry value that applies for zoom factors &gt; 200%, UseBitmapPreScalingXXX
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.UsePreScaledImages">
            <summary>
            Returns whether images should be pre-scaled at zoom levels higher than 200%, using NearestNeighbor up to the largest multiple of 100%
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceDpiX">
            <summary>
            The screen's (device) current horizontal DPI
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceDpiY">
            <summary>
            The screen's (device) current vertical DPI
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalDpiX">
            <summary>
            The helper's logical horizontal DPI
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalDpiY">
            <summary>
            The helper's logical vertical DPI
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.IsScalingRequired">
            <summary>
            Returns whether scaling is required when converting between logical-device units 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnitsX(System.Double)">
            <summary>
            Transforms a horizontal coordinate from logical to device units
            </summary>
            <param name="value">The horizontal value in logical units</param>
            <returns>The horizontal value in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnitsY(System.Double)">
            <summary>
            Transforms a vertical coordinate from logical to device units
            </summary>
            <param name="value">The vertical value in logical units</param>
            <returns>The vertical value in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnitsX(System.Double)">
            <summary>
            Transforms a horizontal coordinate from device to logical units
            </summary>
            <param name="value">The horizontal value in device units</param>
            <returns>The horizontal value in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnitsY(System.Double)">
            <summary>
            Transforms a vertical coordinate from device to logical units
            </summary>
            <param name="value">The vertical value in device units</param>
            <returns>The vertical value in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnitsX(System.Single)">
            <summary>
            Transforms a horizontal coordinate from logical to device units
            </summary>
            <param name="value">The horizontal value in logical units</param>
            <returns>The horizontal value in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnitsY(System.Single)">
            <summary>
            Transforms a vertical coordinate from logical to device units
            </summary>
            <param name="value">The vertical value in logical units</param>
            <returns>The vertical value in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnitsX(System.Int32)">
            <summary>
            Transforms a horizontal integer coordinate from logical to device units
            by scaling it up  for current DPI and rounding to nearest integer value
            </summary>
            <param name="value">The horizontal value in logical units</param>
            <returns>The horizontal value in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnitsY(System.Int32)">
            <summary>
            Transforms a vertical integer coordinate from logical to device units
            by scaling it up  for current DPI and rounding to nearest integer value
            </summary>
            <param name="value">The vertical value in logical units</param>
            <returns>The vertical value in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnitsX(System.Single)">
            <summary>
            Transforms a horizontal coordinate from device to logical units
            </summary>
            <param name="value">The horizontal value in device units</param>
            <returns>The horizontal value in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnitsY(System.Single)">
            <summary>
            Transforms a vertical coordinate from device to logical units
            </summary>
            <param name="value">The vertical value in device units</param>
            <returns>The vertical value in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnitsX(System.Int32)">
            <summary>
            Transforms a horizontal integer coordinate from device to logical units
            </summary>
            <param name="value">The horizontal value in device units</param>
            <returns>The horizontal value in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnitsY(System.Int32)">
            <summary>
            Transforms a vertical integer coordinate from device to logical units
            </summary>
            <param name="value">The vertical value in device units</param>
            <returns>The vertical value in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.RoundToDeviceUnitsX(System.Double)">
            <summary>
            Returns the closest value in logical units that will be converted
            to an integer value when converted to horizontal device units
            </summary>
            <param name="value">The logical value to round</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.RoundToDeviceUnitsY(System.Double)">
            <summary>
            Returns the closest value in logical units that will be converted
            to an integer value when converted to vertical device units
            </summary>
            <param name="value">The logical value to round</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Windows.Point)">
            <summary>
            Extension method for Point that returns a new Point with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">Point in logical units</param>
            <returns>Point in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Windows.Rect)">
            <summary>
            Extension method for Rect that returns a new Rect with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalRect">Rect in logical coordinates</param>
            <returns>Rect in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Windows.Size)">
            <summary>
            Extension method for Size that returns a new Size with the input's
            dimensions converted from logical units to device units.
            </summary>
            <param name="logicalSize">Size in logical units</param>
            <returns>Size in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Windows.Thickness)">
            <summary>
            Extension method for Thickness that returns a new Thickness with the input's
            dimensions converted from logical units to device units.
            </summary>
            <param name="logicalThickness">Thickness in logical units</param>
            <returns>Thickness in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnits(System.Windows.Point)">
            <summary>
            Extension method for Point that returns a new Point with the input's
            coordinates converted from device units to logical units.
            </summary>
            <param name="devicePoint">Point in device coordinates</param>
            <returns>Point in logical coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnits(System.Windows.Rect)">
            <summary>
            Extension method for Rect that returns a new Rect with the input's
            coordinates converted from device units to logical units.
            </summary>
            <param name="deviceRect">Rect in device coordinates</param>
            <returns>Rect in logical coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnits(System.Windows.Size)">
            <summary>
            Extension method for Size that returns a new Size with the input's
            dimensions converted from device units to logical units.
            </summary>
            <param name="deviceSize">Size in device units</param>
            <returns>Size in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.DeviceToLogicalUnits(System.Windows.Thickness)">
            <summary>
            Extension method for Thickness that returns a new Thickness with the input's
            dimensions converted from device units to logical units.
            </summary>
            <param name="logicalThickness">Thickness in device units</param>
            <returns>Thickness in logical units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.SetDeviceLeft(System.Windows.Window,System.Double)">
            <summary>
            Extension method for Window that sets its Left coordinate using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceLeft">New left coordinate in device units</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.GetDeviceLeft(System.Windows.Window)">
            <summary>
            Extension method for Window that returns its Left coordinate in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Left coordinate in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.SetDeviceTop(System.Windows.Window,System.Double)">
            <summary>
            Extension method for Window that sets its Top coordinate using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceTop">New top coordinate in device units</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.GetDeviceTop(System.Windows.Window)">
            <summary>
            Extension method for Window that returns its Top coordinate in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Top coordinate in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.SetDeviceWidth(System.Windows.Window,System.Double)">
            <summary>
            Extension method for Window that sets its Width using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceWidth">New width in device units</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.GetDeviceWidth(System.Windows.Window)">
            <summary>
            Extension method for Window that returns its Width in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Width in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.SetDeviceHeight(System.Windows.Window,System.Double)">
            <summary>
            Extension method for Window that sets its Height using device units
            </summary>
            <param name="window">Window to modify</param>
            <param name="deviceHeight">New height in device units</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.GetDeviceHeight(System.Windows.Window)">
            <summary>
            Extension method for Window that returns its Height in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Height in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.GetDeviceRect(System.Windows.Window)">
            <summary>
            Extension method for Window that returns its Rectangle in device units
            </summary>
            <param name="window">Window to inspect</param>
            <returns>Window rectangle in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.GetDeviceActualSize(System.Windows.FrameworkElement)">
            <summary>
            Extension method for FrameworkElement that returns its Size in device units
            </summary>
            <param name="element">FrameworkElement to inspect</param>
            <returns>Actual Size in device units</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Drawing.Point)">
            <summary>
            Extension method for System.Drawing.Point that returns a new Point with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">Point in logical units</param>
            <returns>Point in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Drawing.Size)">
            <summary>
            Extension method for System.Drawing.Size that returns a new Size with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">Size in logical units</param>
            <returns>Size in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Drawing.Rectangle)">
            <summary>
            Extension method for System.Drawing.Rectangle that returns a new Rectangle with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">Rectangle in logical units</param>
            <returns>Rectangle in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Drawing.PointF)">
            <summary>
            Extension method for System.Drawing.PointF that returns a new PointF with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">PointF in logical units</param>
            <returns>PointF in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Drawing.SizeF)">
            <summary>
            Extension method for System.Drawing.SizeF that returns a new SizeF with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">SizeF in logical units</param>
            <returns>SizeF in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Drawing.RectangleF)">
            <summary>
            Extension method for System.Drawing.RectangleF that returns a new RectangleF with the input's
            coordinates converted from logical units to device units.
            </summary>
            <param name="logicalPoint">RectangleF in logical units</param>
            <returns>RectangleF in device coordinates</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="bitmapImage">The bitmap image to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the image. When the interpolation mode is Bilinear or Bicubic, a transparent color will be used for background and the image's magins will be interpolated with the background. As result, the returned image will use alpha blending.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="bitmapImage">The bitmap image to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Drawing.Image@,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="image">The image to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the image. When the interpolation mode is Bilinear or Bicubic, a transparent color will be used for background and the image's magins will be interpolated with the background. As result, the returned image will use alpha blending.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Drawing.Image@,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image by scaling it to device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="image">The image to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.PreScaledImageLayoutTransformScaleX">
            <summary>
            Return the horizontal scale value that should be used with a LayoutTransform/ScaleTransform to scale back 
            an image pre-scaled in HighDPI with DpiPrescaleImageSourceConverter in order to obtain crisp results
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.DpiHelper.PreScaledImageLayoutTransformScaleY">
            <summary>
            Return the vertical scale value that should be used with a LayoutTransform/ScaleTransform to scale back 
            an image pre-scaled in HighDPI with DpiPrescaleImageSourceConverter in order to obtain crisp results
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Image,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Extension method for System.Drawing.Image that creates and returns a new bitmap or metafile scaled for the device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="logicalImage">The image to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.ScaleLogicalImageForDeviceSize(System.Windows.Media.ImageSource,System.Windows.Size,System.Windows.Media.BitmapScalingMode)">
            <summary>
            Scale a WPF image to the indicated size, using the specified scalingMode
            </summary>
            <param name="image">The image to scale</param>
            <param name="deviceImageSize">The resultant image size</param>
            <param name="scalingMode">The BitmapScalingMode to be used during image resize</param>
            <returns>The scaled up image</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Image,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Extension method for System.Drawing.Image that creates and returns a new bitmap or metafile scaled for the device units.
            When displayed on the device, the scaled image will have same size as the original image would have when displayed at 96dpi.
            </summary>
            <param name="logicalImage">The image to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the image</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Size,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image strip to device units, using NearestNeighbor interpolation..
            When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
            This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
            because the resultant bitmap strip size may be different from just upscaling as bitmap
            N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
            This may happen depending on the image width because dpiscale is a double not an int.
            </summary>
            <param name="imageStrip">The image strip to scale from logical units to device units</param>
            <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Drawing.Bitmap@,System.Drawing.Size,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the image strip to device units, using NearestNeighbor interpolation..
            When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
            This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
            because the resultant bitmap strip size may be different from just upscaling as bitmap
            N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
            This may happen depending on the image width because dpiscale is a double not an int.
            </summary>
            <param name="imageStrip">The image strip to scale from logical units to device units</param>
            <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Bitmap,System.Drawing.Size,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Extension method for System.Drawing.Bitmap that creates and returns a new bitmap strip scaled for the device units, using NearestNeighbor interpolation.
            When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
            This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
            because the resultant bitmap strip size may be different from just upscaling as bitmap
            N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
            This may happen depending on the image width because dpiscale is a double not an int.
            </summary>
            <param name="logicalBitmapStrip">The image strip to scale from logical units to device units</param>
            <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Bitmap,System.Drawing.Size,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Extension method for System.Drawing.Bitmap that creates and returns a new bitmap strip scaled for the device units
            When displayed on the device, the scaled image strip will have same size as the original image strip would have when displayed at 96dpi.
            
            This should be used for converting imagelists bitmap strips instead of simply scaling the bitmap,
            because the resultant bitmap strip size may be different from just upscaling as bitmap
            N * Math.Round(width * dpiscale) != Math.Round(N * width * dpiscale)
            This may happen depending on the image width because dpiscale is a double not an int.
            </summary>
            <param name="logicalBitmapStrip">The image strip to scale from logical units to device units</param>
            <param name="logicalImageSize">The size in logical unit of each image in the strip</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the strip</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Drawing.Icon@,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the icon by scaling it to device units. 
            When displayed on the device, the scaled icon will have same size as the original icon would have when displayed at 96dpi.
            </summary>
            <param name="icon">The icon to scale from logical units to device units</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.CreateDeviceFromLogicalImage(System.Drawing.Icon,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Creates and returns a new icon scaled for the device units.
            When displayed on the device, the scaled icon will have same size as the original icon would have when displayed at 96dpi.
            </summary>
            <param name="logicalIcon">The icon to scale from logical units to device units</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Windows.Forms.ImageList@,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the imagelist by scaling it to device units.
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="imageList">The imagelist to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the imagelist</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.LogicalToDeviceUnits(System.Windows.Forms.ImageList@,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Converts (if necessary) the imagelist by scaling it to device units.
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="imageList">The imagelist to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the imagelist</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.CreateDeviceFromLogicalImage(System.Windows.Forms.ImageList,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Creates and returns a new imagelist scaled for the device units
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="logicalImageList">The imagelist to scale from logical units to device units</param>
            <param name="scalingMode">The scaling mode to use when scaling the images in the imagelist</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DpiHelper.CreateDeviceFromLogicalImage(System.Windows.Forms.ImageList,System.Drawing.Color,Microsoft.VisualStudio.PlatformUI.ImageScalingMode)">
            <summary>
            Creates and returns a new imagelist scaled for the device units
            When displayed on the device, the scaled imagelist will have same size as the original imagelist would have when displayed at 96dpi.
            </summary>
            <param name="logicalImageList">The imagelist to scale from logical units to device units</param>
            <param name="backgroundColor">A Color value to be used for the image background. When the interpolation mode is Bilinear or Bicubic, the image's margins are interpolated with the background.</param>
            <param name="scalingMode">The scaling mode to use when scaling the imagelist</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.PlatformUI.DpiPrescaleImageSourceConverter" -->
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.PlatformUI.DpiPrescaleThemedImageSourceConverter" -->
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.PlatformUI.DpiPrescaleThemedImageConverter" -->
        <member name="T:Microsoft.VisualStudio.PlatformUI.DragDropHelper">
            <summary>
            Helper class for hooking up Drag and Drop operations with a specific drop target
            If no drop target is specified, the shell's main window drop target will be used by default, 
            which allows handling file drop operations over the shell main's window
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Microsoft.VisualStudio.PlatformUI.DragDropHelper._dragDropInProgress" -->
        <member name="F:Microsoft.VisualStudio.PlatformUI.DragDropHelper._dropTarget">
            <summary>
            The drop target that will be used for delegating the drag and drop operations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.DragDropHelper._usingDefaultDropTarget">
            <summary>
            Whether a the default drop target (shell's main window drop target) is used for the drag and drop operation
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DragDropHelper.ConvertToOleDataObject(System.Windows.IDataObject)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />
            given a <see cref="T:System.Windows.IDataObject" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.DragDropHelper.KnownStringFormats">
            <summary>
            The list of known string formats
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DragDropHelper.DataObjectHasString(System.Windows.IDataObject)">
            <summary>
            Checks if the data object contains one of the recognized strings data formats
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DragDropHelper.GetStringFromDataObject(System.Windows.IDataObject)">
            <summary>
            Try to extract a string from the given <see cref="T:System.Windows.IDataObject" />.
            Returns the string if the data object contains one of the recognized strings data formats, otherwise returns null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.EnumerableWindowFrames">
            <summary>
            IEnumerable wrapper for IEnumWindowFrames
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.EnvironmentRenderCapabilities">
            <summary>
            Encapsulates visual effects options for the environment. These options
            determine which types of visual effects should be used based on the
            current rendering capabilities.  This is based on a combination of
            user settings and WPF's RenderCapabilities.Tier
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.EnvironmentRenderCapabilities.Current">
            <summary>
            Gets the current singleton instance of EnvironmentRenderCapabilities.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.EnvironmentRenderCapabilities.#ctor">
            <summary>
            Private constructor, initialize the allewed effects and subscribes to shell property changes
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.EnvironmentRenderCapabilities.VisualEffectsAllowed">
            <summary>
            Determines the set of rendering effects allowed.
            Currently, this value is either zero (indicating that
            no visual effects are allowed) or nonzero (indicating
            that all visual effects are allowed).  The meaning of
            specific flags may change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.EnvironmentRenderCapabilities.AreGradientsAllowed">
            <summary>
            Determines if gradients are currently allowed in the environment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.EnvironmentRenderCapabilities.AreAnimationsAllowed">
            <summary>
            Determines if animations are currently allowed in the environment.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.FailIfEmptyAccessKeyRemovingConverter">
            <summary>
            A string-to-string value converter that will return one of two values:
            
                1.  The input string (minus accelerators), if it is non-null and not empty.
                2.  DependencyProperty.UnsetValue, if the input string is null or empty.
                
            Returning DependencyProperty.UnsetValue will cause PriorityBinding to consider
            a binding to which this converter is applied a failure, so it will continue
            searching for a matching binding.
            
            Deriving this class from ValueConverter would eliminate the input type validation,
            but the virtual overload of ValueConverter.Convert strongly types its return value.
            This converter's Convert method needs to be able to return either a string or an
            object.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.FileNameToImageMonikerConverter">
            <summary>
            Converter that gets an ImageMoniker for a given file type
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.FocusHelper.FocusTargetProperty">
            <summary>
            Gets or sets a focus target for an element.  The focus target is automatically focused whenever the DependencyObject
            the target is attached to receives direct keyboard focus.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.FocusHelper.EnableActivationSynchronizationProperty">
            <summary>
            A dependency property that allows you to get or set a value indicating whether the specified
            control wants to participate in focus restoration during window activation.
            </summary>
            <remarks>
            This property was introduced for controls like the Global Search, which experience 'focus rejection',
            or undesired focus restoration, leading to the popup appearing, when a top level window is activated.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.FocusHelper.AllowModalMoveFocusProperty">
            <summary>
            A depedency property that allows elements to skip the modal check during MoveFocusInto calls.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.FocusHelper.GetFocusTarget(System.Windows.UIElement)">
            <summary>
            Gets the focus target for an element.  The focus target is automatically focused whenever the DependencyObject
            the target is attached to receives direct keyboard focus.
            </summary>
            <param name="element">The element which should have a focus target attached to it.</param>
            <returns>The current focus target for the element.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.FocusHelper.SetFocusTarget(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Sets the focus target for an element.  The focus target is automatically focused whenever the DependencyObject
            the target is attached to receives direct keyboard focus.
            </summary>
            <param name="element">The element which should have a focus target attached to it.</param>
            <param name="value">The new focus target for the element.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.FocusHelper.GetEnableActivationSynchronization(System.Windows.UIElement)">
            <summary>
            Gets a value indicating whether the specified control wants to participate in focus
            restoration when it has focus during window activation.
            </summary>
            <param name="element">The control to check.</param>
            <returns><c>true</c> if the control wants to participate in focus restoration on activation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.FocusHelper.SetEnableActivationSynchronization(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets a value indicating whether the specified control wants to participate in focus
            restoration when it has focus during window activation.
            </summary>
            <param name="element">The control to configure.</param>
            <param name="value"><c> if the control wants to partipate in focus restoration on activation.</c></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.FocusHelper.GetAllowModalMoveFocus(System.Windows.UIElement)">
            <summary>
            Gets a value indicating whether the specified control wants to skip the modal check
            during MoveFocusInto calls.
            </summary>
            <param name="element">The control to check.</param>
            <returns>True if the control wants to skip the modal check.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.FocusHelper.SetAllowModalMoveFocus(System.Windows.UIElement,System.Boolean)">
            <summary>
            Sets a value indicating whether the specified control wants to skip the modal check
            during MoveFocusInto calls.
            </summary>
            <param name="element">The control to configure.</param>
            <param name="value">True if the control wants to skip the modal check.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.FocusHelper.FocusPossiblyUnloadedElement(System.Windows.FrameworkElement)">
            <summary>
            Either sends focus to the FrameworkElement immediately using Focus, or
            delays focusing the FrameworkElement until it is loaded.  The last element
            pending focus on Loaded will be focused, and all previous FrameworkElements
            will not be focused.
            </summary>
            <param name="element">The element to focus.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.FocusHelper.MoveFocusInto(System.Windows.UIElement)">
             <summary>
             Uses the UIElement.MoveFocus method to try to move WPF focus
             to the first valid focusable element inside the given UIElement,
             after first ensuring that WPF will not attempt to change focus
             because of a cross-HwndSource focus change.
            
             If UIElement.MoveFocus fails to move focus into the element, focus will
             be cleared by invoking Keyboard.ClearFocus to clear WPF focus, and by
             using SetFocus to focus the HWND of HwndSource containing the element.
             </summary>
             <param name="element">The element to move focus into.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.FocusHelper.IsKeyboardFocusWithin(System.Windows.UIElement)">
            <summary>
            Determines if WPF or Win32 keyboard focus is within a UIElement.
            </summary>
            <param name="element">The element to check.</param>
            <returns>True if WPF or Win32 keyboard focus is within the element, otherwise false.
            In the case of split WPF/Win32 focus, </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.FocusHelper.IsKeyboardFocusWithin(System.IntPtr)">
            <summary>
            Determines if Win32 keyboard focus is within an HWND.
            </summary>
            <param name="hwnd">The HWND which may have focus or contain focus.</param>
            <returns>True if the HWND contains focus or is focused, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.FocusHelper.IsChildOrSame(System.IntPtr,System.IntPtr)">
            <summary>
            Determines if an HWND is the same or a child window of a potential parent.
            </summary>
            <param name="hwndParent">The parent window.</param>
            <param name="hwndChild">The potential child window.</param>
            <returns>True if the windows are the same, or if hwndChild is a child of hwndParent.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.FontScaling">
            <summary>
            Class used to attach a pre-scaled font size to an element.  This is necessary
            if you want to apply a conversion (such as scaling) to the font size
            when the font size is coming from a dynamic resource, since {DynamicResource}
            does not allow for a converter to be applied to the value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HelperMethods.StripAccelerators(System.String)">
            <summary>
            <para>
            Strips non-escaped accelerator markers ('&amp;') from the given string
            using the same algorithm used by MsoPwchStripWtz (bugs and all), to wit:
            </para>
            <para>
            Strip odd '&amp;' chars from the string.  As per DrawText,
            consecutive pairs of '&amp;'s will leave a real '&amp;' character, and all
            odd '&amp;'s are removed even though only the last may be underlined.
            </para>
            <para>
            If an '&amp;' occurs inside of parens then the parens and the character following
            the '&amp;' are also stripped out. This is useful to remove accelarator strings of
            format (&amp;N) which are appended to label in some FE language versions.
            </para>
            <para>
            NOTE: We do not check for language to do this i.e. we assume that there isn't
            any realistic label in other languages with (&amp;N) stuck in.
            </para>
            </summary>
            <param name="input">String to strip.</param>
            <returns><paramref name="input" /> stripped of accelerators.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HelperMethods.StripAccelerators(System.String,System.Char)">
            <summary>
            <para>
            Strips non-escaped accelerator markers from the given string
            using the same algorithm used by MsoPwchStripWtz (bugs and all), to wit:
            </para>
            <para>
            Strip odd chars that match <paramref name="accessSpecifier" /> from the string. 
            As per DrawText, consecutive pairs of characters matching <paramref name="accessSpecifier" />
            will leave a single character matching <paramref name="accessSpecifier" />, and all odd 
            characters matching <paramref name="accessSpecifier" /> are removed even though only the last 
            may be underlined.
            </para>
            <para>
            If a character matching <paramref name="accessSpecifier" /> occurs inside of parens then the parens 
            and the character following the <paramref name="accessSpecifier" /> matching character are also 
            stripped out. This is useful to remove accelarator strings of format (%accessSpecifier%N) which 
            are appended to label in some FE language versions.
            </para>
            <para>
            NOTE: We do not check for language to do this i.e. we assume that there isn't
            any realistic label in other languages with (%accessSpecifier%N) stuck in.
            </para>
            </summary>
            <param name="input">String to strip.</param>
            <param name="accessSpecifier">Specifies the character to treat as an access key specifier.</param>
            <returns><paramref name="input" /> stripped of accelerators.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HelperMethods.StripAccelerators(System.String,System.Object)">
            <summary>
            Returns the input string with the specified access key specifier stripped
            </summary>
            <param name="input">String to strip of access key specifiers</param>
            <param name="accessKeySpecifier">Character to strip</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HelperMethods.AccessKeySpecifierFromObject(System.Object)">
            <summary>
            Converts the input object into an access key specifier.  Objects
            of type char or single-character strings can be converted.  If an
            object of a different type is passed in, &amp; is returned.
            </summary>
            <param name="accessKeySpecifier">Object to convert</param>
            <returns>Access key specifier from <paramref name="accessKeySpecifier" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HelperMethods.HandlePropertyChange``1(System.Windows.DependencyPropertyChangedEventArgs,System.Action{``0},System.Action{``0})">
            <summary>
            Handles a property change by executing the detach action on the old value and attach on the new value.
            </summary>
            <typeparam name="T">The type to cast the property value to.</typeparam>
            <param name="attach">The action to execute when to the new value.</param>
            <param name="detach">The action to execute when to the old value.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.HwndWrapper">
            <summary>
            Represents a disposable wrapper around an HWND which
            can construct the WNDCLASS and HWND, run the WndProc,
            and dispose of the WNDCLASS and HWND.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.HwndWrapper.WindowClassAtom">
            <summary>
            Gets or creates the class atom returned from CreateWindowClassCore.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HwndWrapper.CreateWindowClassCore">
            <summary>
            Creates the WNDCLASS atom to use for constructing this window's handle.
            </summary>
            <returns>The WNDCLASS atom used to create this window's handle.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HwndWrapper.DestroyWindowClassCore">
            <summary>
            Destroys the WNDCLASS atom created with CreateWindowClassCore.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HwndWrapper.RegisterClass(System.String)">
            <summary>
            Registers a Window class with the given name, and other options set to default values.
            </summary>
            <param name="className">The class name for the window.</param>
            <returns>The class atom of the registered window class.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HwndWrapper.CreateWindowCore">
            <summary>
            Creates the handle for the window.
            </summary>
            <returns>The handle for the window.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HwndWrapper.DestroyWindowCore">
            <summary>
            Destroys the window handle created by CreateWindowCore.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HwndWrapper.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Runs the WndProc for this window.
            </summary>
            <param name="hwnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.HwndWrapper.Handle">
            <summary>
            Gets or creates the handle for the window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HwndWrapper.EnsureHandle">
             <summary>
             Ensures that the handle for this window is created (creating the handle if it doesn't already exist).
            
             Note that EnsureHandle will fail to create the window's handle if creation is not allowed.
             In this case, the Handle is left uncreated for the current call.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.HwndWrapper.IsWindowSubclassed">
            <summary>
            Determines whether or not a per-instance window procedure should be created for each HWND.  By default,
            HwndWrapper uses the window class's default window procedure for the HWND.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.IfElseConverter">
            <summary>
            Converter from a boolean value to one of the two provided values of any type.
            Analogous to ternary ?: operator in C#.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.IfElseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a boolean value to either <see cref="P:Microsoft.VisualStudio.PlatformUI.IfElseConverter.TrueValue" /> or <see cref="P:Microsoft.VisualStudio.PlatformUI.IfElseConverter.FalseValue" />.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>
            Value of <see cref="P:Microsoft.VisualStudio.PlatformUI.IfElseConverter.TrueValue" /> for this converter if <paramref name="value" /> is true,
            or value of <see cref="P:Microsoft.VisualStudio.PlatformUI.IfElseConverter.FalseValue" /> otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ImageConverter">
            <summary>
            Converts an <see cref="T:System.Windows.Media.ImageSource" /> into an <see cref="T:System.Windows.Controls.Image" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ImageConverter.Convert(System.Windows.Media.ImageSource,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an <see cref="T:System.Windows.Media.ImageSource" /> into an <see cref="T:System.Windows.Controls.Image" />.
            </summary>
            <returns>An <see cref="T:System.Windows.Controls.Image" /> object representing the input image held in the <see cref="T:System.Windows.Media.ImageSource" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ImageListValueConverter">
            <summary>
            Converts the given image list and an index in it into ImageSource.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ImageSourceExtension">
            <summary>
            MarkupExtension which can create an ImageSource from a path string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.IsFirstLessThanOrEqualToSumOfRestConverter">
            <summary>
            A converter intended for checking whether the first value is LTE the sum 
            of the rest of the supplied values. Implements <see cref="T:System.Windows.Data.IMultiValueConverter" /> 
            to support summing an arbitrary number of values.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.LanguageHelper.CurrentUICultureLanguage">
            <summary>
            Get an XmlLanguage object representing the current UI culture.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.MinimizeProjectLanguageConverter">
            <summary>
            A converter intended to shorten the names of some of the programming languages
            supported by VS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.PendingFocusHelper.SetFocusOnLoad(System.Windows.FrameworkElement,System.Action{System.Windows.FrameworkElement})">
             <summary>
             Either sends focus to the FrameworkElement immediately using Focus, or
             delays focusing the FrameworkElement until it is loaded.  The last element
             pending focus on Loaded will be focused, and all previous FrameworkElements
             will not be focused.
            
             If UIElement.MoveFocus fails to move focus into the element, focus will
             be cleared by invoking Keyboard.ClearFocus to clear WPF focus, and by
             using SetFocus to focus the HWND of HwndSource containing the element.
             </summary>
             <param name="element">The element to focus.</param>
             <param name="focusAction">The method that will set the focus to the element.  
             If null, <see cref="M:Microsoft.VisualStudio.PlatformUI.FocusHelper.MoveFocusInto(System.Windows.UIElement)" /> will be used.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ProjectCountToVisibilityConverter">
            <summary>
            converts project count to a visibility state
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.Common.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.Error_CannotChangeDropTargetDuringDragAndDrop">
            <summary>
              Looks up a localized string similar to Cannot change the drop target while a drag and drop operation is in progress..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.Error_CannotCompleteDragAndDrop">
            <summary>
              Looks up a localized string similar to Cannot complete the drag and drop operation: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.Error_CannotCompleteRenameWhileAlreadyInRename">
            <summary>
              Looks up a localized string similar to Cannot complete a transaction that is already complete, or that is currently being completed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.Error_ConverterFunctionNotDefined">
            <summary>
              Looks up a localized string similar to {0} is not defined for this converter..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.Error_IntegerValueNotInRange">
            <summary>
              Looks up a localized string similar to Value must be an integer in the range [{0},{1}]..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.Error_InvalidImageIndex">
            <summary>
              Looks up a localized string similar to Image index is less than 0 or bigger than the number of images available in the list..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.Error_InvalidImagelist">
            <summary>
              Looks up a localized string similar to Members of the list are expected to be of type ImageSource..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.Error_InvalidStringForImageMoniker">
            <summary>
              Looks up a localized string similar to Could not convert "{0}" into an image moniker..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.Error_InvalidWin32State">
            <summary>
              Looks up a localized string similar to State must be one of SW_SHOWNORMAL, SW_SHOWMINIMIZED, or SW_SHOWMAXIMIZED..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.Error_InvalidWPFState">
            <summary>
              Looks up a localized string similar to State must be one of Normal, Minimized, or Maximized..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.Error_IVsImageService2NotAvailable">
            <summary>
              Looks up a localized string similar to The image service is not available..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.Error_TargetNotExtendingType">
            <summary>
              Looks up a localized string similar to Target type must extend {0}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Common.Resources.Error_ValueNotOfType">
            <summary>
              Looks up a localized string similar to Value must be of type {0}..
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.RssPubDateToLocalTimeConverter.Convert(System.String,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a string representing a <see cref="T:System.DateTime" /> to a string representing the same
            time in the local time zone.
            </summary>
            <param name="inputString">The original time string to convert.</param>
            <param name="parameter">The converter parameter (not used).</param>
            <param name="culture">The current UI culture.</param>
            <returns>A string representing the input time, converted into the local time zone.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SafeIUnknown">
            <summary>
            Resource management class intended to release native interfaces,
            such as those returned from Marshal.GetIUnknownForObject or
            Marshal.GetIDispatchForObject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SafeIUnknown.FromObject(System.Object)">
            <summary>
            Helper method to facilitate the common method for retrieving a native
            IUnknown:  Marshal.GetIUnknownForObject.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SafeIUnknown.ToObject">
            <summary>
            Helper method to facilitate retrieving an instance of the type that
            represents the COM object whose IUnknown this class contains.
            </summary>
            <returns>The wrapping object, or null if this object is invalid.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SafeIUnknown.ToObject``1">
            <summary>
            Helper method to facilitate retrieving an instance of the type that
            represents the COM object whose IUnknown this class contains.
            </summary>
            <typeparam name="T">The type to try-cast the COM object to</typeparam>
            <returns>The wrapping object try-cast as type T, or null if this object is invalid or does not cast to T.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SafeIUnknown.Value">
            <summary>
            The native interface managed by this class
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ScrollBarThemingUtilities">
            <summary>
            Class containing utility for theming scroll bars
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ScrollBarThemingUtilities._weakUnthemedScrollingElements">
            <summary>
            Elements whose ThemeScrollBars attached property is false, held weakly
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ScrollBarThemingUtilities.RepublishUnthemedScrollBarStyles">
            <summary>
            Republishes all of the default styles used for scrollbar theming in the application's
            resource dictionary using well-known keys so we can find them when the ThemeScrollBar
            property for an element is set to false to opt out of themed scrollbars.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ScrollBarThemingUtilities.RepublishApplicationResource(System.Object,System.Object)">
            <summary>
            Republishes the resource identified by <paramref name="existingKey" /> in the 
            application's resource dictionary using <paramref name="newKey" /> as the key value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ScrollBarThemingUtilities.ReapplyUnthemedScrollBarStyles">
            <summary>
            Updates the unthemed scrollbar styles for any elements that have opted out
            of themed scrollbars.  This is called as a result of a theme change.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ScrollBarThemingUtilities.UpdateScrollBarStyles(System.Windows.FrameworkElement)">
            <summary>
            Applies scrollbar styles to <paramref name="element" /> according to its ThemeScrollBars property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ScrollBarThemingUtilities.SetScrollBarStyles(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Adds the styles for scrollbar theming to an element's resource dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ScrollBarThemingUtilities.RemoveScrollBarStyles(System.Windows.FrameworkElement)">
            <summary>
            Removes the styles for scrollbar theming from an element's resource dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.StartPageCommands">
            <summary>
            Provides the routed commands for start page specific commands.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageCommands.LaunchUrlInDefaultBrowser">
            <summary>
            Launch url in an external default browser
            </summary>
            <remarks>
            The CommandParameter for this command is a Url to launch in an external browser.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageCommands.LaunchUrlFromDiscoverPanel">
            <summary>
            Launch url from discover panel in an external default browser
            </summary>
            <remarks>
            The CommandParameter for this command is a Url to launch in an external browser.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageCommands.LaunchUrlFromGettingStartedPanel">
            <summary>
            Launch url from getting started panel in an external default browser
            </summary>
            <remarks>
            The CommandParameter for this command is a Url to launch in an external browser.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageCommands.LaunchUrlFromWhatsNewPanel">
            <summary>
            Launch url from what new panel in an external default browser
            </summary>
            <remarks>
            The CommandParameter for this command is a Url to launch in an external browser.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageCommands.SwitchMainPanel">
            <summary>
            This command hides main panel 1 and shows main panel 2 of start page
            </summary>
            <remarks>
            This command has no parameters.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageCommands.RetryAnnouncementsFeedDownload">
            <summary>
            Allow user to retry rss feed download
            </summary>
            <remarks>
            There is no CommandParameter for this command.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageCommands.WhatCanIDoWithAzureSubscription">
            <summary>
            Launch url from azure invitation banner in an external default browser
            </summary>
            <remarks>
            The CommandParameter for this command is a Url to launch in an external browser.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageCommands.DismissAzureInvitationBanner">
            <summary>
            Dismiss Azure invitation banner
            </summary>
            <remarks>
            There is no CommandParameter for this command.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageCommands.ConnectToAzure">
            <summary>
            Connect to Azure
            </summary>
            <remarks>
            There is no CommandParameter for this command.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.StartPageHelper">
            <summary>
            Contains functionality shared by the start page package and public APIs for custom start pages.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageHelper.StartPagesDirectoryName">
            <summary>
            Name of user's Start Pages directory 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.StartPageHelper.DataSourceId">
            <summary>
            Start Page Data Source IDs
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageHelper.DataSourceId.StartPage">
            <summary>
            Main Start Page datasource
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.StartPageHelper.DataSourceId.RssFeed">
            <summary>
            RSS feed datasource
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.StartPageHelper.GetCustomStartPageFullyQualifiedFilename(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
            <summary>
            This returns the fully-qualified filename of the currently-used Start Page XAML file
            when customization is enabled.  Note that this could be under the user StartPages folder in
            My Documents, or it could be under a different folder via an installed extension.
            </summary>
            <param name="startPageDataSource">active Start Page Data Source</param>
            <returns>Fully-qualified filename of the current Start Page XAML file</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.StartPageHelper.GetUserStartPagesFolder">
            <summary>
            Path under My Documents that contains loose StartPage XAML and related files
            </summary>
            <returns>My Documents Start Pages directory</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.StartPageHelper.StartPageFilename(System.String)">
            <summary>
            Pull off the last segment for the filename
            </summary>
            <param name="startPageUri">Start Page Uri</param>
            <returns>Filename portion of Uri</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.StringToImageMonikerConverter">
            <summary>
            Converter used to convert from a string to an ImageMoniker.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.StringToImageMonikerConverter.Convert(System.String,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a string to an ImageMoniker. <paramref name="value" /> can be of
            the form "{guid};id" or the name of a well-known moniker (e.g. "KnownMonikers.FolderClosed")
            </summary>
            <param name="value">string representing an ImageMoniker.</param>
            <param name="parameter">Unused.</param>
            <param name="culture">Unused.</param>
            <returns>ImageMoniker represented by the string <paramref name="value" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.StyleKey`1">
            <summary>
            Simple derivation of <see cref="T:System.Windows.ResourceKey" />, templated to allow the overridden
            Assembly property to return the correct assembly based on typeof(T).
            </summary>
            <typeparam name="T">The type with which this StyleKey is associated with.</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SumValuesConverter">
            <summary>
            A converter intended for summing up multiple numeric values. Implements 
            <see cref="T:System.Windows.Data.IMultiValueConverter" /> to support summing an arbitrary number
            of values.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ThemedDialogStyleLoader">
            <summary>
            Contains an attached property for merging a resource dictionary containing default (keyless) styles for themed dialogs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ThemedDialogStyleLoader.UseDefaultThemedDialogStylesProperty">
            <summary>
            If set to true, merges a resource dictionary containing default (keyless) styles for themed dialogs.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ToBooleanValueConverter`1">
            <summary>
            Use instead of ValueConverter when the target type is a bool.
            Provides a small performance benefit by using boxed boolean literals.
            </summary>
            <typeparam name="TSource">Type to convert from</typeparam>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ToEnumConverter">
            <summary>
            Converts from an object to the matching target enum value.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.VisibleIfNotEmptyConverter.Convert(System.Collections.IList,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns <see cref="F:System.Windows.Visibility.Collapsed" /> if <paramref name="list" /> is null or empty. 
            Returns <see cref="F:System.Windows.Visibility.Visible" /> otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ThemeChangedEventArgs">
            <summary>
            Arguments for the VSColorTheme.ThemeChanged event fired when VS colors change
            as result of a system color change, VS theme change, or OS theme change
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.ThemeChangedEventArgs.Message">
            <summary>
            The message that initiated the theme color change
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ThemeChangedEventHandler">
            <summary>
            Event handler for color changes
            </summary>
            <param name="e">Arguments for the color change event</param>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.VSColorTheme">
            <summary>
            Helper to get Colors from the current VS theme and provide notifications when the theme/colors change.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.PlatformUI.VSColorTheme.ThemeChanged">
            <summary>
            Event that is raised when VS color change.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.VSColorTheme.VSColorThemeEventsSubscriber">
            <summary>
            Singleton class for intercepting shell events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.VSColorTheme.VSColorThemeEventsSubscriber.#ctor">
            <summary>
            Private constructor, ensures that Instance is the only way the singleton color helper can be created.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.VSColorTheme.VSColorThemeEventsSubscriber._instance">
            <summary>
            Singleton instance of the color helper
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.VSColorTheme.ThemeChangedCallback(Microsoft.VisualStudio.PlatformUI.ThemeChangedEventArgs)">
            <summary>
            Callback function called from VSColorThemeEventSubscriber when the theme changes.
            Clears out color cache and notifies subscribers of the change
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.VSColorTheme.GetThemedColor(Microsoft.VisualStudio.Shell.ThemeResourceKey)">
            <summary>
            Gets a VS color value from the current theme.
            This function offers similar functionality to VsColors.GetThemedGDIColor, but caches the returned color value 
            until the theme is changed for subsequent retrieval of the color with same themeResourceKey.
            </summary>
            <param name="themeResourceKey">The identifier of the color to retrieve</param>
            <returns>The color value</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.VsExtensionMethods">
            <summary>
            Extension methods for VS types.  Extensions to non-VS types should be placed in
            env\shell\Utilities\ExtensionMethods.cs.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.VsExtensionMethods.ToPOINTL(System.Windows.Point)">
            <summary>
            Converts a given <see cref="T:System.Windows.Point" /> object to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.POINTL" />. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.VsExtensionMethods.GetAssemblyLocation(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Returns the parent folder containing the assembly of the component being registered
            </summary>
            <param name="context">The context information from an external source of a registration attribute</param>
            <returns>The local folder or UNC location of the assembly of the component being registered</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.VsExtensionMethods.EscapeAssemblyRelativePath(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext,System.String)">
            <summary>
            Returns an escaped string representing the full path of the specified folder relative to the assembly of the component being registered
            </summary>
            <param name="context">The context information from an external source of a registration attribute</param>
            <param name="relativeFolder">The name of the folder relative to the registered assembly</param>
            <returns>The escaped path</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.AutoCompletePathTextBox">
            <summary>
            Interaction logic for AutoCompletePathTextBox.xaml.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompletePathTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.AutoCompletePathTextBox" /> class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.AutoCompletePathTextBox.FileSearchPatternProperty">
            <summary>
            Backing store for <see cref="P:Microsoft.VisualStudio.PlatformUI.AutoCompletePathTextBox.FileSearchPattern" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AutoCompletePathTextBox.FileSearchPattern">
            <summary>
            Gets or sets a collection containing file extention filters; When it is null (the default value) no file is listed on the auto completion popup.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompletePathTextBox.OnTextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Updates the completion source if the text does not match the current directory.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompletePathTextBox.OnPreviewTextInput(System.Object,System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Commits an item when the directory separator char is typed.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompletePathTextBox.OnItemCommited(System.Object,System.EventArgs)">
            <summary>
            Updates the completion source to the new path when an item is committed.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompletePathTextBox.EnsureTrailingDirectorySeparator(System.String@)">
            <summary>
            Adds traling directory separater character to <paramref name="path" /> if needed.
            </summary>
            <param name="path">Path to evaluate.</param>
            <returns>Value indicating whether the path was modified.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompletePathTextBox.UpdateCompletionSource(System.String)">
            <summary>
            Updates the completion source based on the given <paramref name="directory" />.
            </summary>
            <param name="directory">Directory to use for the completion source.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompletePathTextBox.GetPathCompletionList(System.String)">
            <summary>
            Populate the subdirs under current dir.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompletePathTextBox.IsUNCDirectory(System.String)">
            <summary>
            Helper to determine if the path is in UNC format.
            </summary>
            <param name="path">The path to be tested.</param>
            <returns>Return true if it is; return false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox">
            <summary>
            Interaction logic for AutoCompleteTextBox.xaml.
            </summary>
            <summary>
            AutoCompleteTextBox
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox" /> class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.AutoCompleteSourceProperty">
            <summary>
            Backing store for <see cref="P:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.AutoCompleteSource" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.AutoCompleteSource">
            <summary>
            Gets or sets the collection used for the auto complete source.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.ItemCommitted">
            <summary>
            Indicates that an item was committed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.OnAutoCompleteSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Callback to handle <see cref="P:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.AutoCompleteSource" /> binding.
            </summary>
            <param name="d">The <see cref="T:System.Windows.DependencyObject" /> on which the property has changed value.</param>
            <param name="e">Event data that is issued by any event that tracks changes to the effective value of this property.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.SetupAutoComplete">
            <summary>
            Setups the autocomplete elements.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.CopySource">
            <summary>
            Copy the completion source.
            </summary>
            <returns>Copy of the completion source.</returns>
            <remarks>
            This is needed so that dynamic filtering does not affect other places that could be using the same source.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.MaxItemsProperty">
            <summary>
            Backing store for <see cref="P:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.MaxItems" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.MaxItems">
            <summary>
            Gets or sets the maximum number of items to display.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.DisplayCompletionListOnEmptyProperty">
            <summary>
            Backing store for <see cref="P:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.DisplayCompletionListOnEmpty" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.DisplayCompletionListOnEmpty">
            <summary>
            Gets a value indicating whether to display the completion list when the textbox gets focus if the text is empty.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.filterPredicate">
            <summary>
            Backing store for <see cref="P:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.FilterPredicate" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.FilterPredicate">
            <summary>
            Gets or sets the filter predicate.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.DisplayCompletionList">
            <summary>
            Displays the completion list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.DismissCompletionList">
            <summary>
            Dismisses the completion list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.CommitItem">
            <summary>
            Commits the currently selected item.
            </summary>
            <returns>Value indicating whether the item was committed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutoCompleteTextBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.AutomatableTextBlock">
            <summary>
            Implements a TextBlock control visible to automation.
            WPF does not expose by default TextBlock to UIA because it's a very common used control.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.AutomatableTextBlock.AutomatableTextBlockAutomationPeer.IsControlElementCore">
            <summary>
            Indicates that the TextBlock element associated with the automation peer is
            understood by the end user as interactive and contributing to the logical 
            structure of the parent control in the UI. This exposes the control to UIA and 
            screen readers can read the element's text.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ContentLoadError">
            <summary>
            ContentLoadError control to display Start Page load errors
            </summary>
            <summary>
            ContentLoadError
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ContentLoadError.HeadingProperty">
            <summary>
            Error heading DependencyProperty
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ContentLoadError.TitleProperty">
            <summary>
            Error title DependencyProperty
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.ContentLoadError.DetailProperty">
            <summary>
            Error details DependencyProperty
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ContentLoadError.#ctor">
            <summary>
            Create a Content Load Error user control to display in the Start Page tool window
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.ContentLoadError.Title">
            <summary>
            Error title
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.ContentLoadError.Detail">
            <summary>
            Error details
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.ContentLoadError.Heading">
            <summary>
            Error heading
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.ContentLoadError.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.CurrentOrLastTaskConverter.Convert(Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection,Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress,Microsoft.VisualStudio.TaskStatusCenter.TaskProgressCollectionStatus,System.Object,System.Globalization.CultureInfo)">
            <summary>
            If the collection is running, <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.CurrentTask" /> is returned, otherwise
            the last element in the <see cref="P:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection.Tasks" /> collection is returned.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.DialogButton">
            <summary>
            Button class to be used for buttons displayed in Visual Studio WPF dialogs
            
            The style applied to this button defines common properties (min size, padding, margin)
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.DialogWindow">
            <summary>
            Dialog class to be used as base class for Visual Studio WPF dialogs (non-Gel)
            
            Someone implementing a WPF dialog should derive from this class (to have consistent styling with other VS dialogs, and help support)
            To display the dialog invoke the ShowModal() function, and that will take care of correctly parenting the dialog in the shell, 
            enabling modal state for the shell while the dialog is displayed, etc.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DialogWindow.#ctor">
            <summary>
            Initialize the dialog that does not have Help button
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DialogWindow.#ctor(System.String)">
            <summary>
            Initialize a dialog that has Help topic and buttons
            Use ShowModal() to display the dialog; it will get the parent window automatically from the shell
            </summary>
            <param name="helpTopic">The dialog's help topic</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.DialogWindow.ShowModal">
            <summary>
            Finds the parent/owner of the dialog from the Visual Studio shell and display the dialog
            Sets the shell in modal state while the dialog is shown, and centers correctly the dialog in the parent window.
            
            Note: If the dialog is parented to a WPF window, ShowDialog() can also be used to display it,
            but before doing so one will have to initialize correctly the dialog Owner and WindowStartupLocation.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.DialogWindowBase">
            <summary>
            Base class for WPF dialogs in Visual Studio 10 and later.
            The class provides consistent styling and caption buttons with other dialogs in VisualStudio.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.DialogWindowBase.IsCloseButtonEnabled">
            <summary>
            Gets or sets a value indicating whether the close title bar button should be enabled.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.UserFeedback">
            <summary>
            User's feedback
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.FeedbackPanel">
            <summary>
            Interaction logic for FeedbackPanel.xaml
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.FeedbackPanel.#cctor">
            <summary>
            Before voting: [Question] [UpVoteButton] [DownVoteButton]
            Upvoted:       [Question] [UpVoteButton] [DownVoteButton] Tell us more.
            Downvoted:     [Question] [UpVoteButton] [DownVoteButton] Tell us more or opt-out.
            Opted Out:     Successfully opted out!
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.FeedbackPanel.OptOutText">
            <summary>
            The string for the opt out button when restart is not required for opting out.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.FeedbackPanel.OptOutWithRestartText">
            <summary>
            The string for the opt out button when restart is required for opting out.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.FeedbackPanel.Question">
            <summary>
            The question for the user
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.FeedbackPanel.UserFeedback">
            <summary>
            Whether or not the user has voted like
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.FeedbackPanel.UpvoteCommand">
            <summary>
            Command to execute when thumbs up button is clicked
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.FeedbackPanel.VoteParameter">
            <summary>
            The parameter for the UpvoteCommand and DownVoteCommand
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.FeedbackPanel.DownvoteCommand">
            <summary>
            Command to execute when thumbs down button is clicked
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.FeedbackPanel.OptOutCommand">
            <summary>
            Command to execute when user clicks on "opt-out".
            If null, "opt-out" link will not be visible
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.FeedbackPanel.TellUsMoreLikedCommand">
            <summary>
            Command to execute when people clicks on "tell us more" after they clicks thumbs up
            If null, "tell us more" link will not be visible after user clicks thumbs up
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.FeedbackPanel.TellUsMoreDislikedCommand">
            <summary>
            Command to execute when people clicks on "tell us more" after they clicks thumbs down
            If null, "tell us more" link will not be visible after user clicks thumbs down
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.FeedbackPanel.OptOutRequiresRestart">
            <summary>
            Whether opt-out requires restart or not.
            If true, "opt-out" will become "opt-out (restart required)" and after user clicks opt-out,
            "Successfully opted out!" will become "Successfully opted out! Restart to see the changes."
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.FeedbackPanel.OptedOut">
            <summary>
            Whether or not the user has opted out from the current experience.
            If true, the feedback panel will be replaced by "Successfully opted out!"
            or "Successfully opted out! Restart to see the changes." if OptOutRequiresRestart is also true
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel">
            <summary>
            This panel is very similar to a WrapPanel, but instead of wrapping when a boundry is reached, it wraps once it has enough space.
            For Orientation=Vertical, this means that it will use as many columns as it can, given enough children and width. For Orientation=Horizontal,
            it will use as many rows as it can, given enought children and height. You can also specify a maximum number of wrapping levels (columns for Vertical, 
            rows for Horizontal) with MaxWrappingLevels.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.Orientation">
            <summary>
            This property controls the direction that elements flow. If Vertical, elements flow from top to bottom. If Horizontal, 
            elements flow from left to right.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.MaxWrappingLevels">
            <summary>
            For Orientation=Horizontal, it is the maximum number of rows. For Orientation=Vertical, it is the maximum number of columns.
            If 1, this acts like a normal StackPanel. Value must be set to a value greater than zero.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.ActualWrappingLevelsPropertyKey">
            <summary>
            Using the DependencyPropertyKey allows this property to be readonly.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.ActualWrappingLevels">
            <summary>
            Readonly property that is the actual number of levels we are using, regardless of what MaxLevels is set to.
            For Orientation=Vertical, this corresponds to Columns, while for Orientation=Horizontal, this corresponds to Rows.
            If 1, this acts like a normal StackPanel. Value must be set to a value greater than zero.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.ValidateWrappingLevels(System.Object)">
            <summary>
            Used to ensure that the number of wrapping levels is never set to a value less than 1.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            This method calculates the amount of space this panel will request. For Orientation=Vertical, it
            will use as many columns as it has space and children for. For Orientation=Horizontal, it will use as many 
            rows as it has space and children for.
            </summary>
            <param name="availableSize">The maximum space that the parent is giving this panel.</param>
            <returns>The amount of space that this panel is requesting.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.MeasureNonNullChildren">
            <summary>
            Calls Measure() on all non-null children, using a bound of infinity.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.GetNonCollapsedChildrenSizes">
            <summary>
            Calls Measure on each non-null child, and returns the sizes of all non-collapsed children. Also calculates
            the width of the smallest child, stored in smallestChildAbstractWidth.
            </summary>
            <returns>List/<AbstractSize /> of all non-collapsed children.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.NonCollapsedChildren">
            <summary>
            Filters the children to only address non-null children that aren't collapsed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.ChildIsNonNullAndNonCollapsed(System.Windows.UIElement)">
            <summary>
            Tests whether a child is both non-null and not collapsed.
            </summary>
            <param name="child">Child to test.</param>
            <returns>True if the child is non-null and not collapsed. False otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.ConvertToAbstractSize(System.Windows.Size)">
            <summary>
            Converts the Size to an abstract size, using the natural orientation for the panel
            and the actual Orientation for the panel.
            </summary>
            <param name="realSize">Size to be converted to AbstractSize.</param>
            <returns>AbstractSize representation of realSize.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            This method arranges the children. For Orientation=Vertical, it uses as many columns as it can, until it reaches MaxWrappingLevels. For 
            Orientation=Horizontal, it uses the maximum number of rows possible. However, for both, their columns or rows respectively will
            never be more than MaxWrappingLevels.
            </summary>
            <param name="finalSize">The size given this panel.</param>
            <returns>The size used by this panel.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.CalculateCountPerWrappingLevel(System.Int32,System.Int32)">
            <summary>
            Calculates how many children are in each wrapping level.
            </summary>
            <param name="totalCount">The total number of children.</param>
            <param name="wrappingLevels">The number of wrapping levels.</param>
            <returns>The number of children for each wrapping level.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.Measurer">
            <summary>
            This class handles all the measuring logic for the GreedyWrapPanel. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.Measurer.CalculateTotalSizeAndUpdateActualWrappingLevels">
            <summary>
            This method calculates the total size of the panel. To optimize, we use an algorithm that also 
            updates the ActualWrappingLevels field as a side-effect of calculating the size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.Measurer.EstimateMaxWrappingLevels">
            <summary>
            Estimates what the MaxWrappingLevels should be, based on the minimum of MaxWrappingLevels, the number of children, 
            and the total width / the smallest child.
            </summary>
            <returns>The estimated maximum number of wrapping levels the panel will have.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.Measurer.CalculateWidthAndWrappingLevelCount(System.Int32)">
            <summary>
            For Orientation=Vertical, this calculates the requested width of the panel. For Orientation=Horizontal, it calculates the requested height
            of the panel. It also calculates the number of wrappingLevels this panel will have.
            </summary>
            <param name="estimatedMaxWrappingLevels">The maximum number of wrappingLevels allowed.</param>
            <returns>The calculated size.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.Measurer.GetSumOfWrappingLevelWidths(System.Int32,System.Double)">
            <summary>
            Given the number of wrapping levels, it calculates the combined width of all levels.
            </summary>
            <param name="wrappingLevels">The number of wrapping levels for which to calculate the width.</param>
            <param name="totalWidth">The total available size for the panel.</param>
            <returns>The total width of the panel, given the number of wrappingLevels and total available width of the panel.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.Measurer.CalculateHeight">
            <summary>
            Calculates the abstract height of the panel.
            </summary>
            <returns>The abstract height of the panel.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.Measurer.GetHeightForWrappingLevel(System.Int32,System.Int32)">
            <summary>
            Calculates how big the level will be, if we use childrenPerWrappingLevel number of children starting with start.
            </summary>
            <param name="start">Where to start measuring children from.</param>
            <param name="childrenPerWrappingLevel">How many children in the level.</param>
            <returns>The abstract height of the wrapping level.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.Measurer.SubList``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Returns a sublist that starts at start and is count elements long, unless you reach the 
            end of the list first.
            </summary>
            <typeparam name="T">Type of the elements in the list.</typeparam>
            <param name="list">The list for which to get a sublist.</param>
            <param name="start">The beginning of the sublist.</param>
            <param name="count">The number of elements in the sublist.</param>
            <returns>A sublist of list.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.Measurer.GetMaxWidthForWrappingLevel(System.Int32,System.Int32)">
            <summary>
            Calculates the abstract width for the wrapping level, which is equal to the width of the widest element.
            </summary>
            <param name="start">The start of the wrapping level.</param>
            <param name="childrenPerWrappingLevel">The number of children in the wrapping level.</param>
            <returns>The abstract width of the wrapping panel.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.Measurer.TotalSize">
            <summary>
            Calculated size of the panel.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.Measurer.ActualWrappingLevels">
            <summary>
            Calculated number of wrapping levels for the panel.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.ChildArranger">
            <summary>
            Class used by the Greedy Wrap Panel to handle the logic of how to arrange it's children.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.ChildArranger.GetPositionOfNextChild(Microsoft.VisualStudio.PlatformUI.AbstractSize)">
            <summary>
            Calculates the position of the next child in the panel.
            </summary>
            <param name="childSize">The size of the child to arrange.</param>
            <returns>The (x,y) value for the top-left corner of the child.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.ChildArranger.ShiftToNewWrappingLevel">
            <summary>
            When we reach the end of a wrapping level, this shifts our current location to the next 
            wrapping level (see GreedyWrapPanel for more on the concept of a "wrapping level").
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.ChildArranger.ShiftToBelowPreviousChild(System.Double)">
            <summary>
            Called after placing a child, we shift under that child, ready to place another child.
            </summary>
            <param name="previousChildHeight">The height of the previous child.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.GreedyWrapPanel.ChildArranger.TotalSize">
            <summary>
            Returns the size of the panel, based on what children have been passed to it in GetPositionOfNextChild.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.HyperlinkButton">
            <summary>
            This control exists only for providing automation/accessibility support for a Button that
            would like to expose itself as a Hyperlink
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HyperlinkButton.OnCreateAutomationPeer">
            <summary>
              Returns an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> that can be used
              by a Narrator
            </summary>
            <returns> Returns an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.HyperlinkButtonAutomationPeer">
            <summary>
             Inner private class that dervies from <see cref="T:Microsoft.VisualStudio.PlatformUI.HyperlinkButtonAutomationPeer" />
             to serve up an AutomationPeer for <see cref="T:Microsoft.VisualStudio.PlatformUI.HyperlinkButton" /> to be used by Screenreaders
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HyperlinkButtonAutomationPeer.#ctor(System.Windows.Controls.Button)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.HyperlinkButtonAutomationPeer" /> class.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Controls.Button" />.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.HyperlinkButtonAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns the control type exposed by consumers of this automation peer
            </summary>
            <returns>An automation control type of Hyperlink</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.InfoBarHostControl">
            <summary>
            Creates a control that can be used to host InfoBars.  The host control observes events on each
            InfoBar to remove closed info bars from its collection.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.InfoBarHostControl.#ctor">
            <summary>
            Initialize an InfoBar host. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.InfoBarHostControl.HostWindowIdentifier">
            <summary>
            Identifies the window that the infobar is hosted in.
            This is used only for telemetry purposes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.InfoBarHostControl.InfoBars">
            <summary>
            Gets a read-only list of InfoBar UI elements.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.InfoBarHostControl.AddInfoBar(Microsoft.VisualStudio.Shell.Interop.IVsUIElement)">
            <summary>
            Add an InfoBar UI element to this InfoBar host.
            </summary>
            <param name="uiElement">InfoBar UI element</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.InfoBarHostControl.RemoveInfoBar(Microsoft.VisualStudio.Shell.Interop.IVsUIElement)">
            <summary>
            Remove an InfoBar UI element from this InfoBar host. 
            </summary>
            <param name="uiElement">An InfoBar UI element</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.InfoBarHostControl.RestoreKeyboardFocus">
            <summary>
            We need to ensure the focus is restored when the InfoBarHostControl is a command-focus container. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.IResizable">
            <summary>
            Represents an element which can be resized and moved through deltas.
            This interface is used in conjunction with the WindowResizeGrip.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.IResizable.UpdateBounds(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Repositions the element with the given deltas.
            </summary>
            <param name="leftDelta">The change the left position.</param>
            <param name="topDelta">The change in the top position.</param>
            <param name="widthDelta">The change in the width.</param>
            <param name="heightDelta">The change in the height.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.IResizable.MinSize">
            <summary>
            Gets the minimum size of the resizable element, in logical coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.IResizable.MaxSize">
            <summary>
            Gets the maximum size of the resizable element, in logical coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.IResizable.CurrentScreenBounds">
            <summary>
            Gets the screen position of the resizable element, in device coordinates.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.IResizable.CurrentBounds">
            <summary>
            Gets the position of the resizable element, in logical coordinates.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedContentControl">
            <summary>
            A ContentControl which will layout synchronously if the content
            is changed and the LayoutSynchronizer is active.  This
            is used to ensure that critical codepaths which demand
            a measured and arranged element receive one when the
            content of the control changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedItemsControl">
            <summary>
            An ItemsControl which will layout synchronously if the items
            are changed and the LayoutSynchronizer is active.  This
            is used to ensure that critical codepaths which demand
            a measured and arranged element receive one when the
            items in the control changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedTabControl">
            <summary>
            A TabControl which will layout synchronously if the content
            is changed and the LayoutSynchronizer is active.  This
            is used to ensure that critical codepaths which demand
            a measured and arranged element receive one when the
            items or selected item of the control changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizedWindow">
            <summary>
            A Window which will layout synchronously if the content
            is changed and the LayoutSynchronizer is active.  This
            is used to ensure that critical codepaths which demand
            a measured and arranged element receive one when the
            content of the window changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizer">
            <summary>
            Class which helps ensure that layout
            happens synchronously based on data model changes.
            While inside a layout-synchroniziation scope,
            calling Update will ensure that the updated
            element will be laid out synchronously.  Participating
            controls should call LayoutSynchronizer.Update
            when their data model changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizer.BeginLayoutSynchronization">
            <summary>
            Enters a block during which calling Update
            will force synchronous layout
            </summary>
            <returns>An IDisposable that should be disposed
            when forced synchronous layout is no longer desired.
            Synchronous layout will end when the last IDisposable created from this
            method has been disposed.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizer.IsSynchronizing">
            <summary>
            Determines if any IDisposables created from
            BeginLayoutSynchronization still remain active.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizer.Update(System.Windows.Media.Visual)">
            <summary>
            Synchronously lays out the given element if synchronization
            is currently active.
            </summary>
            <param name="element">The element which may need to be laid out
            synchronously.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.LayoutSynchronizer.Synchronize">
            <summary>
            Upon disposal of the last-living LayoutSynchronizationScope,
            actually perform the synchronous layout.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.LiveTextBlock">
            <summary>
            A text block designed for supporting live region accessiblity text. The
            default live setting is Polite.
            </summary>
            <example>
            &lt;LiveTextBlock Text="Text to display and read" /&gt;
            </example>
            <example>
            &lt;LiveTextBlock Text="Text to display" LiveText="Text to read" /&gt;
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.LiveTextBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.PlatformUI.LiveTextBlock" /> class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.LiveTextBlock.IsFrequencyLimitedProperty">
            <summary>
            This custom property specifies that the <see cref="T:Microsoft.VisualStudio.PlatformUI.LiveTextBlock" /> should limit how
            frequently a LiveRegionChanged event is raised. This is useful for chatty
            <see cref="T:Microsoft.VisualStudio.PlatformUI.LiveTextBlock" />s, where raising too many change events triggers
            double/triple reads of the same text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.LiveTextBlock.IsFrequencyLimited">
            <summary>
            Gets or sets if the LiveRegionChanged events should be restricted with respect to how
            frequently they are sent when the LiveText changes. The default value is false, i.e. by
            default one LiveRegionChanged event will be raised for every LiveText change even if
            multiple LiveText changes occur per second. When this setting is enabled, the value of
            <see cref="P:Microsoft.VisualStudio.PlatformUI.LiveTextBlock.Frequency" /> controls how frequently the LiveRegionChanged event is raised.
            </summary>
            <remarks>
            This property is useful for LiveTextBlocks whose LiveText can change multiple times per
            second. Rapidly occurring LiveRegionChanged events can cause screen readers to read the
            same LiveText multiple times due to how automation events are handled in Windows.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.LiveTextBlock.FrequencyProperty">
            <summary>
            This custom property specifies how frequently (in # of reads/sec) a rate limited
            LiveRegionChanged event is raised. This is useful for chatty
            <see cref="T:Microsoft.VisualStudio.PlatformUI.LiveTextBlock" />s, where raising too many change events triggers
            double/triple reads of the same text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.LiveTextBlock.Frequency">
            <summary>
            Gets or sets how frequently LiveRegionChanged events are raised in response to changes
            to the LiveText property. This value is only used if <see cref="P:Microsoft.VisualStudio.PlatformUI.LiveTextBlock.IsFrequencyLimited" />
            is set to true. The default value is 1, i.e. by default if frequency limiting is
            enabled, the LiveTextBlock will never announce the LiveText more than once per second.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.LiveTextBlock.LiveTextProperty">
            <summary>
            This custom property specifies the text the screen reader will actually
            read. Under the covers the LiveText property is bound to the Text property
            so nothing special needs to be done to make sure the screen reader can find
            the right text to read, but only the LiveText sends a notification that the
            live region value changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.MessageDialog">
            <summary>
            Interaction logic for MessageDialog.xaml
            </summary>
            <summary>
            MessageDialog
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MessageDialog.Show(System.String,System.String,Microsoft.VisualStudio.PlatformUI.MessageDialogCommandSet)">
            <summary>
            Shows a message box.
            </summary>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message of the dialog.</param>
            <param name="commandSet">A value indicating what commands are available in the dialog.</param>
            <returns>A value indicating the user response in the dialog.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MessageDialog.Show(System.String,System.String,Microsoft.VisualStudio.PlatformUI.MessageDialogCommandSet,System.String,System.Boolean@)">
            <summary>
            Shows a message box.
            </summary>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message of the dialog.</param>
            <param name="commandSet">A value indicating what commands are available in the dialog.</param>
            <param name="confirmationMessage">The message for an optional confirmation.</param>
            <param name="confirmationResponse">When this method returns, this parameter contains the state of the confirmation.  If the user checked the confirmation, this would
            be true, otherwise false.</param>
            <returns>A value indicating the user response in the dialog.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MessageDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.MessageDialogCommand">
            <summary>
            Specifies constants defining the responses of a MessageDialog.
            </summary>
            <remarks>These values are meant to conveniently map to the ID___ values defined in winuser.h.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.MessageDialogCommandSet">
            <summary>
            Specifies constants defining which commands are available on a MessageDialog.
            </summary>
            <remarks>These values are meant to conveniently map to the MD___ values defined in WinUser.h.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.MruListBox">
            <summary>
            MRU ListBox control to display project MRU items
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MruListBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.MruListBox.DoNothingCommand">
            <summary>
            Do nothing routed command
            We bind to this command handler when we need to eat a UI gesture (ex. LeftDoubleClick)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.MruListBox.OpenMruItem">
            <summary>
            OpenMruItem routed command (opens the currently selected item)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MruListBox.TryGetFocusedChild(System.Windows.Controls.ListBoxItem@)">
            <summary>
            Finds the ListBoxItem that currently has focus, if a ListBoxItem or one of it's children.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.MruListBox.OpenFolderMruItem">
            <summary>
            OpenFolderMruItem routed command (opens the currently selected item's folder)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.MruListBox.RemoveMruItem">
            <summary>
            RemoveMruItem routed command
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MruListBox.InvokeCommand(System.Object,System.String)">
            <summary>
            Invokes the given command on given object.
            </summary>
            <param name="item">The object to invoke the command on</param>
            <param name="command">Command to invoke</param>
            <returns>Boolean indicating whether the command was successfully invoked</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.MruListBox.DisableScrollOnRemoveProperty">
            <summary>
            When items are removed, it causes this object to get focused. If it's in a scrollviewer, this causes the scrollviewer to "jump"
            so that this is at the top of the scrollviewer. Setting this to true disables this behavior.
            </summary>
            <remarks>This property should be removed in Dev16 since the behavior mentioned does not reproduce in the MRU after the rewrite in Dev15.</remarks>
            IF THE DEFAULT VALUE IS EVER SET TO FALSE, THEN REMOVE THE SUBSCRIPTION TO REQUESTBRINGINTOVIEW IN THE CONSTRUCTOR
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.MruListBox.DisableScrollOnRemove">
            <summary>
            Convenience property for DisableScrollOnRemoveProperty.
            </summary>
            <remarks>This property should be removed in Dev16 since the behavior mentioned does not reproduce in the MRU after the rewrite in Dev15.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MruListBox.OnDisableScrollOnRemoveChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            When the value changes, we need to either subscribe to or unsubscribe from RequestBringIntoView, depending on the new value.
            </summary>
            <param name="d">MruListBox that this value is set on.</param>
            <param name="e">Property changed arguments.</param>
            <remarks>This method should be removed in Dev16 since the behavior mentioned does not reproduce in the MRU after the rewrite in Dev15.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MruListBox.OnRequestBringIntoView(System.Object,System.Windows.RequestBringIntoViewEventArgs)">
            <summary>
            Called when the this element or any of its children request to be brought into view.
            </summary>
            <param name="sender">The element that originally requested to be brought into view.</param>
            <param name="e">The arguments for the event.</param>
            <remarks>This handler should be removed in Dev16 since the behavior mentioned does not reproduce in the MRU after the rewrite in Dev15.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ProgressControl">
            <summary>
            Interaction logic for ProgressControl.xaml
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.BindableHyperlink">
            <summary>
            A version of a Hyperlink that supports data binding via its Content dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.BindableHyperlink.Content">
            <summary>
            Content dependency property
            </summary>
            <remarks>
            <para>
            The PropertyChangedCallback for Content performs a one-way binding with the
            Hyperlink's Inlines property.  Note that changes to Inlines not originating from
            this binding are not reflected in Content (i.e. if someone updates Hyperlink.Inlines
            directly, BindableHyperlink.Content will not be updated).  Furthermore, subsequent
            changes to Content will overwrite indirect changes to Inlines.
            </para>
            <para>
            Two-way binding can be added, but isn't required at this time.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.BindableRun">
            <summary>
            A version of a Run that supports data binding via its Content dependency property.
            Run itself doesn't support data binding directly because its Text property isn't
            a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.BindableRun.Content">
            <summary>
            Content dependency property
            </summary>
            <remarks>
            <para>
            The PropertyChangedCallback for Content performs a one-way binding with
            the Run's Text property.  Note that changes to Text not originating from
            this binding are not reflected in Content (i.e. if someone updates Run.Text
            directly, BindableRun.Content will not be updated).
            </para>
            <para>
            Two-way binding can be added, but isn't required at this time.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ScrollBarVisibilityExposingListBox">
            <summary>
            This class's only reason for existence is to expose the ComputedXxxScrollBarVisibility
            properties from the contained ScrollViewer, which is anonymous in the default ListBox style.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.ISearchControlPopupLocation">
            <summary>
            The interface implemented by navigation stops (locations) in the search control popup
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.Search.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Search.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Search.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Search.Resources.SearchClearTooltip">
            <summary>
              Looks up a localized string similar to Clear search.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Search.Resources.SearchStartTooltip">
            <summary>
              Looks up a localized string similar to Search.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Search.Resources.SearchStopTooltip">
            <summary>
              Looks up a localized string similar to Stop search.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Search.Resources.SearchTooltip">
            <summary>
              Looks up a localized string similar to Type words to search for.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.Search.Resources.SearchWatermark">
            <summary>
              Looks up a localized string similar to Search.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.PlatformUI.SearchControl" -->
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.FocusEnd">
            <summary>
            Focus the search text box but don't highlight all of the text, intead move the cursor to the end of the text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            When ths DataContext is set, hook into its property changed notification.
            The assumption is that the DataContext is the Gel datasource.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.OnDataSourcePropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles property changes from the Gel datasource
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.InitializeSearchPopupStatus">
            <summary>
            Initializes or updates the popup data based on the currently supported options/filters
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.InitializeSearchStatus">
            <summary>
            Initializes or updates the SearchStatus and the progress state based on the current status
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.TrimSearchString(System.String)">
            <summary>
            Returns a search string by trimming the spaces around the original text, if necessary (if the seach control's settings indicate searches should contain trimmed strings)
            </summary>
            <param name="originalText"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.AddToMRUItems(System.String)">
            <summary>
            Call the control's data source to add the specified search string to the MRU items list
            </summary>
            <param name="searchedText"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles key presses in the search edit box
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SearchControl.LastMRUPopulationText">
            <summary>
            The text used in the last MRU population call
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SearchControl.LastMRUPopulationRequestText">
            <summary>
            The text used last time to trigger a delayed MRU population
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.PopulateMRUItemsList(System.String,System.Boolean)">
            <summary>
            Call the search provider if necessary to (re)populate the MRU items list for the specified search prefix
            </summary>
            <param name="searchText"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SearchControl.AreMRUItemsAvailable">
            <summary>
            Returns whether the popup displays mru items
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SearchControl.AreOptionsOrFiltersAvailable">
            <summary>
            Returns whether the popup displays options or filters
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SearchControl.IsPopupEmpty">
            <summary>
            Returns whether the popup displays any useful information (mru items, filters or options)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SearchControl.IsTextInputInProgress">
            <summary>
            Globalization considerations:
            When IME is used to enter text, the edit box in the control receives TextChanged/SourceUpdated on every keystroke that modifies the text in the IME composition window (because the IME is inlined)
            This text can be partial ENU text, e.g. h, hu, hua, huan, huang until the IME candidates is displayed, or can be uncommitted characters (after pressing 1, 2, 3, etc for selection from candidates).
            We want to avoid starting searches on these partial strings, and wait for the user to press Space/Enter to commit the text (after each character or characters of interest).
            The sequence of events is TextInputStart, then one or more TextInputUpdate/SourceUpdated/TextChanged as the user types or choses candidates, or composes more characters, then TextInput to commit the IME composition.
            Therefore, we'll need to delay starting searches until TextInput is received.
            Also, note that we must still intercept and process SourceUpdated/TextChanged - if the user deletes text from the control (Del, Backspace), or modifies the text in the control using clipboard (Cut/Paste), etc
            the TextInputUpdate/TextInput are not sent because the composition window is not involved in these changes. We must process those text changes that happens outside of IME composition.
            On ENU, the IME is still involved, and every key press raises TextInputStart/SourceUpdated/TextChanged/TextInput (commits after every key press).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.SearchBox_TextInputStart(System.Object,System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Indicate start of IME composition
            We'll avoid processing regular TextChanged/SourceUpdated until the input is committed by the user and the TextInput event is received.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.SearchBox_TextInput(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Indicate commitment of IME composition window
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.SearchBox_SourceUpdated(System.Object,System.Windows.Data.DataTransferEventArgs)">
            <summary>
            Handles source updated events for the Text binding of the SearchBox
            Called when the user makes text changes in UI of the search string or when this.SearchBox.Text is changed programatically
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.OnSearchTextOrOptionsChanged">
            <summary>
            Stop the current search, start or schedule a new one, etc, when the text in the search box changes
            or when one of the search options or filters is changed
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.ClearCurrentNavigationLocation">
            <summary>
            Clears the current navigation location in the search control's popup
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SearchControl.InternalStatusChange">
            <summary>
            Tracks whether search status changes are initiated internally, by the search control (in response to user actions like clicking on the Search button)
            or externally, via the data source (e.g. by the search host when SearchAsync is called). In the later case we need to synchronize
            internal variables like LastSearchText or LastSearchCleared
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SearchControl.LastSearchText">
            <summary>
            The text used in the last started search
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SearchControl.LastSearchCleared">
            <summary>
            Whether the last search was translated instead to a ClearSearch
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.StopSearch(System.Boolean)">
            <summary>
            Stop the search and optionally close the popup
            </summary>
            <param name="fClosePopup">Whether to close the popup, too</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.StopSearch">
            <summary>
            Stop the search and close the popup
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.ClearSearch">
            <summary>
            Clear the the search now and set and empty string in the search box.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.ClearSearch(System.Boolean)">
            <summary>
            Clears the search (if not previously cleared) and optionally sets an empty text in the search field
            </summary>
            <param name="fClearSearchText">Whether the search text should be cleared as well</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.SetSearchBoxText(System.String)">
            <summary>
            Sets the SearchText in the data source and updates the UI
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.NotifyKeyPress(System.Windows.Input.Key,System.Windows.Input.KeyEventArgs)">
            <summary>
            Forward if necessary the key to the provider and returns whether it was handled
            Forward when the navigation is in progress or completed, and when the popup is not open
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.OnPopupControlKeyPress(System.Windows.Input.Key,System.Windows.Input.KeyEventArgs)">
            <summary>
            Navigate between the popup controls and perform actions
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.NotifyNavigationKeyPress(System.Windows.Input.Key)">
            <summary>
            Forward if necessary the key to the provider and returns whether it was handled
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.ShowProgressTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Handles delayed display of the progress bar (from the search start)
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.SearchButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles click on the search button
            </summary>
            <param name="sender">Routed event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.OnSearchButtonClicked">
            <summary>
            Handles click on the search button
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Handles receiving focus on the control or any element below this
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControl.TemporarilyDisableNavigationLocationChanges">
             <summary>
             Temporarily disable changes to current navigation location for this popup.
            
             When the popup is open, or when controls (mru items, etc) are added/removed from the popup, WPF's InputManager invalidates the hit test for the element under the mouse
             It doesn't do it synchronously because it can run into infinite loops (e.g. set with a trigger a control to hide when the mouse is over it - when it's hidden the mouse is no longer over it so it should be shown back, then all repeats)
             To avoid this, in InputManager.HitTestInvalidatedAsync a dispatcher operation at Input priority is scheduled, which calls Mouse.Synchronize, which sets IsMouseOver properties on control,
             which ultimately fires all MouseEnter/Move events. We want to avoid changing the current navigation location on those events, because the mouse position is not really changed by the user.
             But since they are asynchronous, we can't intercept them, so one thing we can do is to disable changing the location, then schedule a dispatcher operation of our own,
             which will be scheduled after WPF's operation, and then enable back location changes.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControlAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <summary>
            Blocking method that returns after the element has been expanded.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControlAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <summary>
            Blocking method that returns after the element has been collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SearchControlAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <summary>indicates an element's current Collapsed or Expanded state</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControlDataSource.OnNotifyNavigationKey(Microsoft.VisualStudio.VSConstants.VsSearchNavigationKeys,Microsoft.VisualStudio.VSConstants.VsUIAccelModifiers)">
            <summary>
            Allow the data source to intercept specific key presses for navigation between the results already found.
            </summary>
            <param name="navKey"></param>
            <param name="modifiers"></param>
            <returns>True if the key was processed, false if the search box should process it</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource">
            <summary>
            Data source class for the search settings used by the search control
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames">
            <summary>
            Property names for the search settings
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchUseMRU">
            <summary>
            The name of the property indicating whether the search control will display MRU items in the drop-down popup. VSUI_TYPE_BOOL. Default=True.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.PrefixFilterMRUItems">
            <summary>
            The name of the property indicating whether or not the search MRU list is filtered by prefix based on what's currently typed in the search box.  VSUI_TYPE_BOOL.  Default=True.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.MaximumMRUItems">
            <summary>
            The name of the property indicating the maximum number of MRU items to show in the popup. VSUI_TYPE_DWORD. Default=5.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchStartType">
            <summary>
            The name of the property indicating the search start type (instant/delayed/ondemand). VSUI_TYPE_DWORD(VSSEARCHSTARTTYPE). Default=SST_DELAYED.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchStartDelay">
            <summary>
            The name of the property indicating the delay in milliseconds after which a search starts automatically (for delayed search type). VSUI_TYPE_DWORD. Default=1000ms.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchStartMinChars">
            <summary>
            The name of the property indicating the minimum number of characters that have relevance for the window search. The window host will wait for the user to type at least the min number of characters before calling IVsWindowSearch to start a new search. VSUI_TYPE_DWORD. Default=1.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.RestartSearchIfUnchanged">
            <summary>
            The name of the property indicating whether the search will be restarted on pressing Enter or selecting MRU item from the list, even if the search string is not changed. VSUI_TYPE_BOOL. Default=False.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchTrimsWhitespaces">
            <summary>
            The name of the property indicating whether the search string has whitespaces trimmed from beginning and end before starting a search or adding the item to MRU list. VSUI_TYPE_BOOL. Default=True.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchProgressType">
            <summary>
            The name of the property indicating the progress type supported by the window search. VSUI_TYPE_DWORD(VSSEARCHPROGRESSTYPE). Default=SPT_INDETERMINATE.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchProgressShowDelay">
            <summary>
            The name of the property indicating the delay in milliseconds from the search start after which the progress indicator is displayed. This allows fast searches to complete without showing progress. VSUI_TYPE_DWORD. Default=200ms.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchPopupAutoDropdown">
            <summary>
            The name of the property indicating whether the search popup is automatically shown on typing (for delayed and on-demand searches only). VSUI_TYPE_BOOL. Default=True.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchPopupCloseDelay">
            <summary>
            The name of the property indicating the delay in milliseconds after a search is automatically started after which the search popup is automatically closed. VSUI_TYPE_DWORD. Default=4000ms.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchWatermark">
            <summary>
            The name of the property indicating the string displayed in the search box when it's empty and doesn't have the focus. VSUI_TYPE_STRING. Default="Search".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchWatermarkWhenFocused">
            <summary>
            The name of the property indicating the the search watermark remains even when the control is focused. VSUI_TYPE_BOOL. Default=False.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchTooltip">
            <summary>
            The name of the property indicating the tooltip for the search edit box. VSUI_TYPE_STRING. Default="Type words to search for".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchStartTooltip">
            <summary>
            The name of the property indicating the tooltip for the search button before starting the search. VSUI_TYPE_STRING. Default="Search".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchStopTooltip">
            <summary>
            The name of the property indicating the tooltip for the search button while the search is performed. VSUI_TYPE_STRING. Default="Stop search".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchClearTooltip">
            <summary>
            The name of the property indicating the tooltip for the search button after a search is complete. VSUI_TYPE_STRING. Default="Clear search".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.ControlMinWidth">
            <summary>
            The name of the property indicating the minimum width of the search control. VSUI_TYPE_DWORD. Default=100.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.ControlMaxWidth">
            <summary>
            The name of the property indicating the maximum width of the search control. VSUI_TYPE_DWORD. Default=400.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.ControlMinPopupWidth">
            <summary>
            The name of the property indicating the minimum width of the search control's popup. VSUI_TYPE_DWORD. Default=200.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.SearchButtonVisible">
            <summary>
            The name of the property indicating whether the search button is visible in the search control. VSUI_TYPE_BOOL. Default=True.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.ForwardEnterKeyOnSearchStart">
            <summary>
            The name of the property indicating whether the search control forwards the enter key event after search is started. VSUI_TYPE_BOOL. Default=False.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.UseDefaultThemeColors">
            <summary>
            The name of the property indicating whether the search control should only use the colors of the default theme. This is usually set to true when the search control is hosted in a dialog whose colors don't change when the IDE theme changes. VSUI_TYPE_BOOL. Default=False.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.DefaultTheme">
            <summary>
            The guid of the theme to use as default/fixed theme when UseDefaultThemeColors is set. This is usually necessary when the search control is hosted in a dialog whose colors don't change when the IDE theme changes. VSUI_TYPE_STRING. Default="{DE3DBBCD-F642-433C-8353-8F1DF4370ABA}" (KnownColorThemes.Light, which is closest to Windows dialog colors).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.ControlBorderThickness">
            <summary>
            The name of the property indicating the Thickness of the search control's border. VSUI_TYPE_STRING. Default="1".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.ControlPaddingThickness">
            <summary>
            The name of the property indicating the Thickness of the padding around the search box. VSUI_TYPE_STRING. Default="0".
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.HwndSourceBackgroundColor">
            <summary>
            The name of the property representing an ARGB background color for the HwndSource.  This setting is ignored if it is 0, or if the search control is parented under a WPF element. VSUI_TYPE_DWORD, Default=0.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchSettingsDataSource.PropertyNames.LiveSetting">
            <summary>
            The name of the property representing the live setting for the search control's live region. Values for this setting come from Microsoft.Internal.VisualStudio.PlatformUI.Automation.AutomationLiveSetting. VSUI_TYPE_DWORD, Default=1.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SearchControlPopup">
            <summary>
            The implementation of the popup used by the Common Search control
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchControlPopup.OnOpened(System.EventArgs)">
            <summary>
            Removes the WS_EX_TOPMOST style of the popup if necessary to make sure the popup opens behind IME candidates windows
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SearchFilterButton">
            <summary>
            The implementation of a button for search filters in Visual Studio Common Search Control
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SearchMRUListBox">
            <summary>
            The implementation of the MRU items list for the Visual Studio Common Search Control
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchMRUListBox.GetContainerForItemOverride">
            <summary>
            We ovverride this so we can say that our SearchMRUListBox object consists of SearchMRUListBoxItem objects.
            </summary>
            <returns>A default constructed <see cref="T:Microsoft.VisualStudio.PlatformUI.SearchMRUListBoxItem" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchMRUListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">Specified item</param>
            <returns>true if the item is its own ItemContainer, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SearchMRUListBoxItem">
            <summary>
            The implementation of an item in the MRU items list for the Visual Studio Common Search Control
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SearchOptionButton">
            <summary>
            The common implementation of attached events used for options buttons
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SearchBooleanOptionButton">
            <summary>
            The implementation of the CheckBox button for boolean search Options in Visual Studio Common Search Control
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SearchCommandOptionButton">
            <summary>
            The implementation of the button for commands search Options in Visual Studio Common Search Control
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.CurrentLocationSetMode">
            <summary>
            Indicate how the CurrentLocation in a search control's popup was last set
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService">
            <summary>
            Helper class providing navigation support and tracking of current location amongst the navigable child controls of a search control's popup
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.IsNavigableProperty">
            <summary>
            IsNavigable property can be set on popup child elements to indicate they are valid navigation stops.
            Setting it on a popup child element also registers the control to be automatically made the current navigation location when the control is hovered or clicked.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.IsCurrentLocationProperty">
            <summary>
            IsCurrentLocation property can be set on popup child elements to make that element the active location in the popup (sets CurrentLocation for the popup).
            Also, the IsCurrentLocation property on the previous active location (if any) will be automatically cleared.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.IsNavigationEnabledProperty">
            <summary>
            IsNavigationEnabled property can be set on a popup to enable or disable changes to the current location
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.CurrentLocationProperty">
            <summary>
            CurrentLocation property is set internally and tracks the current navigation location within a popup
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.GetCurrentLocation(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Returns the current navigation location in a search control's popup when the popup is open
            </summary>
            <param name="control">The search control</param>
            <returns>The current location or null if the popup is not open or the last navigated control doesn't exist anymore in the popup</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.CurrentLocationSetModeProperty">
            <summary>
            CurrentLocationSetMode property is set automatically to track how CurrentLocation was last changed (by keyboard/mouse)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.Register(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Start tracking the current location in the search control's popup
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.Unregister(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Stop tracking the current location in the search control's popup
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.ClearCurrentLocation(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Clears the current navigation location from the popup.
            </summary>
            <param name="searchControlPopup"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.OnNavigableControlMouseHander(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Mouse events handler
            Makes the element sending the mouse messages the current navigation location in the popup
            </summary>
            <param name="sender"></param>
            <param name="mouseEventArgs"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.GetNextNavigationStop(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Returns the next navigation stop in tree
            </summary>
            <param name="e">The navigation stop to use as start point in the search or null to return the first navigation stop in the tree</param>
            <param name="container">The root of the navigation tree</param>
            <returns>The next navigation stop</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.GetPreviousNavigationStop(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Returns the previous navigation stop in tree
            </summary>
            <param name="e">The navigation stop to use as start point or null to return last navigation stop in the tree</param>
            <param name="container">The root of the navigation tree</param>
            <returns>The previous navigation stop</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.NavigateNext(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Navigate to the next stop in the search control's popup (or the first stop if we never started navigation)
            When reaching the last navigation stop, cycle around to the first stop
            </summary>
            <param name="searchControlPopup"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.NavigateNext(System.Windows.Controls.Primitives.Popup,System.Int32)">
            <summary>
            Navigate to one of the next stops in the search control's popup (or the first stop if we never started navigation)
            When reaching the last navigation stop, cycle around to the first stop
            </summary>
            <param name="searchControlPopup"></param>
            <param name="stepCount">How many navigation steps we should navigate forward</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.NavigateFirst(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Navigate to the first stop in the search control's popup
            </summary>
            <param name="searchControlPopup"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.NavigatePrevious(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Navigate to the previous stop in the search control's popup (or the last stop if we never started navigation)
            When reaching the first navigation stop, cycle around to the last stop
            </summary>
            <param name="searchControlPopup"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.NavigatePrevious(System.Windows.Controls.Primitives.Popup,System.Int32)">
            <summary>
            Navigate to one of the previous stops in the search control's popup (or the last stop if we never started navigation)
            When reaching the first navigation stop, cycle around to the last stop
            </summary>
            <param name="searchControlPopup"></param>
            <param name="stepCount">How many navigation steps we should navigate backwards</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchPopupNavigationService.NavigateLast(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Navigate to the last stop in the search control's popup
            </summary>
            <param name="searchControlPopup"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SearchTextBox">
            <summary>
            The implementation of the editable part of Visual Studio Common Search Control
            The class implements selecting all the text in the control when the edit box is focused - see comments in OnGotKeyboardFocus for more details
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SearchTextBox.ChangeSelectionData">
            <summary>
            Helper class used to track a request to delayed select all text in the control
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchTextBox.ChangeSelectionData.TrySelectAll">
            <summary>
            Select all text in the search box if the selection hasn't changed since this class was constructed, 
            or if the selection is currently empty
            </summary>
            <returns>True if all text was selected</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SearchTextBox.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Handles receiving focus on the search box
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SmoothProgressBar">
            <summary>
            Progress bar class to be used for progress controls displayed in Visual Studio WPF dialogs
            In addition to control styling specific to VisualStudio, the progress uses a smooth animation 
            of the Value property if the TargetValue is set instead.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SmoothProgressBar.InitializeProgress">
            <summary>
            Initialize progress bar and sets the value to its minimum value
            Call this function before starting to increment TargetValue.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SmoothProgressBar.SetValueOverridingAnimation">
            <summary>
            Stops Value animation and set the Value to the TargetValue
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SmoothProgressBar.TargetValueProperty">
            <summary>
            Dependency property used to animate the Value property of the progress bar.
            Set TargetValue to a value and the progress value will be animated from the current value to the new value.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SmoothProgressBar.AnimationMaximumDurationProperty">
            <summary>
            Dependency property used to animate the Value property of the progress bar.
            The maximum time interval in milliseconds during which the progress is animated between the current Value and the TargetValue.
            Default = 1000ms
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SmoothProgressBar.OnTargetValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handler for TargetValue changes
            Update the animation of the Value property to account for smooth changes between the TargetValues increments
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SmoothProgressBar.ValueAnimation">
            <summary>
            Animation of the Value property between changes of the TargetValue property
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SmoothProgressBar.ProgressStoryboard">
            <summary>
            Storyboard for running the Value animation
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SmoothProgressBar.ProgressStartTime">
            <summary>
            The start time when the progress value was 0%
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SpacingStackPanel">
            <summary>
            A StackPanel that adds extra space between its items.  The spacing is contolled by the Spacing property.
            If Spacing is 0.0, this panel arranges items identically to a normal StackPanel.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SpacingStackPanel.Spacing">
            <summary>
            Gets or sets the spacing to use between each element in the panel.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel">
            <summary>
            A WrapPanel that adds extra space between its items.  The spacing is contolled by the HorizontalItemSpacing
            and VerticalItemSpacing properties.  If both HorizontalItemSpacing and VerticalItemSpacing are 0.0, this
            panel arranges items identically to a normal WrapPanel.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.NaturalOrientation">
            <summary>
            The "natural" orientation of the panel.  All layout code is written assuming the natural orientation
            and converted to the actual orientation using abstract geometric units (AbstractSize, AbstractPoint).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.HorizontalItemSpacingProperty">
            <summary>
            The horizontal spacing between items.  If the value is NaN (Auto), items are spaced evenly
            over the entire width of the panel.  For horizontally-oriented panels, the spacing is 
            applied between individual items in a row.  For vertically-oriented panels, the spacing is 
            applied between columns.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.VerticalItemSpacingProperty">
            <summary>
            The vertical spacing between items.  If the value is NaN (Auto), items are spaced evenly
            over the entire height of the panel.  For vertically-oriented panels, the spacing is 
            applied between individual items in a column.  For horizontally-oriented panels, the 
            spacing is applied between rows.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.ShouldStretchItemsToFillProperty">
            <summary>
            If this is set, the items on a row (or column if <see cref="T:System.Windows.Controls.Orientation" /> is vertical)
            will expand to occupy all extra space so there is no space to the right (or bottom) of
            the items.  The expansion is applied by adding an equal amount to each item.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures this panel
            </summary>
            <param name="constraint">The available space for the children</param>
            <returns>The desired size of the panel</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the children of this panel
            </summary>
            <param name="constraint">The available space for the children</param>
            <returns>The actual size used by the panel</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.ComputeItemSpacing(System.Int32,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Computes the spacing to be used between items within a larger space.
            </summary>
            <param name="itemCount">The number of items to be arranged within <paramref name="totalSpace" /></param>
            <param name="totalSpace">The total space to be used for arranging the items</param>
            <param name="occupiedSpace">The space occupied by the items themselves</param>
            <param name="nominalItemSpacing">
            The nominal space to be placed between items.  If this value is Double.NaN, the remaining space
            is allocated evenly between the items.
            </param>
            <param name="itemSpacing">The space to be used between each item</param>
            <param name="remainder">
            The space remaining after <paramref name="itemSpacing" /> has been applied <paramref name="itemCount" />
            times.  This will be zero unless <paramref name="nominalItemSpacing" /> is Double.NaN and
            UseLayoutRounding for the panel is false.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.NonCollapsedChildren">
            <summary>
            A collection of the panel's children that aren't collapsed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.MakeAbstractSize">
            <summary>
            Returns an AbstractSize using the panel's natural orientation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.MakeAbstractSize(System.Windows.Size)">
            <summary>
            Returns an AbstractSize using the panel's natural orientation, with an initial size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.MakeAbstractSize(System.Double,System.Double)">
            <summary>
            Returns an AbstractSize using the panel's natural orientation, with an initial width and height.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.MakeAbstractPoint">
            <summary>
            Returns an AbstractPoint using the panel's natural orientation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.RowInfo.ChildCount">
            <summary>
            The number of non-collapsed children in the row.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.RowInfo.ChildSizes">
            <summary>
            The abstract sizes of all the children in the row.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.RowInfo.AbstractSize">
            <summary>
            The sum of the child widths in the row, including inter-child spacing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SpacingWrapPanel.RowInfo.AddChild(Microsoft.VisualStudio.PlatformUI.AbstractSize)">
            <summary>
            Adds <paramref name="childSize" /> to the row if the resulting width is not 
            greater than the maximum width of the row.  A row can always accommodate at 
            least one child, regardless of that child's width.
            </summary>
            <param name="childSize">The abstract size of the child to add</param>
            <returns>
            True if the child size was added, false if the resulting width would exceed
            the maximum width of the row.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterGrip">
            <summary>
            Splitter used in between SplitterItems in a SplitterPanel.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterGrip.OnCreateAutomationPeer">
            <summary>
            Since this control can be only used with a mouse and cannot be reached via keyboard,
            prevent accessibility tools from interacting with this control. Setting the
            AutomationPeer to null prevents navigating to control using CapsLock + Left\Right.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterItem">
            <summary>
            Container item for a SplitterItemsControl.  See SplitterItemsControl for more information.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterItemsControl">
            <summary>
            An ItemsControl that has an Orientation and which is meant to be used in conjunction with
            a SplitterPanel.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterItemsControl.OnOrientationChanged">
            <summary>
            Called when the Orientation property changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterLength">
            <summary>
            Length unit similar to GridLength.  Lengths of type Stretch
            use a desired amount of space (in device units) equal to their
            Value, but stretch to fit the parent control if there are
            no Fill elements.  Fill elements use space remaining after
            Stretch elements are allocated space, maintaining ratios
            of values between elements.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData">
            <summary>
            Class which stores data used during measuring of items in a SplitterPanel.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData.#ctor(System.Windows.UIElement)">
            <summary>
            Constructs a new SplitterMeasureData from a UIElement.
            </summary>
            <param name="element">The element being measured.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData.FromElements(System.Collections.IList)">
            <summary>
            Constructs a new sequence of SplitterMeasureData instances from a
            sequence of UIElements.
            </summary>
            <param name="elements">The sequence of UIElements.</param>
            <returns>A sequence of SplitterMeasureData instances based
            on the sequence of UIElements.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData.Element">
            <summary>
            Gets the UIElement being measured.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData.AttachedLength">
            <summary>
            Gets or sets the SplitterLength associated with the UIElement.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData.IsMinimumReached">
            <summary>
            Gets or sets whether or not the element reached its minimum
            size during Measure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData.IsMaximumReached">
            <summary>
            Gets or sets whether or not the element reached its maximum
            size during Measure.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SplitterMeasureData.MeasuredBounds">
            <summary>
            Gets or sets the bounds the element was assigned, relative
            to the panel it is contained in.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterPanel">
             <summary>
             Represents an oriented panel of items that are stacked, but sized to fit on the screen.
             </summary>
             <remarks>
             This panel has layout similar to a grid.  Each child UIElement has an attached SplitterLength, which is either
             a "Stretch" or "Fill" value.  To understand the layout, it's best to consider two examples (plain numbers
             indicate a Stretch length, * numbers indicate Fill)
            
             1. Consider that there are 3 elements with SplitterLengths of [100|*|200] with horizontal orientation, and that the panel is 500x100 in size.
                We calculate that the stretch items require 300 units of space, and that there is 1 star item requiring 1 filled unit of space.  Since there
                are 300 units of leftover space, the fill item is given that width.  The stretch items are given their desired stretch length.
             2. Consider that there are 2 elements with SplitterLengths of [100|150] with horizontal orientation, and that the panel is 500x100 in size.
                Since there are no fill elements, we stretch the items to take up the entire space, keeping the ratios of their sizes constant.  Thus,
                the items are arraged with widths of 200 and 300 to fill the 500 available units of space.
             3. Consider that there are 3 elements with SplitterLengths of [1000|*|1500] with horizontal orientation, and that the panel is 500x100 in size.
                Since the stretch items are too large to fit in the panel as is, the fill item is reduced to size 0.  Then, the stretch items are scaled
                as in (2), receiving 200 and 300 units respectively.
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.UpdateIndices">
            <summary>
            This method updates the IndexProperty, IsFirstProperty, and IsLastProperty
            on all of the child UIElements in this collection.  These properties
            are used by the SplitterItem style to determine if the splitter should be shown
            or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.MeasureNonreal(System.Windows.Size,System.Windows.Controls.Orientation,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.PlatformUI.SplitterMeasureData},System.Boolean)">
            <summary>
            When there is an infinite size available in the stacking direction, there are no need for constraints
            and we can just measure the elements with the given size.
            </summary>
            <param name="availableSize">The size available to the control.</param>
            <param name="orientation">The control's orientation.</param>
            <param name="uiElements">The enumeration of child UIElements to measure and arrange.</param>
            <param name="remeasureElements">True to actually remeasure the child elements and attach
            the new layout information to them.  To perform a non-invasive preview of the layout, pass false.</param>
            <returns>The calculated size required for this control.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.Measure(System.Windows.Size,System.Windows.Controls.Orientation,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.PlatformUI.SplitterMeasureData},System.Boolean)">
            <summary>
            This method is used to measure and arrange a set of child elements.  This method is used
            both for the normal Measure/Arrange pass, and also to determine where an item would
            show up if it were added to this panel.  This is used for docking previews.
            </summary>
            <param name="availableSize">The size available to the control.</param>
            <param name="orientation">The control's orientation.</param>
            <param name="measureData">The enumeration of child UIElements to measure and arrange.</param>
            <param name="remeasureElements">True to actually remeasure the child elements and attach
            the new layout information to them.  To perform a non-invasive preview of the layout, pass false.</param>
            <returns>The calculated size required for this control.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the elements based on attached arrangement information
            calculated in Measure.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.OnSplitterDragStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Handles the resize of splitters for this panel.  This could
            show the preview resize window for this panel, if ShowResizePreview
            is true.
            </summary>
            <param name="sender">The sender, which may or may not be a SplitterGrip.</param>
            <param name="args">The event args.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.OnSplitterDragCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            Commits the resize for a splitter if a drag operation was successful.
            </summary>
            <param name="sender">The sender, which should be a SplitterGrip.</param>
            <param name="args">The event args.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.OnSplitterResized(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Handles the resize of splitters for this panel.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.CommitResize(Microsoft.VisualStudio.PlatformUI.SplitterGrip,System.Double,System.Double)">
            <summary>
            Resizes two child items based on a drag delta from a SplitterGrip.
            </summary>
            <param name="grip">The grip currently being resized.</param>
            <param name="horizontalChange">The horizontal change in the grip, in logical coordinates.</param>
            <param name="verticalChange">The vertical change in the grip, in logical coordinates.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.TrackResizePreview(Microsoft.VisualStudio.PlatformUI.SplitterGrip,System.Double,System.Double)">
            <summary>
            Moves the already-shown SplitterResizePreviewWindow based on a drag delta from a SplitterGrip.
            </summary>
            <param name="grip">The grip currently being resized.</param>
            <param name="horizontalChange">The horizontal change in the grip.</param>
            <param name="verticalChange">The vertical change in the grip.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.GetResizeIndices(Microsoft.VisualStudio.PlatformUI.SplitterGrip,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Determines the indices of the SplitterItem containing a SplitterGrip, and based
            on the GridResizeBehavior of the SplitterGrip the indices of the two items
            that should be resized.
            </summary>
            <param name="grip">The SplitterGrip to determine the indices for.</param>
            <param name="gripIndex">The index of the item in InternalChildren which contains <paramref name="grip" />.</param>
            <param name="resizeIndex1">The index of the first item in InternalChildren
            which should be resized.  This should be the left or top item.</param>
            <param name="resizeIndex2">The index of the second item in InternalChildren
            which should be resized.  This should be the right or bottom item.</param>
            <returns>True if the indices were successfully retrieved, otherwise false.
            The search was successful if the grip was found, and if the indices that should
            be resized are in bounds.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.ResizeChildren(System.Int32,System.Int32,System.Double)">
            <summary>
            Resizes two elements using a pixel difference.
            </summary>
            <param name="index1">The index of the first item to resize.</param>
            <param name="index2">The index of the second item to resize.</param>
            <param name="pixelAmount">The delta (in pixels) between the items.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterPanel.ResizeChildrenCore(Microsoft.VisualStudio.PlatformUI.SplitterMeasureData,Microsoft.VisualStudio.PlatformUI.SplitterMeasureData,System.Double)">
            <summary>
            Resizes two elements using a pixel difference.
            </summary>
            <param name="child1">The measure data for the first item being resized.</param>
            <param name="child2">The measure data for the first item being resized.</param>
            <param name="pixelAmount">The delta (in pixels) between the items.</param>
            <returns>True if the items moved, and false if there was no difference.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.SplitterResizePreviewWindow">
            <summary>
            Control used to show the resize preview for a SplitterPanel.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterResizePreviewWindow.Move(System.Double,System.Double)">
            <summary>
            Moves the SplitterResizePreviewWindow to the given device coordinates.
            </summary>
            <param name="deviceLeft">The new device left for the window.</param>
            <param name="deviceTop">The new device top for the window.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterResizePreviewWindow.Show(System.Windows.UIElement)">
            <summary>
            Shows the window on-screen with the same size
            and screen position as the given UIElement.
            </summary>
            <param name="parentElement">The element to show the preview
            window over.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterResizePreviewWindow.Hide">
            <summary>
            Hides the window, if it is currently shown.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SplitterResizePreviewWindow.EnsureWindow(System.IntPtr)">
            <summary>
            Constructs a HwndSource for this window, if one does not exist.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.StartPageRelativeExtension">
             <summary>
             A markup extension that enables custom start pages to use relative paths (where "relative" means
             relative to the XAML file rather than relative to VS) on any property expecting a Uri, ImageSource, or string.
            
             Usage:
             <Image Source="{vs:StartPageRelative foo.png}" />
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.StartPageRelativeExtension.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="relativePath">Relative path from Start Page XAML file location</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.StartPageRelativeExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Returns the object based on the relative path provided.
            </summary>
            <param name="serviceProvider">IServiceProvider</param>
            <returns>Object which may be ImageSource, URI or string</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl">
            <summary>
            An items control that can display progress for an <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgressCollection" />.
            The <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource" /> for the control should be a collection of
            <see cref="T:Microsoft.VisualStudio.TaskStatusCenter.IVsTaskProgress" /> instances.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.LastTask">
            <summary>
            Gets the last task in the collection's Tasks collection, or null if the collection is empty.
            </summary>
            <remarks>
            Ordinarily this would be defined as an attached property, to be attached
            to the last task.  The tasks are not <see cref="T:System.Windows.DependencyObject" />s, though,
            so a <see cref="T:System.Windows.DependencyProperty" /> cannot be attached to them.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.LastTaskProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty" /> for the <see cref="P:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.LastTask" /> property
            Default value:  null
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.ShowDiagnosticInfo">
            <summary>
            Gets or sets a value that controls whether the progress control displays
            diagnostic information for tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.ShowDiagnosticInfoProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty" /> for the <see cref="P:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.ShowDiagnosticInfo" /> property
            Default value:  false
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.UseDetailedView">
            <summary>
            Gets or sets a value that controls whether the progress control displays a
            "simple" or "detailed" view.  The simple view shows only one task at a time;
            the detailed view shows all of the tasks in the collection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.UseDetailedViewProperty">
            <summary>
            The <see cref="T:System.Windows.DependencyProperty" /> for the <see cref="P:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.UseDetailedView" /> property
            Default value:  false
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Event handler for the <see cref="E:System.Windows.FrameworkElement.Unloaded" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event handler for the <see cref="E:System.Windows.FrameworkElement.DataContextChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.UpdateLastTask">
            <summary>
            Updates the <see cref="P:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.LastTask" /> property based on the current contents of the
            collection's Tasks property
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.OnTasksChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Event handler for the collection's Tasks collection's OnCollectionChanged event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TaskProgressCollectionControl.OnCollectionPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Event handler for the collection's PropertyChanged event.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.TextInputDialog">
            <summary>
            Represents a text input dialog
            </summary>
            <summary>
            TextInputDialog
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TextInputDialog.#ctor(Microsoft.VisualStudio.PlatformUI.TextInputViewModel)">
            <summary>
            Initializes a new instance of TextInputDialog with a given view model.
            </summary>
            <param name="dataContext">The view model for the dialog.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TextInputDialog.Show(System.String,System.String,System.String,System.String@)">
            <summary>
            Shows a text input dialog.
            </summary>
            <param name="title">The title of the dialog.</param>
            <param name="prompt">The prompt text of the dialog.</param>
            <param name="defaultText">The default value of the dialog's input box.</param>
            <param name="text">When this method returns, this parameter contains the user's input text.  If the user cancelled the dialog
            this parameter is null.</param>
            <returns>True if the user submitted the text.  False if the user cancelled the dialog.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TextInputDialog.Show(System.String,System.String,System.String,System.Predicate{System.String},System.String@)">
            <summary>
            Shows a text input dialog.
            </summary>
            <param name="title">The title of the dialog.</param>
            <param name="prompt">The prompt text of the dialog.</param>
            <param name="defaultText">The default value of the dialog's input box.</param>
            <param name="validator">The predicate to evaluate whether the input should be accepted.</param>
            <param name="text">When this method returns, this parameter contains the user's input text.  If the user cancelled the dialog
            this parameter is null.</param>
            <returns>True if the user submitted the text.  False if the user cancelled the dialog.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TextInputDialog.Show(System.String,System.String,System.Int32,System.String,System.Predicate{System.String},System.String@)">
            <summary>
            Shows a text input dialog.
            </summary>
            <param name="title">The title of the dialog.</param>
            <param name="prompt">The prompt text of the dialog.</param>
            <param name="maxLength">The maximum length of dialog's input.</param>
            <param name="defaultText">The default value of the dialog's input box.</param>
            <param name="validator">The predicate to evaluate whether the input should be accepted.</param>
            <param name="text">When this method returns, this parameter contains the user's input text.  If the user cancelled the dialog
            this parameter is null.</param>
            <returns>True if the user submitted the text.  False if the user cancelled the dialog.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TextInputDialog.Show(Microsoft.VisualStudio.PlatformUI.TextInputViewModel,System.String@)">
            <summary>
            Shows a text input dialog.
            </summary>
            <param name="dataContext">The data context to use for the dialog.</param>
            <param name="text">When this method returns, this parameter contains the user's input text.  If the user cancelled the dialog
            this parameter is null.</param>
            <returns>True if the user submitted the text.  False if the user cancelled the dialog.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TextInputDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.#ctor">
            <summary>
            Instantiates a new instance of a SystemDropShadowChrome
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.ColorProperty">
            <summary>
            DependencyProperty for <see cref="P:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.Color" /> property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.Color">
            <summary>
            The Color property defines the Color used to fill the shadow region.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.CornerRadiusProperty">
            <summary>
            DependencyProperty for <see cref="P:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.CornerRadius" /> property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.CornerRadius">
            <summary>
            The CornerRadius property defines the CornerRadius of the object casting the shadow.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.SystemDropShadowChrome.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Render callback.  
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.MessageViewModel">
            <summary>
            View model for MessageDialog. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MessageViewModel.#ctor(System.String,System.String,Microsoft.VisualStudio.PlatformUI.MessageDialogCommandSet)">
            <summary>
            Initializes a new instance of the MessageViewModel class.
            </summary>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message to display.</param>
            <param name="commandSet">A value that determines what commands the dialog will display.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MessageViewModel.#ctor(System.String,System.String,Microsoft.VisualStudio.PlatformUI.MessageDialogCommandSet,System.String)">
            <summary>
            Initializes a new instance of the MessageViewModel class.
            </summary>
            <param name="title">The title of the dialog.</param>
            <param name="message">The message to display.</param>
            <param name="commandSet">A value that determines what commands the dialog will display.</param>
            <param name="confirmationMessage">An optional confirmation message to display.  If this is not null, a checkbox with this message will be displayed in the view.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.MessageViewModel.Title">
            <summary>
            Gets the title of the dialog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.MessageViewModel.Message">
            <summary>
            Gets the message of the dialog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.MessageViewModel.ConfirmationMessage">
            <summary>
            Gets the optional confirmation message of the dialog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.MessageViewModel.ConfirmationState">
            <summary>
            Gets or sets a value indicating whether the confirmation was checked by the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.MessageViewModel.Response">
            <summary>
            Gets the user response from the dialog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.MessageViewModel.CanCancel">
            <summary>
            Gets a value indicating whether the dialog allows the cancel action (e.g. pressing Esc to dismiss the dialog).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.MessageViewModel.Commands">
            <summary>
            Gets the set of commands available in the dialog.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.PlatformUI.MessageViewModel.RequestClose">
            <summary>
            An event that is raised to indicate that the view should be closed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MessageViewModel.CreateCommandsForSet(Microsoft.VisualStudio.PlatformUI.MessageDialogCommandSet,Microsoft.VisualStudio.PlatformUI.MessageDialogCommand@)">
            <summary>
            Creates the set of commands for the given MessageDialogCommandSet.
            </summary>
            <param name="commandSet">A value determining what commands to create.</param>
            <param name="unhandledResponse">The response value when the view is closed without executing any of the commands in the set (e.g. if the user clicks "X").</param>
            <returns>An enumerable over commands that should be shown in the dialog.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MessageViewModel.CreateCommand(Microsoft.VisualStudio.PlatformUI.MessageDialogCommand,System.Boolean,System.Boolean)">
            <summary>
            Creates a command for the specified value of MessageDialogCommand.
            </summary>
            <param name="command">The command to create.</param>
            <param name="isDefault">Indicates if this command is the default command in the set.</param>
            <param name="isCancel">Indicates if this command is the cancel command in the set.</param>
            <returns>A command representing the given value of MessageDialogCommand.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.MessageViewModel.OnCommandExecuted(Microsoft.VisualStudio.PlatformUI.MessageDialogCommand)">
            <summary>
            Handles the execution of any of the dialog commands.
            </summary>
            <param name="command">The value indicating which command the user executed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.MessageViewModel.DefaultCommand">
            <summary>
            Gets the default command of this view model, if any.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.MessageViewModel.CancelCommand">
            <summary>
            Gets the cancel command of this view model, if any.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.MessageViewModel.Command">
            <summary>
            A private implementation of DelegateCommand that has additional properties (such as name and default/cancel state) that
            the dialog cares about.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.TextInputViewModel">
            <summary>
            View model for TextInputDialog.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of TextInputViewModel.
            </summary>
            <param name="title">The title for the input dialog.</param>
            <param name="prompt">The prompt for the input dialog.</param>
            <param name="defaultText">The default value for the input dialog.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.#ctor(System.String,System.String,System.String,System.Predicate{System.String})">
            <summary>
            Initializes a new instance of TextInputViewModel.
            </summary>
            <param name="title">The title for the input dialog.</param>
            <param name="prompt">The prompt for the input dialog.</param>
            <param name="defaultText">The default value for the input dialog.</param>
            <param name="validator">The predicate to evaluate whether the input should be accepted.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.#ctor(System.String,System.String,System.Int32,System.String,System.Predicate{System.String})">
            <summary>
            Initializes a new instance of TextInputViewModel.
            </summary>
            <param name="title">The title for the input dialog.</param>
            <param name="prompt">The prompt for the input dialog.</param>
            <param name="maxLength">The maximum length of the input text.</param>
            <param name="defaultText">The default value for the input dialog.</param>
            <param name="validator">The predicate to evaluate whether the input should be accepted.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.Title">
            <summary>
            Gets the title of the dialog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.Prompt">
            <summary>
            Gets the prompt of the dialog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.Text">
            <summary>
            Gets or sets the value of the dialog's text input field.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.AllowWhiteSpace">
            <summary>
            Gets or sets a value indicating whether an input text of whitespaces is allowed.  The default is false.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.MaxLength">
            <summary>
            Gets or sets the maximum length of the text input.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.IsCancelled">
            <summary>
            Gets a value indicating whether the dialog was cancelled by the user.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.SubmitCommand">
            <summary>
            Gets the submit command.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.CancelCommand">
            <summary>
            Gets the cancel command.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.RequestClose">
            <summary>
            An event that is raised to indicate that the view should be closed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.OnSubmitCommandExecuted(System.Object)">
            <summary>
            Called when the user submits a value through the dialog.
            </summary>
            <param name="parameter">Unused</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.OnCancelCommandExecuted(System.Object)">
            <summary>
            Called when the user cancels the dialog.
            </summary>
            <param name="parameter">Unused</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.TextInputViewModel.CanExecuteSubmitCommand(System.Object)">
            <summary>
            Called by the dialog when the user has changed the input text.  The return value of this method affects
            whether the submit button is enabled in the dialog.
            </summary>
            <param name="parameter">Unused</param>
            <returns>True if the text input passes validation and the user is allowed to submit the text.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.VoteButton">
            <summary>
            A button that looks like "thumbs up/down" and have a vote state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.VoteButton.IsThumbsUp">
            <summary>
            Whether this is a thumbs up button or thumbs down button.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.VsUIDialogWindow">
            <summary>
            Dialog class to be used as base class for Visual Studio dialogs used with IVsUIDataSources
            
            Someone implementing a dialog derived from this class should define a UI Factory (IVsUIFactory implementer) 
            and expose the dialog as an UI Element creatable by the factory.
            Whomever wants to display the dialog should create a data source for the dialog (IVsUIDataSource implementer)
            possibly by using a data source factory. Use WindowHelper.AddHelpTopic function to add a help topic to the data source.
            Then call WindowHelper.ShowModalElement() and provide the element ID and the data source.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.WatermarkedTextBox">
            <summary>
            Represents a <see cref="T:System.Windows.Controls.TextBox" /> that can display watermark text when empty.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.WatermarkedTextBox.WatermarkProperty">
            <summary>
            Identifies the <see cref="P:Microsoft.VisualStudio.PlatformUI.WatermarkedTextBox.Watermark" /> dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.WatermarkedTextBox.Watermark">
            <summary>
            Gets or sets the watermark text to be display when the text box is empty.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.WindowResizeGrip">
            <summary>
            Thumb which can resize any item that implements IResizable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.WindowResizeGrip.ResizeTarget">
            <summary>
            Gets or sets the target element that this WindowResizeGrip will resize.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.WindowResizeGripDirection">
            <summary>
            Direction values for WindowsResizeGrip's ResizeGripDirection dependency property
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs">
            <summary>
            The event args given to listeners of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ActivationChange" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.#ctor(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Boolean,System.Nullable{Microsoft.VisualStudio.OLE.Interop.OLECRINFO},System.Boolean,System.Nullable{Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO})">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs" /> with the given info.
            </summary>
            <param name="activatedComponent">The component being activated, or null if none.</param>
            <param name="calleeIsActivating">A <see cref="T:System.Boolean" /> value indicating if the caller of the 
            <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponent.OnActivationChange(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)" /> is being activated.</param>
            <param name="activatingComponentsInfo">The activating components info, if any.</param>
            <param name="hostIsActivating">A <see cref="T:System.Boolean" /> value indicating whether the component host is activating.</param>
            <param name="hostInfo">The host info, if any.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.ActivatedComponent">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponent" /> that recieved activation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.CalleeIsActivating">
            <summary>
            A boolean value indicating whether the callee of the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponent.OnActivationChange(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)" />
            is the component being activated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.ActivatingComponentsInfo">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECRINFO" /> of the component being activated if <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.ActivatedComponent" /> is not null,
            otherwise null.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.HostIsActivating">
            <summary>
            A value indicating if the component host is activating.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.HostInfo">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO" /> if <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ActivationChangeEventArgs.HostIsActivating" /> is true, otherwise null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.AppActivateEventArgs">
            <summary>
            The event args given to listeners of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.AppActivate" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.AppActivateEventArgs.#ctor(System.Boolean,System.UInt32)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.AppActivateEventArgs" /> object with the given info.
            </summary>
            <param name="hostAppActivating">True if the host application is gaining activation, false otherwise.</param>
            <param name="threadId">If <paramref name="hostAppActivating" /> is true this represents the thread ID if the
            thread that owns the window being deactivated.  If it is false it is the thread ID of the thread that owns
            the window that is being activated.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.AppActivateEventArgs.HostAppActivating">
            <summary>
            Indicates whether the component host application is recieving activation (true) or losing it (false).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.AppActivateEventArgs.ThreadId">
            <summary>
            If <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.AppActivateEventArgs.HostAppActivating" /> is true this represents the thread ID if the thread that owns the 
            window being deactivated.  If it is false it is the thread ID of the thread that owns the window that 
            is being activated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFailedException">
            <summary>
            Exception that is thrown when <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRegisterComponent(Microsoft.VisualStudio.OLE.Interop.IOleComponent,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.UInt32@)" /> fails inside the <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent" />
            constructor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags">
            <summary>
            Flags given to <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRegisterComponent(Microsoft.VisualStudio.OLE.Interop.IOleComponent,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.UInt32@)" /> to indicate
            what kind of component services you need.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.NeedIdleTime">
            <summary>
            Needs idle time callbacks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.PreTranslateKeys">
            <summary>
            Must process keyboard messages before translation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.PreTranslateAll">
            <summary>
            Must process all messages before translation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.NeedSpecialActivationNotifications">
            <summary>
            Need to be notified for special activation changes (currently, this will
            notify component if ExclusiveBorderSpace or ExclusiveActivation mode changes).
            Top-level components should register with this flag.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.NeedAllActivationNotifications">
            <summary>
            needs to be notified for every change in activation state
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.ExclusiveBorderSpace">
            <summary>
            Needs exclusive border space when active (normally only used by TopLevel
            Mac components).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.ExclusiveActivation">
            <summary>
            Component becomes exclusively active when activated.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.NeedAllMacEvents">
            <summary>
            Need all Mac events.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.Master">
            <summary>
            Component is always active and gets first shot at everything.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRevocationFailedException">
            <summary>
            Exception that is thrown when <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRevokeComponent(System.UInt32)" /> fails inside <see cref="M:System.IDisposable.Dispose" /> for <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent" />
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState">
            <summary>
            Values that are states that can be used to determine the state the component manager is 
            referring to in a OnEnterState callback.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState.Unknown">
            <summary>
            Unknown state
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState.Modal">
            <summary>
            Modal state; disable toplevel windows
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState.RedrawOff">
            <summary>
            Disable window repainting
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState.WarningsOff">
            <summary>
            Disable user warnings
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState.Recording">
            <summary>
            Recording state
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ContinueMessageLoopEventArgs">
            <summary>
            The event args given to a listener on the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ContinueMessageLoop" /> event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ContinueMessageLoopEventArgs.ReasonCode">
            <summary>
            The reason code given in the call to <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponent.FContinueMessageLoop(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ContinueMessageLoopEventArgs.PrivateData">
            <summary>
            The private data given in the call to <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponent.FContinueMessageLoop(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ContinueMessageLoopEventArgs.ContinuePumping">
            <summary>
            Whether or not the component manager should continue pumping the message loop on return from
            the handler.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ContinueMessageLoopEventArgs.Message">
            <summary>
            The current message in the message queue.  If this is null it means there is no message in the
            queue or it has already been removed.  Otherwise this is the message retrieved via PeekMessage.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DesiredStateNotifications">
            <summary>
            Passed to a call to <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRegisterComponent(Microsoft.VisualStudio.OLE.Interop.IOleComponent,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.UInt32@)" /> to indicate
            what kind of state change notifications the component is interested in receiving.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DesiredStateNotifications.None">
            <summary>
            Not interested in any state change notifications.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DesiredStateNotifications.Modal">
            <summary>
            Needs modal state change notification (must be registered by components
            managing a top level window).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DesiredStateNotifications.RedrawOff">
            <summary>
            Needs notification of when redrawing is turned off.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DesiredStateNotifications.WarningsOff">
            <summary>
            Needs notification when warnings are turned off.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DesiredStateNotifications.Recording">
            <summary>
            Needs notification when recording is active.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs">
            <summary>
            The event args given to a listener of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DoIdle" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs.#ctor(System.UInt32)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs" /> object from the given raw flags value.
            </summary>
            <param name="rawFlags">The MSO flags that indicate what kind of idle tasks the user should perform.  
            Exposed through the <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs.IdleTypes" /> property.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs.IdleTypes">
            <summary>
            The type of idle activities that the component should perform.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs.MoreTimeNeededForIdleTasks">
            <summary>
            Indicates if the component needs more time to do idle work or not.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs">
            <summary>
            The event args given to a listener of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.GetWindow" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs.#ctor(Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs" /> requesting the given <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs.WindowType" />.
            </summary>
            <param name="windowType"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs.WindowType">
            <summary>
            The <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs.WindowType" /> desired.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs.WindowHandle">
            <summary>
            The <see cref="T:System.IntPtr" /> referring to the requested windows HWND.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.IdleTypes">
            <summary>
            The flags given in a call to <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponent.FDoIdle(System.UInt32)" /> to indicate what kind of
            idle tasks should be done.  This enum is also located in the <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs" />
            given to listeners of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DoIdle" /> event.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.IdleTypes.Periodic">
            <summary>
            The component should perform periodic idle tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.IdleTypes.NonPeriodic">
            <summary>
            The component should perform nonperiodic idle tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.IdleTypes.Priority">
            <summary>
            The component should perform high priority, nonperiodic
            idle tasks.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.IdleTypes.All">
            <summary>
            The component should perform all idle tasks.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent">
            <summary>
            Basic implementation of a disposable <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponent" />
            </summary>
            <remarks>
            Defines virtual methods for derived classes to override in order to change behavior.  Also defines a public 
            event for each method that users can hook into to change behavior without deriving.  Default implementations 
            of virtual methods simply raise events in the presence of handlers.  If you derive and override the methods 
            and want the events to be raised call the base method before or after your override logic.  Will call
            <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRegisterComponent(Microsoft.VisualStudio.OLE.Interop.IOleComponent,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.UInt32@)" /> on construction and
            and <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRevokeComponent(System.UInt32)" /> on <see cref="M:System.IDisposable.Dispose" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.CreateHostedComponent(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent" /> instance using <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponentManager.Instance" /> as the
            <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager" /> it needs to register itself.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.#ctor(Microsoft.VisualStudio.OLE.Interop.IOleComponentManager,System.String)">
            <summary>
            Construct an instance of <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent" />.  This overload will call 
            <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRegisterComponent(Microsoft.VisualStudio.OLE.Interop.IOleComponent,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.UInt32@)" /> automatically on construction.
            </summary>
            
            <exception cref="T:System.ArgumentNullException">Throws this if <paramref name="manager" /> is null.</exception>
            <exception cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFailedException">Can throw this exception if <paramref name="manager" />
            returns FALSE (0) from <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRegisterComponent(Microsoft.VisualStudio.OLE.Interop.IOleComponent,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.UInt32@)" />.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.PeriodicIdleTimePeriod">
            <summary>
            Sets or retrieves the idle time period in milliseconds for this components idle callbacks.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.IsTrackingComponent">
            <summary>
            Sets whether this component is the tracking component, accomplished by calling
            <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FSetTrackingComponent(System.UInt32,System.Int32)" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Activate">
            <summary>
            Activates the component, accomplished by calling <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FOnComponentActivate(System.UInt32)" />.
            </summary>
            <returns>Returns true if the component was successfully activated.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.PushMessageLoop(Microsoft.VisualStudio.OLE.Interop._OLELOOP,System.IntPtr)">
            <summary>
            Pushes this component to the OleComonentManager as the message loop handler by calling 
            <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FPushMessageLoop(System.UInt32,System.UInt32,System.IntPtr)" />. Message loop blocks until an 
            <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ContinueMessageLoop" /> handler sets the 
            <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ContinueMessageLoopEventArgs.ContinuePumping" /> /// to false.
            </summary>
            <param name="reason">Reason of the message loop.</param>
            <param name="pvLoopData">Private data for the loop.</param>
            <returns>Returns the call result of the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FPushMessageLoop(System.UInt32,System.UInt32,System.IntPtr)" /></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.BeginTracking">
            <summary>
            Makes this <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponent" /> the tracking component with its associated 
            <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.EndTracking">
            <summary>
            Makes this <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponent" /> no longer the tracking component with its associated 
            <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DoOleEvents(Microsoft.VisualStudio.OLE.Interop.IOleComponentManager,System.Func{System.Boolean})">
            <summary>
            Message pump for an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager" />.
            
            WARNING:
            Do not call this method unless it is absolutely necessary, and you know what you are doing.
            Pumping UI messages can have bad, bad side effects.
            
            See:
            https://blogs.msdn.com/jfoscoding/archive/2005/08/06/448560.aspx
            </summary>
            <param name="manager"><see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager" /> for which messages will be pumped.</param>
            <param name="continuePumping">Delegate to use to continue / cancel pumping. If null, will always continue pumping.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FContinueMessageLoop(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])">
             <summary>
             Called during each iteration of a message loop that the component pushed.  Simply calls through
             to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FContinueMessageLoopCore(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])" />.
             </summary>
             <param name="uReason">The reason given by the caller of <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FPushMessageLoop(System.UInt32,System.UInt32,System.IntPtr)" />.</param>
             <param name="pvLoopData">Private data provided by the caller of <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FPushMessageLoop(System.UInt32,System.UInt32,System.IntPtr)" />.</param>
             <param name="pMsgPeeked">The message from the queue, or null if there was none.</param>
             <returns>TRUE (1) if the message loop should continue, FALSE (0) otherwise.</returns>
             
             <remarks>This method is called after peeking the next message in the queue (via PeekMessage) but before 
             the message is removed from the queue.  The peeked message is passed in the <paramref name="pMsgPeeked" /> 
             param (NULL if no message is in the queue).  This method may be additionally called when the next message 
             has already been removed from the queue, in which case <paramref name="pMsgPeeked" /> is passed as NULL.  
             If FALSE (0) is returned, the component manager terminates the loop without removing <paramref name="pMsgPeeked" />
             from the queue.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FDoIdle(System.UInt32)">
            <summary>
            Called to give a component a chance to do idle time tasks.  Component may periodically call <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FContinueIdle" />;
            if this method returns FALSE (0), component should terminate its idle time processing and return.  Simply calls through
            to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FDoIdleCore(System.UInt32)" />.
            </summary>
            <param name="grfidlef">A group of bit flags that indicate what type of tasks to perform (maps directly to <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.IdleTypes" />.</param>
            <returns>TRUE (1) if more time is needed to perform the idle time tasks, FALSE (0) otherwise.</returns>
            
            <remarks>
            If a component reaches a point where it has no idle tasks and does not need FDoIdle calls, it should remove its idle task
            registration via <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FUpdateComponentRegistration(System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[])" />.  If this method is called on while component 
            is performing a tracking operation, component should only perform idle time tasks that it deems are appropriate to perform 
            during tracking.
            </remarks>        
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FPreTranslateMessage(Microsoft.VisualStudio.OLE.Interop.MSG[])">
            <summary>
            Host calls this method on the active component (if its registration info (<see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags" />)
            indicates it is interested in Pre-translate calls) to give the component a chance to process messages before they 
            are translated and dispatched.  The host need not call this method if no component is active.  Simply calls through
            to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FPreTranslateMessageCore(Microsoft.VisualStudio.OLE.Interop.MSG[])" />.
            </summary>
            <param name="pMsg">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.MSG" /> object to pre-translate.</param>
            <returns>TRUE (1) if the message was consumed, in which case the host should perform no further processing
            on the message, FALSE (0) otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FQueryTerminate(System.Int32)">
            <summary>
            Called when component manager wishes to know if the component is in a state in which it can terminate.  Simply calls through
            to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FQueryTerminateCore(System.Int32)" />.
            </summary>
            <param name="fPromptUser">A value indicating whether user prompting should occur if necessary.</param>
            <returns>TRUE (1) if the component can terminate, FALSE (0) otherwise.</returns>
            
            <remarks>If <paramref name="fPromptUser" /> is FALSE (0), component should simply return TRUE (1) if it 
            can terminate, FALSE (0) otherwise.  If <paramref name="fPromptUser" /> is TRUE (1), component should 
            return TRUE (1) if it can terminate without prompting the user; otherwise it should prompt the user, either 
            
            1.) asking user if it can terminate and returning TRUE (1) or FALSE (0) appropriately, or 
            2.) giving an indication as to why it cannot terminate and returning FALSE (0).
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#FReserved1(System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Reserved slot, not called.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#HwndGetWindow(System.UInt32,System.UInt32)">
            <summary>
            Called to retrieve a window associated with the component, as specified by <paramref name="dwWhich" /> which
            maps to a value in <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType" />.  Simply calls through to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.HwndGetWindowCore(System.UInt32,System.UInt32)" />.
            </summary>
            <param name="dwWhich">The type of window to retrieve, maps directly to a value in <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType" />.</param>
            <param name="dwReserved">Reserved for future use and should be zero</param>
            <returns>The desired window or <see cref="F:System.IntPtr.Zero" /> if no such window exists.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#OnActivationChange(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)">
            <summary>
            Notify component when a new object is being activated.  Simply calls through to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnActivationChangeCore(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)" />.
            </summary>
            <param name="pic">If non-NULL, then this is the component that is being activated.</param>
            <param name="fSameComponent">True if <paramref name="pic" /> is the component that called this method.</param>
            <param name="pcrinfo"><see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECRINFO" /> of <paramref name="pic" /> if <paramref name="pic" /> is non-null.</param>
            <param name="fHostIsActivating">If <paramref name="pic" /> is null and this is TRUE (1) it indicates the host is activating.  If
            <paramref name="pic" /> is null and this is FALSE (0) then there is no current active object.</param>
            <param name="pchostinfo">If <paramref name="fHostIsActivating" /> is TRUE (1) then this is the hosts <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO" />,
            otherwise this is null.</param>
            <param name="dwReserved">Reserved for future use, should be 0.</param>
            
            <remarks>
            If <paramref name="pic" /> is being activated and <paramref name="pcrinfo" />.grf has the
            <see cref="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.ExclusiveBorderSpace" /> bit set, component should hide its border
            space tools (toolbars, status bars, etc.); component should also do this if host is activating and
            <paramref name="pchostinfo" />.grfchost has the <see cref="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.ExclusiveBorderSpace" /> 
            bit set.  In either of these cases, component should unhide its border space tools the next time it is 
            activated.
            
            If <paramref name="pic" /> is being activated and <paramref name="pcrinfo" />.grf has the 
            <see cref="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.ExclusiveActivation" /> bit set, then <paramref name="pic" /> is being 
            activated in "ExclusiveActive" mode.  Component should retrieve the top frame window that is hosting
            <paramref name="pic" /> (via pic.HwndGetWindow(WindowTypes.WindowToplevel, 0)).  If this window is 
            different from component's own top window, component should disable its windows and do other things it 
            would do when receiving OnEnterState(ComponentState.Modal, TRUE) notification.
            
            Otherwise, if component is top-level, it should refuse to have its window activated by appropriately
            processing WM_MOUSEACTIVATE (see WM_MOUSEACTIVATE note below).  Component should remain in one of these 
            states until the ExclusiveActive mode ends, indicated by a future call to OnActivationChange with 
            ExclusiveActivation bit not set or with NULL <paramref name="pcrinfo" />
            
            WM_MOUSEACTIVATE Note (for top level compoenents and host):
            
            If the active (or tracking) comp's reg info indicates that it wants mouse messages, then no MA_xxxANDEAT 
            value should be returned from WM_MOUSEACTIVATE, so that the active (or tracking) comp will be able to process 
            the resulting mouse message.  If one does not want to examine the reg info, no MA_xxxANDEAT value should be 
            returned from WM_MOUSEACTIVATE if any comp is active (or tracking).  One can query the reg info of the active 
            (or tracking) component at any time via IOleComponentManager.FGetActiveComponent
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#OnAppActivate(System.Int32,System.UInt32)">
            <summary>
             Notify component when the host application gains or loses activation. Simply calls through to 
             <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnAppActivateCore(System.Int32,System.UInt32)" />.
            </summary>
            <param name="fActive">If TURE (1), the host app is being activated, if FALSE (0) the host app is being deactivated.</param>
            <param name="dwOtherThreadID">If <paramref name="fActive" /> is TRUE (1) then this is the thread ID of the thread owning the
            window being deactivated.  If <paramref name="fActive" /> is FALSE (0) this is the thread ID of the thread owning the window
            being activated.</param>
            
            <remarks>This method is not called when both the window being activated and the one being deactivated belong to the 
            host app. </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#OnEnterState(System.UInt32,System.Int32)">
            <summary>
            Notify component when app enters or exits the state given in <paramref name="uStateID" />.  Simply calls through
            to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnChangeStateCore(System.UInt32,System.Int32)" />.
            </summary>
            <param name="uStateID">The state being entered or exited, maps directly to <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState" /> </param>
            <param name="fEnter">If the value is TRUE (1) then we are entering the state described by <paramref name="uStateID" />
            otherwise we are exiting it.</param>
            
            <remarks>If n calls are made with TRUE (1) <paramref name="fEnter" />, component should consider
            the state to be in effect until n calls are made with FALSE (0) <paramref name="fEnter" />
            
            Components should be aware that it is possible for this method to be called with FALSE (0) <paramref name="fEnter" /> 
            more times than it was called with TRUE (1) <paramref name="fEnter" /> (so, for example, if component is maintaining a 
            state counter (incremented when this method is called with TRUE (1) <paramref name="fEnter" />, decremented when called 
            with FALSE (0) <paramref name="fEnter" />), the counter should not be decremented for FALSE (0) <paramref name="fEnter" />
            if it is already at zero.)  
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#OnLoseActivation">
            <summary>
            Notify the active component that it has lost its active status because the host or another component has become active.
            Simply calls through to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnLoseActivationCore" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Microsoft#VisualStudio#OLE#Interop#IOleComponent#Terminate">
            <summary>
            Called when component manager wishes to terminate the component's registration.  Component should revoke its 
            registration with component manager, release references to component manager and perform any necessary cleanup. 
            Simply calls through to <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.TerminateCore" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FContinueMessageLoopCore(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG[])">
            <summary>
            Default implementation of FContinueMessageLoop.  Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ContinueMessageLoop" />
            event if there are any listeners.
            </summary>
            <returns>If there are listeners to <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ContinueMessageLoop" /> we return the appropriate
            TRUE/FALSE value based on <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ContinueMessageLoopEventArgs.ContinuePumping" />, otherwise we return
            TRUE (1).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FDoIdleCore(System.UInt32)">
            <summary>
            Default implementation of FDoIdle.  Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DoIdle" /> and <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DoPeriodicIdle" />
            events as appropriate (based on value of <paramref name="grfidlef" />) if there are any listeners.  
            </summary>
            <returns>If there are listeners to <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DoIdle" /> or <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DoPeriodicIdle" /> 
            we return the appropriate TRUE/FALSE value based on <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.DoIdleEventArgs.MoreTimeNeededForIdleTasks" />.  Otherwise 
            we return FALSE (0).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FPreTranslateMessageCore(Microsoft.VisualStudio.OLE.Interop.MSG[])">
            <summary>
            Default implemmentation of FPreTranslateMessage.  Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.PreTranslateMessage" />
            event if there are listeners.
            </summary>
            <returns>If there are listeners to <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.PreTranslateMessage" /> we return the appropriate 
            TRUE/FALSE value based on <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.PreTranslateMessageEventArgs.MessageConsumed" />, otherwise we return 
            FALSE (0).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.FQueryTerminateCore(System.Int32)">
            <summary>
            Default implemmentation of FQueryTerminate.  Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.QueryTerminate" />
            event if there are listeners.
            </summary>
            <returns>If there are listeners to <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.QueryTerminate" /> we return the appropriate 
            TRUE/FALSE value based on <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.QueryTerminateEventArgs.CanTerminate" />, otherwise we return 
            TRUE (1).</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.HwndGetWindowCore(System.UInt32,System.UInt32)">
            <summary>
            Default implemmentation of HwndGetWindow.  Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.GetWindow" />
            event if there are listeners.
            </summary>
            <returns>If there are listeners to <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.GetWindow" /> we return the appropriate 
            TRUE/FALSE value based on <see cref="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs.WindowHandle" />, otherwise we return 
            <see cref="F:System.IntPtr.Zero" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnActivationChangeCore(Microsoft.VisualStudio.OLE.Interop.IOleComponent,System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[],System.Int32,Microsoft.VisualStudio.OLE.Interop.OLECHOSTINFO[],System.UInt32)">
            <summary>
            Default implemmentation of OnActivationChange.  Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ActivationChange" />
            event if there are listeners.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnAppActivateCore(System.Int32,System.UInt32)">
            <summary>
            Default implemmentation of OnAppActivate.  Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.AppActivate" />
            event if there are listeners.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnChangeStateCore(System.UInt32,System.Int32)">
            <summary>
            Default implemmentation of OnEnterState.  Simply raises the approriate event based on what state changed
            (described in <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentState" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.OnLoseActivationCore">
            <summary>
            Default implemmentation of OnLoseActivation.  Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ActivationLost" />
            event if there are listeners.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.TerminateCore">
            <summary>
            Default implemmentation of Terminate.  Simply raises the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.Terminate" />
            event if there are listeners.  Also calls <see cref="M:System.IDisposable.Dispose" /> and nulls out any
            reference to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager" /> that we may have been constructed with.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.DisposeManagedResources">
            <summary>
            Disposes of this object, calling <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRevokeComponent(System.UInt32)" /> if our
            manager field is non-null and our componentCookie field is not 0.
            </summary>
            <param name="disposing">Indicates if we are disposing due to a call to <see cref="M:System.IDisposable.Dispose" />.</param>
            
            <exception cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRevocationFailedException">Can throw this exception if we were constructed with an
            <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager" />, have a non-zero component cookie (meaning we are registered) and our call
            to <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FRevokeComponent(System.UInt32)" /> returns FALSE (0).</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.UpdateComponentRegistration">
            <summary>
            Calls <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponentManager.FUpdateComponentRegistration(System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECRINFO[])" /> using our cached component manager and our
            cookie and cached component flags.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ContainsFlag(System.UInt32,System.UInt32)">
            <summary>
            Checks if <paramref name="flags" /> contains <paramref name="rawFlag" />.
            </summary>
            <param name="flags"></param>
            <param name="rawFlag"></param>
            <returns>True if <paramref name="flags" /> contains <paramref name="rawFlag" />, otherwise False.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ComponentContainsNotificationFlag(System.UInt32)">
            <summary>
            Checks if <paramref name="rawFlag" /> is contained in componentNotifications field.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ComponentContainsRegistrationFlag(System.UInt32)">
            <summary>
            Checks if rawComponentFlags contains <paramref name="rawFlag" />.
            </summary>
            <returns>True if rawComponentFlags contains <paramref name="rawFlag" />, otherwise False.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.SetComponentRegistrationFlag(System.UInt32)">
            <summary>
            ORs the vale of <paramref name="newFlag" /> into rawComponentFlags.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ClearComponentRegistrationFlag(System.UInt32)">
            <summary>
            ANDs the value of ~<paramref name="flagToClear" /> with rawComponentFlags.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.SetComponentNotificationFlag(System.UInt32)">
            <summary>
            Calls <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.SetFlag(System.UInt32,System.UInt32)" /> using componentNotifications and <paramref name="newFlag" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ClearComponentNotificationFlag(System.UInt32)">
            <summary>
            Calls <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ClearFlag(System.UInt32,System.UInt32)" /> using componentNotifications and <paramref name="flagToClear" />
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.SetFlag(System.UInt32,System.UInt32)">
            <summary>
            ORs the value of <paramref name="originalFlags" /> and <paramref name="newFlags" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ClearFlag(System.UInt32,System.UInt32)">
            <summary>
            ANDs the value of <paramref name="originalFlags" /> and ~<paramref name="newFlags" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.EnsureAppActivationFlagsRegistered">
            <summary>
            Makes sure the registration flags we need to get activation callbacks are set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.RegisterAppActivate">
            <summary>
            Sets the <see cref="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.NeedAllActivationNotifications" /> flag in our cached
            registration flags and calls <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.UpdateComponentRegistration" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.UnregisterAppActivate">
            <summary>
            Clears the <see cref="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.ComponentRegistrationFlags.NeedAllActivationNotifications" /> flag from our cached
            registration flags and calls <see cref="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.UpdateComponentRegistration" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.UpdateStateOnAdd(System.Func{System.UInt32,System.Boolean},System.Action{System.UInt32},System.UInt32)">
            <summary>
            Template (pattern) method that details the basic tasks done by all Add handlers for public events that
            involve needing to update our registration info.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.UpdateStateOnRemove``1(System.EventHandler{``0},System.Action{System.UInt32},System.UInt32)">
            <summary>
            Template (pattern) method that details the basic tasks done by all Remove handlers for public events that
            involve needing to update our registration info.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponentManager.CreateDefaultComponentManager">
            <summary>
            Hook for us to do something in the case that we can't find a message filter or the one we find
            fails to QI to IServiceProvider or the QueryService on the service provider fails.  Right now we
            do nothing, but that could be modified in the future.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.PreTranslateMessageEventArgs">
            <summary>
            The event args given to listeners of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.PreTranslateMessage" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.PreTranslateMessageEventArgs.#ctor(Microsoft.VisualStudio.OLE.Interop.MSG)">
            <summary>
            Construct a <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.PreTranslateMessageEventArgs" /> object from the given <see cref="T:Microsoft.VisualStudio.OLE.Interop.MSG" />
            struct.
            </summary>
            <param name="message">The <see cref="T:Microsoft.VisualStudio.OLE.Interop.MSG" /> object given to 
            <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponent.FPreTranslateMessage(Microsoft.VisualStudio.OLE.Interop.MSG[])" /></param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.PreTranslateMessageEventArgs.Message">
            <summary>
            The <see cref="T:System.Windows.Interop.MSG" /> object for the component to pre-translate.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.PreTranslateMessageEventArgs.MessageConsumed">
            <summary>
            Indicates whether the message was handled or if the component manager needs to process it further.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.QueryTerminateEventArgs">
            <summary>
            The event args given to a listener of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.QueryTerminate" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.QueryTerminateEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.QueryTerminateEventArgs" /> object.
            </summary>
            <param name="shouldPromptUser">A <see cref="T:System.Boolean" /> value indicating if the component should prompt the user for a 
            termination decision, if necessary.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.QueryTerminateEventArgs.ShouldPromptUser">
            <summary>
            Indicates whether the component should prompt the user if it can't decide if it is okay to terminate, or if it
            decides that it can't (to alert the user why).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.QueryTerminateEventArgs.CanTerminate">
            <summary>
            Indicates if the component can terminate.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.StateChangedEventArgs">
            <summary>
            The event args given to listeners of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.ModalStateChanged" /> event.
            (also RecordingStateChanged, WarningsOffStateChanged, RedrawOffStateChanged)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.StateChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Constructs a <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.StateChangedEventArgs" /> object with the given info.
            </summary>
            <param name="enteringState">Whether the component is entering the state indicated by the event 
            this is associated with.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.StateChangedEventArgs.TransitionType">
            <summary>
            The state the component is entering or exiting.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.StateTransitionType.Exit">
            <summary>
            We are exiting a given state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.StateTransitionType.Enter">
            <summary>
            We are entering a given state.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType">
            <summary>
            Window type desired by the caller of <see cref="M:Microsoft.VisualStudio.OLE.Interop.IOleComponent.HwndGetWindow(System.UInt32,System.UInt32)" />.  Also
            passed to listeners of the <see cref="E:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.OleComponent.GetWindow" /> event in the 
            <see cref="T:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.GetWindowEventArgs" /> object.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType.WindowToplevel">
            <summary>
            MDI Apps should return the MDI frame (not MDI client) or App frame
            window, and SDI Apps should return the frame window which hosts the
            component. Basically it should be the topmost window which owns the
            component.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType.WindowOwner">
            <summary>
            This is the window which owns the component. It could be same as
            the window obtained by WindowTopLevel or be an owned window
            of that window.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType.WindowComponent">
            <summary>
             This is the "main" window of the component (if it has one). 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.PlatformUI.OleComponentSupport.WindowType.WindowDialogOwner">
            <summary>
            Caller wishes to display a dialog to be parented by the component.
            Component should return a window suitable for use as the dialog's
            owner window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.StringUtilities.Escape(System.String,System.Char[],System.Char)">
            <summary>
            Replaces all "escapable" characters with a specified escape character followed by a four-digit character code.
            The escape character itself is replaced by two escape characters.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.PlatformUI.StringUtilities.Unescape(System.String,System.Char)">
            <summary>
            Given the output of a call to Escape, returns the original string.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.HelpService">
            <devdoc>
                The help service provides a way to provide the IDE help system with
                contextual information for the current task.  The help system
                evaluates all contextual information it gets and determines the
                most likely topics to display to the user.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.#ctor(System.IServiceProvider)">
            <devdoc>
                Creates a new help service object.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.#ctor(Microsoft.VisualStudio.HelpService,Microsoft.VisualStudio.Shell.Interop.IVsUserContext,System.UInt32,System.IServiceProvider,System.ComponentModel.Design.HelpContextType)">
            <devdoc>
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType,System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsUserContext@,System.UInt32@)">
            <devdoc>
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.IsToolWindow(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
            <devdoc>
            Utility function to find out if a window frame is a tool window or a document window.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.GetUserContext">
            <devdoc>
                Retrieves a user context for us to add and remove attributes.  This
                will demand create the context if it doesn't exist.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.RecreateContext">
            <devdoc>
                Recretes the context
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.NotifyContextChange(Microsoft.VisualStudio.Shell.Interop.IVsUserContext)">
            <devdoc>
                Called to notify the IDE that our user context has changed.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.System#IDisposable#Dispose">
            <devdoc>
                Disposes this object.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.System#ComponentModel#Design#IHelpService#ClearContextAttributes">
            <devdoc>
                Clears all existing context attributes from the document.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.System#ComponentModel#Design#IHelpService#AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
            <devdoc>
                Adds a context attribute to the document.  Context attributes are used
                to provide context-sensitive help to users.  The designer host will
                automatically add context attributes from available help attributes
                on selected components and properties.  This method allows you to
                further customize the context-sensitive help.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.System#ComponentModel#Design#IHelpService#CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
            <devdoc>
                Creates a Local IHelpService to manage subcontexts.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.System#ComponentModel#Design#IHelpService#RemoveContextAttribute(System.String,System.String)">
            <devdoc>
                Removes a previously added context attribute.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.System#ComponentModel#Design#IHelpService#RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
            <devdoc>
                Removes a context that was created with CreateLocalContext
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.System#ComponentModel#Design#IHelpService#ShowHelpFromKeyword(System.String)">
            <devdoc>
                Shows the help topic corresponding the specified keyword.
                The topic will be displayed in
                the environment's integrated help system.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.HelpService.System#ComponentModel#Design#IHelpService#ShowHelpFromUrl(System.String)">
            <devdoc>
                Shows the given help topic.  This should contain a Url to the help
                topic.  The topic will be displayed in
                the environment's integrated help system.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.InvalidIntPtr">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.InvalidIntPtr&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IID_IServiceProvider">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.IID_IServiceProvider&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IID_IObjectWithSite">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.IID_IObjectWithSite&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IID_IUnknown">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.IID_IUnknown&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_PropertyBrowserToolWindow">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GUID_PropertyBrowserToolWindow&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VSStandardCommandSet97">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GUID_VSStandardCommandSet97&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_HtmDocData">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CLSID_HtmDocData&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_HtmedPackage">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CLSID_HtmedPackage&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_HtmlLanguageService">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CLSID_HtmlLanguageService&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_HtmlEditorFactory">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GUID_HtmlEditorFactory&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_TextEditorFactory">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GUID_TextEditorFactory&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_HTMEDAllowExistingDocData">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GUID_HTMEDAllowExistingDocData&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_VsEnvironmentPackage">
            <summary>GUID for the environment package.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsNewProjectPseudoFolder">
            <summary>GUID for the "Visual Studio" pseudo folder in the registry.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_MiscellaneousFilesProject">
            <summary>GUID for the "Miscellaneous Files" project.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_SolutionItemsProject">
            <summary>GUID for Solution Items project.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.SID_SVsGeneralOutputWindowPane">
            <summary>Pseudo service that returns a IID_IVsOutputWindowPane interface of the General output pane in the VS environment.
            Querying for this service will cause the General output pane to be created if it hasn't yet been created.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.SID_SUIHostCommandDispatcher">
            <summary>
            SUIHostCommandDispatcher service returns an object that implements IOleCommandTarget.
            This object handles command routing for the Environment. Use this service if you need to
            route a command based on the current selection/state of the Environment.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_VsUIHierarchyWindow">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_DefaultEditor">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_ExternalEditor">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_OutWindowGeneralPane">
            <summary>GUID of the general output pane inside the output window.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.BuildOrder">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.BuildOrder&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.BuildOutput">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.BuildOutput&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DebugOutput">
            <!-- Failed to insert some or all of included XML --><include file="doc\Package.uex" path="docs/doc[@for=&quot;Package.DebugOutput&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_ItemType_PhysicalFile">
            <summary>Physical file on disk or web (IVsProject::GetMkDocument returns a file path).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_ItemType_PhysicalFolder">
            <summary>Physical folder on disk or web (IVsProject::GetMkDocument returns a directory path).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_ItemType_VirtualFolder">
            <summary>Non-physical folder (folder is logical and not a physical file system directory).</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_ItemType_SubProject">
            <summary>A nested hierarchy project.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_SolutionBuilding">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_Debugging">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_Dragging">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_FullScreenMode">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_DesignMode">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_NoSolution">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_SolutionExists">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_EmptySolution">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_SolutionHasSingleProject">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_SolutionHasMultipleProjects">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UICONTEXT_CodeWindow">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewAll">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewUserTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewShortcutTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewHTMLTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewCompilerTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewCommentTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewCurrentFileTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewCheckedTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsTaskListViewUncheckedTasks">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_VsTaskList">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_VsTaskListPackage">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.SID_SVsToolboxActiveXDataProvider">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_VsDocOutlinePackage">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSID_VsCfgProviderEventsHelper">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_COMPlusPage">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_COMClassicPage">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_SolutionPage">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.OleComponentUIManager">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;OleComponentUIManager&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.VsTextBuffer">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;VsTextBuffer&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.Succeeded(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.Succeeded&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.Failed(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.Failed&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.SignedHIWORD(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.SignedHIWORD&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.SignedLOWORD(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.SignedLOWORD&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CLSCTX_INPROC_SERVER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CLSCTX_INPROC_SERVER&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.S_FALSE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.S_OK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.TRUE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.FALSE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDOK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDCANCEL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDABORT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDRETRY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDIGNORE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDYES">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDNO">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDCLOSE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDHELP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDTRYAGAIN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IDCONTINUE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.MB_OK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.MB_OKCANCEL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.MB_ABORTRETRYIGNORE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.MB_YESNOCANCEL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.MB_YESNO">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.MB_RETRYCANCEL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ILD_NORMAL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ILD_TRANSPARENT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ILD_MASK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ILD_ROP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECMDERR_E_NOTSUPPORTED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECMDERR_E_UNKNOWNGROUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UNDO_E_CLIENTABORT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_OUTOFMEMORY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_INVALIDARG">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_FAIL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_NOINTERFACE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_POINTER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_NOTIMPL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_UNEXPECTED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_HANDLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_ABORT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_ACCESSDENIED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_PENDING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.S_FALSE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_UNSUPPORTEDFORMAT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_INCOMPATIBLEDOCDATA">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_PACKAGENOTLOADED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_PROJECTNOTLOADED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_SOLUTIONNOTOPEN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_SOLUTIONALREADYOPEN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_PROJECTMIGRATIONFAILED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_E_WIZARDBACKBUTTONPRESS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_S_PROJECTFORWARDED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VS_S_TBXMARKER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.E_VS_MAPMISSING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VS_E_UNSUPPORTEDFORMAT&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.VSTASKBITMAP">
            <summary>
            Specifies options for a bitmap image associated with a task item.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECLOSE_SAVEIFDIRTY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLECLOSE_SAVEIFDIRTY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECLOSE_NOSAVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLECLOSE_SAVEIFDIRTY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECLOSE_PROMPTSAVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLECLOSE_SAVEIFDIRTY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_PRIMARY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_SHOW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_OPEN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_HIDE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_UIACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_INPLACEACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_DISCARDUNDOSTATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLEIVERB_PROPERTIES">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OLEIVERB_PRIMARY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_OLEVERB">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_ADVF">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_ENUM_NOMORE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_ADVISENOTSUPPORTED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_NOCONNECTION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_NOTRUNNING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_NOCACHE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_BLANK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_CLASSDIFF">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_CANT_GETMONIKER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_CANT_BINDTOSOURCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_STATIC">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_PROMPTSAVECANCELLED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_INVALIDRECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_WRONGCOMPOBJ">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_INVALIDHWND">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_NOT_INPLACEACTIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_CANTCONVERT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLE_E_NOSTORAGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_UNKNOWNINTERFACE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_MEMBERNOTFOUND">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_PARAMNOTFOUND">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_TYPEMISMATCH">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_UNKNOWNNAME">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_NONAMEDARGS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_BADVARTYPE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_EXCEPTION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_OVERFLOW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_BADINDEX">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_UNKNOWNLCID">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_ARRAYISLOCKED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_BADPARAMCOUNT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_PARAMNOTOPTIONAL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_BADCALLEE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_NOTACOLLECTION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_DIVBYZERO">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DISP_E_BUFFERTOOSMALL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.OleDispatchErrors&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSITEMID_NIL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VSITEMID_NIL&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSITEMID_ROOT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VSITEMID_NIL&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSITEMID_SELECTION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.VSITEMID_NIL&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ALL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.ALL&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.SELECTED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.ALL&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UndoManager">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.UndoManager&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WindowFrame">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.UndoManager&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DocumentFrame">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.UndoManager&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StartupProject">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.UndoManager&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PropertyBrowserSID">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.UndoManager&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.UserContext">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.UndoManager&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ROSTATUS_NotReadOnly">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.ROSTATUS_NotReadOnly&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ROSTATUS_ReadOnly">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.ROSTATUS_NotReadOnly&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.ROSTATUS_Unknown">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.ROSTATUS_NotReadOnly&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.IEI_DoNotLoadDocData">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.IEI_DoNotLoadDocData&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGVIEWID_Any">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.LOGVIEWID_Any&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGVIEWID_Primary">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.LOGVIEWID_Primary&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGVIEWID_Debugging">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.LOGVIEWID_Debugging&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGVIEWID_Code">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.LOGVIEWID_Code&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGVIEWID_Designer">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.LOGVIEWID_Designer&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGVIEWID_TextView">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.LOGVIEWID_TextView&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGVIEWID_UserChooseView">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.LOGVIEWID_UserChooseView&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GUID_VsUIHierarchyWindowCmds">
            <summary>Command Group GUID for commands that only apply to the UIHierarchyWindow.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.VsUIHierarchyWindowCmdIds">
            <summary>
            The following commands are special commands that only apply to the UIHierarchyWindow.
            They are defined as part of the command group GUID: GUID_VsUIHierarchyWindowCmds.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VsUIHierarchyWindowCmdIds.UIHWCMDID_RightClick">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VsUIHierarchyWindowCmdIds.UIHWCMDID_DoubleClick">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VsUIHierarchyWindowCmdIds.UIHWCMDID_EnterKey">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VsUIHierarchyWindowCmdIds.UIHWCMDID_StartLabelEdit">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VsUIHierarchyWindowCmdIds.UIHWCMDID_CommitLabelEdit">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VsUIHierarchyWindowCmdIds.UIHWCMDID_CancelLabelEdit">
            <summary></summary>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.VSSELELEMID">
            <summary>
            These element IDs are the only element IDs that can be used with the selection service.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_UndoManager">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_WindowFrame">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_DocumentFrame">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_StartupProject">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_PropertyBrowserSID">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_UserContext">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_ResultList">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.VSSELELEMID.SEID_LastWindowFrame">
            <summary></summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CB_SETDROPPEDWIDTH">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GWL_WNDPROC">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GWL_STYLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GWL_EXSTYLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GWLP_WNDPROC">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GWLP_HINSTANCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GWLP_HWNDPARENT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GWLP_USERDATA">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GWLP_ID">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DWL_MSGRESULT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.HTMENU">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DLGC_WANTARROWS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DLGC_WANTTAB">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DLGC_WANTCHARS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DLGC_WANTALLKEYS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GA_ROOT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_POPUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_CHILD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_MINIMIZE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_VISIBLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_DISABLED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_CLIPSIBLINGS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_CLIPCHILDREN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_MAXIMIZE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_CAPTION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_BORDER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_DLGFRAME">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_VSCROLL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_HSCROLL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_SYSMENU">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_THICKFRAME">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_TABSTOP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_MINIMIZEBOX">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_MAXIMIZEBOX">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_DLGMODALFRAME">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_NOPARENTNOTIFY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_TOPMOST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_ACCEPTFILES">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_TRANSPARENT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_MDICHILD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_TOOLWINDOW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_WINDOWEDGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_CLIENTEDGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_CONTEXTHELP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_RIGHT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_LEFT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_RTLREADING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_LTRREADING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_LEFTSCROLLBAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_RIGHTSCROLLBAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_CONTROLPARENT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_STATICEDGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_APPWINDOW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_LAYERED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_NOINHERITLAYOUT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_LAYOUTRTL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_COMPOSITED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_NOACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_OVERLAPPEDWINDOW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_EX_PALETTEWINDOW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LVM_SETEXTENDEDLISTVIEWSTYLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LVS_EX_LABELTIP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WH_JOURNALPLAYBACK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WH_GETMESSAGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WH_MOUSE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WSF_VISIBLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NULL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CREATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DELETEITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DESTROY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SIZE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WA_INACTIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WA_ACTIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WA_CLICKACTIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETFOCUS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_KILLFOCUS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ENABLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETREDRAW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETTEXT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETTEXT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETTEXTLENGTH">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PAINT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CLOSE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_QUERYENDSESSION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_QUIT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_QUERYOPEN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ERASEBKGND">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SYSCOLORCHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ENDSESSION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SHOWWINDOW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_WININICHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETTINGCHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DEVMODECHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ACTIVATEAPP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_FONTCHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_TIMECHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CANCELMODE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETCURSOR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOUSEACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CHILDACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_QUEUESYNC">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETMINMAXINFO">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PAINTICON">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ICONERASEBKGND">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NEXTDLGCTL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SPOOLERSTATUS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DRAWITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MEASUREITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_VKEYTOITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CHARTOITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETFONT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETFONT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETHOTKEY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETHOTKEY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_QUERYDRAGICON">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_COMPAREITEM">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETOBJECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_COMPACTING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_COMMNOTIFY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_WINDOWPOSCHANGING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_WINDOWPOSCHANGED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_POWER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_COPYDATA">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CANCELJOURNAL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NOTIFY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_INPUTLANGCHANGEREQUEST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_INPUTLANGCHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_TCARD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_HELP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_USERCHANGED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NOTIFYFORMAT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CONTEXTMENU">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_STYLECHANGING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_STYLECHANGED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DISPLAYCHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETICON">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SETICON">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCCREATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCDESTROY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCCALCSIZE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCHITTEST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCPAINT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_GETDLGCODE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCMOUSEMOVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCLBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCLBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCLBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCRBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCRBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCRBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCMBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCMBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCMBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCXBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCXBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NCXBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_KEYFIRST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_KEYDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_KEYUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CHAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DEADCHAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLOR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SYSKEYDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SYSKEYUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SYSCHAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SYSDEADCHAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_KEYLAST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_STARTCOMPOSITION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_ENDCOMPOSITION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_COMPOSITION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_KEYLAST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_INITDIALOG">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_COMMAND">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SYSCOMMAND">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_TIMER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_HSCROLL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_VSCROLL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_INITMENU">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_INITMENUPOPUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MENUSELECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MENUCHAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ENTERIDLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CHANGEUISTATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_UPDATEUISTATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_QUERYUISTATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLORMSGBOX">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLOREDIT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLORLISTBOX">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLORBTN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLORDLG">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLORSCROLLBAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CTLCOLORSTATIC">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOUSEFIRST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOUSEMOVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_LBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_LBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_LBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_RBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_RBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_RBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_XBUTTONDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_XBUTTONUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_XBUTTONDBLCLK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOUSEWHEEL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOUSELAST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PARENTNOTIFY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ENTERMENULOOP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_EXITMENULOOP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_NEXTMENU">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SIZING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CAPTURECHANGED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOVING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_POWERBROADCAST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DEVICECHANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_SETCONTEXT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_NOTIFY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_CONTROL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_COMPOSITIONFULL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_SELECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_CHAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_KEYDOWN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_IME_KEYUP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDICREATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDIDESTROY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDIACTIVATE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDIRESTORE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDINEXT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDIMAXIMIZE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDITILE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDICASCADE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDIICONARRANGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDIGETACTIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDISETMENU">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ENTERSIZEMOVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_EXITSIZEMOVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DROPFILES">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MDIREFRESHMENU">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOUSEHOVER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_MOUSELEAVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CUT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_COPY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PASTE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CLEAR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_UNDO">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_RENDERFORMAT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_RENDERALLFORMATS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DESTROYCLIPBOARD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_DRAWCLIPBOARD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PAINTCLIPBOARD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_VSCROLLCLIPBOARD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_SIZECLIPBOARD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_ASKCBFORMATNAME">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CHANGECBCHAIN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_HSCROLLCLIPBOARD">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_QUERYNEWPALETTE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PALETTEISCHANGING">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PALETTECHANGED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_THEMECHANGED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_HOTKEY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PRINT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PRINTCLIENT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_HANDHELDFIRST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_HANDHELDLAST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_AFXFIRST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_AFXLAST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PENWINFIRST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_PENWINLAST">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_APP">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_USER">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_REFLECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WS_OVERLAPPED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WPF_SETMINPOSITION">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WM_CHOOSEFONT_GETLOGFONT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.WHEEL_DELTA">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.DWLP_MSGRESULT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PSNRET_NOERROR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PSNRET_INVALID">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PSNRET_INVALID_NOCHANGEPAGE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CB_SETDROPPEDWIDTH&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PSN_APPLY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.PSN_APPLY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PSN_KILLACTIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.PSN_APPLY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PSN_RESET">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.PSN_APPLY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PSN_SETACTIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.PSN_APPLY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GMEM_MOVEABLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GMEM_MOVEABLE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GMEM_ZEROINIT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GMEM_MOVEABLE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.GMEM_DDESHARE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GMEM_MOVEABLE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.TVM_SETINSERTMARK">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.TVM_SETINSERTMARK&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.TVM_GETEDITCONTROL">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.TVM_SETINSERTMARK&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.FILE_ATTRIBUTE_READONLY">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.FILE_ATTRIBUTE_READONLY&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CEF_CLONEFILE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CEF_CLONEFILE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CEF_OPENFILE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CEF_CLONEFILE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CEF_SILENT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CEF_CLONEFILE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.CEF_OPENASNEW">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.CEF_CLONEFILE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.cmdidToolsOptions">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.cmdidToolsOptions&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.LOGFONT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGFONT.lfHeight">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT.lfHeight;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGFONT.lfWidth">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT.lfWidth;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGFONT.lfEscapement">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT.lfEscapement;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGFONT.lfOrientation">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT.lfOrientation;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGFONT.lfWeight">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT.lfWeight;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGFONT.lfItalic">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT.lfItalic;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGFONT.lfUnderline">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT.lfUnderline;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGFONT.lfStrikeOut">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT.lfStrikeOut;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGFONT.lfCharSet">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT.lfCharSet;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGFONT.lfOutPrecision">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT.lfOutPrecision;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGFONT.lfClipPrecision">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT.lfClipPrecision;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGFONT.lfQuality">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT.lfQuality;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGFONT.lfPitchAndFamily">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT.lfPitchAndFamily;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.LOGFONT.lfFaceName">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;LOGFONT.lfFaceName;&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.NMHDR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NMHDR&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.NMHDR.hwndFrom">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NMHDR.hwndFrom;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.NMHDR.idFrom">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NMHDR.idFrom;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.NMHDR.code">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NMHDR.code;&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.RECT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;RECT&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;RECT.RECT&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.RECT.#ctor(System.Drawing.Rectangle)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;RECT.RECT1&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.POINT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;POINT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.POINT.x">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;POINT.x;&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.POINT.y">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;POINT.y;&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.POINT.#ctor">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;POINT.POINT&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.POINT.#ctor(System.Int32,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;POINT.POINT1&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.OLECMDTEXT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;OLECMDTEXT&quot;]/*" />
            <devdoc>
            Helper class for setting the text parameters to OLECMDTEXT structures.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.OLECMDTEXT.OLECMDTEXTF">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;OLECMDTEXTF&quot;]/*" />
            <summary>
            Flags for the OLE command text
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECMDTEXT.OLECMDTEXTF.OLECMDTEXTF_NONE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;OLECMDTEXTF.OLECMDTEXTF_NONE&quot;]/*" />
            <summary>No flag</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECMDTEXT.OLECMDTEXTF.OLECMDTEXTF_NAME">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;OLECMDTEXTF.OLECMDTEXTF_NAME&quot;]/*" />
            <summary>The name of the command is required.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECMDTEXT.OLECMDTEXTF.OLECMDTEXTF_STATUS">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;OLECMDTEXTF.OLECMDTEXTF_STATUS&quot;]/*" />
            <summary>A description of the status is required.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.OLECMDTEXT.OLECMDTEXTF.OLECMDTEXTF_AUTOMATIONNAME">
            <summary>An automation name of the command is required</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.OLECMDTEXT.GetFlags(System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;OLECMDTEXTF.GetFlags&quot;]/*" />
            <summary>
            Gets the flags of the OLECMDTEXT structure
            </summary>
            <param name="pCmdTextInt">The structure to read.</param>
            <returns>The value of the flags.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.OLECMDTEXT.GetText(System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;OLECMDTEXTF.GetText&quot;]/*" />
            <devdoc>
            Accessing the text of this structure is very cumbersome.  Instead, you may
            use this method to access an integer pointer of the structure.
            Passing integer versions of this structure is needed because there is no
            way to tell the common language runtime that there is extra data at the end of the structure.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.OLECMDTEXT.SetText(System.IntPtr,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;OLECMDTEXTF.SetText&quot;]/*" />
            <devdoc>
            Accessing the text of this structure is very cumbersome.  Instead, you may
            use this method to access an integer pointer of the structure.
            Passing integer versions of this structure is needed because there is no
            way to tell the common language runtime that there is extra data at the end of the structure.
            </devdoc>
            <summary>
            Sets the text inside the structure starting from an integer pointer.
            </summary>
            <param name="pCmdTextInt">The integer pointer to the position where to set the text.</param>
            <param name="text">The text to set.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.tagOLECMDF">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;tagOLECMDF&quot;]/*" />
            <devdoc>
            OLECMDF enums for IOleCommandTarget
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.tagOLECMDF.OLECMDF_SUPPORTED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;tagOLECMDF.OLECMDF_SUPPORTED&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.tagOLECMDF.OLECMDF_ENABLED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;tagOLECMDF.OLECMDF_ENABLED&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.tagOLECMDF.OLECMDF_LATCHED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;tagOLECMDF.OLECMDF_LATCHED&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.tagOLECMDF.OLECMDF_NINCHED">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;tagOLECMDF.OLECMDF_NINCHED&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.tagOLECMDF.OLECMDF_INVISIBLE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;tagOLECMDF.OLECMDF_INVISIBLE&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.StreamConsts">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;StreamConsts&quot;]/*" />
            <devdoc>
            Constants for stream usage.
            </devdoc>
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StreamConsts.LOCK_WRITE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;StreamConsts.LOCK_WRITE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StreamConsts.LOCK_EXCLUSIVE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;StreamConsts.LOCK_EXCLUSIVE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StreamConsts.LOCK_ONLYONCE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;StreamConsts.LOCK_ONLYONCE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StreamConsts.STATFLAG_DEFAULT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;StreamConsts.STATFLAG_DEFAULT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StreamConsts.STATFLAG_NONAME">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;StreamConsts.STATFLAG_NONAME&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StreamConsts.STATFLAG_NOOPEN">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;StreamConsts.STATFLAG_NOOPEN&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StreamConsts.STGC_DEFAULT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;StreamConsts.STGC_DEFAULT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StreamConsts.STGC_OVERWRITE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;StreamConsts.STGC_OVERWRITE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StreamConsts.STGC_ONLYIFCURRENT">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;StreamConsts.STGC_ONLYIFCURRENT&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StreamConsts.STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;StreamConsts.STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StreamConsts.STREAM_SEEK_SET">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;StreamConsts.STREAM_SEEK_SET&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StreamConsts.STREAM_SEEK_CUR">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;StreamConsts.STREAM_SEEK_CUR&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.StreamConsts.STREAM_SEEK_END">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;StreamConsts.STREAM_SEEK_END&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.ConnectionPointCookie">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;ConnectionPointCookie&quot;]/*" />
            <devdoc>
            Class that encapsulates a connection point cookie for COM event handling.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.ConnectionPointCookie.#ctor(System.Object,System.Object,System.Type)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;ConnectionPointCookie.ConnectionPointCookie&quot;]/*" />
            <devdoc>
            Creates a connection point to of the given interface type.
            which will call on a managed code sink that implements that interface.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.ConnectionPointCookie.Finalize">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.Finalize1&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.ConnectionPointCookie.#ctor(System.Object,System.Object,System.Type,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;ConnectionPointCookie.ConnectionPointCookie1&quot;]/*" />
            <devdoc>
            Creates a connection point to of the given interface type.
            which will call on a managed code sink that implements that interface.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GetAbsolutePath(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GetAbsolutePath&quot;]/*" />
            <devdoc>
            This method takes a file URL and converts it to an absolute path.  The trick here is that
            if there is a '#' in the path, everything after this is treated as a fragment.  So
            we need to append the fragment to the end of the path.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GetLocalPath(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GetLocalPath&quot;]/*" />
            <devdoc>
            This method takes a file URL and converts it to a local path.  The trick here is that
            if there is a '#' in the path, everything after this is treated as a fragment.  So
            we need to append the fragment to the end of the path.
            </devdoc>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IsSamePath(System.String,System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.IsSamePath&quot;]/*" />
            <devdoc>
            Please use this "approved" method to compare file names.
            </devdoc>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.IEventHandler">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IEventHandler&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IEventHandler.AddHandler(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IEventHandler.AddHandler&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IEventHandler.RemoveHandler(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IEventHandler.RemoveHandler&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IEventHandler.GetHandledEvents">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IEventHandler.GetHandledEvents&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IEventHandler.HandlesEvent(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IEventHandler.HandlesEvent&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.IParameterKind">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IParameterKind&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IParameterKind.SetParameterPassingMode(Microsoft.VisualStudio.NativeMethods.PARAMETER_PASSING_MODE)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IParameterKind.SetParameterPassingMode&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IParameterKind.SetParameterArrayDimensions(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IParameterKind.SetParameterArrayDimensions&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IParameterKind.GetParameterArrayCount">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IParameterKind.GetParameterArrayCount&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IParameterKind.GetParameterArrayDimensions(System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IParameterKind.GetParameterArrayDimensions&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IParameterKind.GetParameterPassingMode">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IParameterKind.GetParameterPassingMode&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.PARAMETER_PASSING_MODE">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;PARAMETER_PASSING_MODE&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PARAMETER_PASSING_MODE.cmParameterTypeIn">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;PARAMETER_PASSING_MODE.cmParameterTypeIn&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PARAMETER_PASSING_MODE.cmParameterTypeOut">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;PARAMETER_PASSING_MODE.cmParameterTypeOut&quot;]/*" />
        </member>
        <member name="F:Microsoft.VisualStudio.NativeMethods.PARAMETER_PASSING_MODE.cmParameterTypeInOut">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;PARAMETER_PASSING_MODE.cmParameterTypeInOut&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.IMethodXML">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IMethodXML&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IMethodXML.GetXML(System.String@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IMethodXML.GetXML&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IMethodXML.SetXML(System.String)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IMethodXML.SetXML&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IMethodXML.GetBodyPoint(System.Object@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IMethodXML.GetBodyPoint&quot;]/*" />
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.IVBFileCodeModelEvents">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IVBFileCodeModelEvents&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IVBFileCodeModelEvents.StartEdit">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IVBFileCodeModelEvents.StartEdit&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.IVBFileCodeModelEvents.EndEdit">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;IVBFileCodeModelEvents.EndEdit&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GetFileAttributes(System.String)">
            <summary>
            The kernel32 GetFileAttributes function.
            </summary>
            <param name="name">The name of the file to get the attributes for.</param>
            <returns>The attributes of the file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Places a message in the message queue associated with the thread that created the 
            specified window and then returns without waiting for the thread to process the message. 
            </summary>
            <param name="hwnd">Handle to the window whose window procedure is to receive the message.</param>
            <param name="msg">Specifies the message to be posted.</param>
            <param name="wparam">Specifies additional message-specific information.</param>
            <param name="lparam">Specifies additional message-specific information.</param>
            <returns>Nonzero indicates success. Zero indicates failure.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GetNativeWndProc(System.Windows.Forms.Control)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GetNativeWndProc&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GetWindowLong(System.Runtime.InteropServices.HandleRef,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GetWindowLong&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GetWindowLong(System.IntPtr,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GetWindowLong&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GetWindowLongPtr(System.IntPtr,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GetWindowLong&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.SetWindowLong(System.IntPtr,System.Int16,System.Int32)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.SetWindowLong&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.SetParent(System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.SetParent&quot;]/*" />
            <summary>
            Changes the parent window of the specified child window.
            </summary>
            <param name="hWnd">Handle to the child window.</param>
            <param name="hWndParent">Handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window.</param>
            <returns>A handle to the previous parent window indicates success. NULL indicates failure.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes the size, position, and z-order of a child, pop-up, or top-level window.
            </summary>
            <param name="hWnd">Handle to the window.</param>
            <param name="hWndInsertAfter">Handle to the window to precede the positioned window in the z-order.</param>
            <param name="x">Specifies the new position of the left side of the window, in client coordinates.</param>
            <param name="y">Specifies the new position of the top of the window, in client coordinates.</param>
            <param name="cx">Specifies the new width of the window, in pixels.</param>
            <param name="cy">Specifies the new height of the window, in pixels.</param>
            <param name="flags">Specifies the window sizing and positioning flags.</param>
            <returns>Nonzero indicates success. Zero indicates failure.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
            Sets the specified window's show state.
            </summary>
            <param name="hWnd">Handle to the window.</param>
            <param name="nCmdShow">Specifies how the window is to be shown.</param>
            <returns>Nonzero indicates that the window was previously visible. Zero indicates that the window was previously hidden.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GlobalAlloc(System.Int32,System.Int32)">
            <summary>
            Allocates the specified number of bytes from the heap.
            </summary>
            <param name="uFlags">Memory allocation attributes.</param>
            <param name="dwBytes">Number of bytes to allocate.</param>
            <returns>If the function succeeds, the return value is a handle to the newly allocated memory object, NULL otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GlobalReAlloc(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32)">
            <summary>
            Changes the size or attributes of a specified global memory object.
            </summary>
            <param name="handle">Handle to the global memory object to be reallocated.</param>
            <param name="bytes">New size of the memory block, in bytes.</param>
            <param name="flags">Reallocation options.</param>
            <returns>If the function succeeds, the return value is a handle to the reallocated memory object, NULL otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GlobalLock(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Locks a global memory object and returns a pointer to the first byte of the object's memory block.
            </summary>
            <param name="handle">Handle to the global memory object.</param>
            <returns>If the function succeeds, the return value is a pointer to the first byte of the memory block, NULL otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GlobalUnlock(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Decrements the lock count associated with a memory object.
            </summary>
            <param name="handle">Handle to the global memory object.</param>
            <returns>If the memory object is still locked after decrementing the lock count, the return value is a nonzero value.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GlobalFree(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Frees the specified global memory object and invalidates its handle.
            </summary>
            <param name="handle">Handle to the global memory object.</param>
            <returns>If the function succeeds, the return value is NULL; if it fails the return value is equal to a handle to the global memory object.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GlobalSize(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Retrieves the current size of the specified global memory object, in bytes.
            </summary>
            <param name="handle">Handle to the global memory object.</param>
            <returns>If the function succeeds, the return value is the size of the specified global memory object, in bytes; it is zero otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.WideCharToMultiByte(System.Int32,System.Int32,System.String,System.Int32,System.Byte[],System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Maps a wide-character string to a new character string.
            The new character string is not necessarily from a multibyte character set.
            </summary>
            <param name="codePage">Specifies the code page used to perform the conversion.</param>
            <param name="flags">Specifies the handling of unmapped characters.</param>
            <param name="wideStr">The wide-character string to be converted.</param>
            <param name="chars">The number of wide characters in the string pointed to by the wideStr parameter.</param>
            <param name="pOutBytes">Points to the buffer to receive the translated string.</param>
            <param name="bufferBytes">the size, in bytes, of the buffer pointed to by the pOutBytes parameter.</param>
            <param name="defaultChar">The character used if a wide character cannot be represented in the specified code page.</param>
            <param name="pDefaultUsed">Flag that indicates whether a default character was used.</param>
            <returns>If the function succeeded, the return value is the number of bytes written to the buffer pointed to by pOutBytes; zero otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.SetFocus(System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.SetFocus&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GetFocus">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GetFocus&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.InvalidateRect(System.IntPtr,System.IntPtr,System.Boolean)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.InvalidateRect&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.GetClientRect(System.IntPtr,Microsoft.VisualStudio.NativeMethods.RECT@)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.GetClientRect&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <!-- Failed to insert some or all of included XML --><include file="doc\NativeMethods.uex" path="docs/doc[@for=&quot;NativeMethods.SendMessage&quot;]/*" />
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.FindMaximumSingleMonitorRectangle(Microsoft.VisualStudio.NativeMethods.RECT,Microsoft.VisualStudio.NativeMethods.RECT@,Microsoft.VisualStudio.NativeMethods.RECT@)">
            <summary>
            Finds the monitor working area that contains the largest subset of a window rectangle.
            </summary>
            <param name="windowRect">The window bounds.</param>
            <param name="screenSubRect">The sub-rectangle of the windowRect for the monitor the window has the most area on.</param>
            <param name="monitorRect">The working size of the monitor that contains the largest portion of the window.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.NativeMethods.FindMaximumSingleMonitorRectangle(System.Windows.Rect,System.Windows.Rect@,System.Windows.Rect@)">
            <summary>
            Finds the monitor working area that contains the largest subset of a window rectangle.
            </summary>
            <param name="windowRect">The window bounds.</param>
            <param name="screenSubRect">The sub-rectangle of the windowRect for the monitor the window has the most area on.</param>
            <param name="monitorRect">The working size of the monitor that contains the largest portion of the window.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.NativeMethods.PictDescBitmap">
            <summary>
            A PICTDESC structure for a bitmap
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.Icon">
            <summary>get icon</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.DisplayName">
            <summary>get display name</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.TypeName">
            <summary>get type name</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.Attributes">
            <summary>get attributes</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.IconLocation">
            <summary>get icon location</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.ExeType">
            <summary>return exe type</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.SysIconIndex">
            <summary>get system icon index</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.LinkOverlay">
            <summary>put a link overlay on icon</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.Selected">
            <summary>show icon in selected state</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.Attr_Specified">
            <summary>get only specified attributes</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.LargeIcon">
            <summary>get large icon</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.SmallIcon">
            <summary>get small icon</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.OpenIcon">
            <summary>get open icon</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.ShellIconSize">
            <summary>get shell size icon</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.PIDL">
            <summary>pszPath is a pidl</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.UseFileAttributes">
            <summary>use passed dwFileAttribute</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.AddOverlays">
            <summary>apply the appropriate overlays</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.SHGFI.OverlayIndex">
            <summary>Get the index of the overlay in the upper 8 bits of the iIcon</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.COWAIT_FLAGS">
            <summary>
            Flags for CoWaitForMultipleHandles
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.COWAIT_FLAGS.COWAIT_NONE">
            <summary>
            Exit when a handle is signalled.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.COWAIT_FLAGS.COWAIT_WAITALL">
            <summary>
            Exit when all handles are signalled AND a message is received.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.COWAIT_FLAGS.COWAIT_ALERTABLE">
            <summary>
            Exit when an RPC call is serviced.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.SettingsScope">
            <summary>
            This enumeration is used to specify the scope of the settings that is retrieved 
            from the SettingsManager class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsScope.Configuration">
            <summary>
            Denotes the installation specific configuration scope. This scope is read-only to the users.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsScope.UserSettings">
            <summary>
            Denotes the user configurable user settings scope.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsScope.Remote">
            <summary>
            Denotes the remote settings scope.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.EnclosingScopes">
            <summary>
            This enumeration is returned as a result of a querying call to GetPropertyScope or GetCollectionScope
            methods of the SettingsManager class to learn the enclosing scopes of the provided property or collection.
            This is a flags enumeration meaning that it is possible that more than one enumeration flag could be set 
            for the corresponding scopes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.EnclosingScopes.None">
            <summary>
            None of the scopes contains the property or the collection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.EnclosingScopes.Configuration">
            <summary>
            Configuration scope contains the property or the collection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.EnclosingScopes.UserSettings">
            <summary>
            User Settings scope contains the property or the collection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.EnclosingScopes.Remote">
            <summary>
            Remote scope contains the property or the collection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.ApplicationDataFolder">
            <summary>
            This enumeration is used to specify the folder that Visual Studio uses to keep various files
            for different purposes like cache files, backup files or template files.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.LocalSettings" -->
        <!-- Badly formed XML comment ignored for member "F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.RoamingSettings" -->
        <!-- Badly formed XML comment ignored for member "F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.Configuration" -->
        <!-- Badly formed XML comment ignored for member "F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.Documents" -->
        <!-- Badly formed XML comment ignored for member "F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.UserExtensions" -->
        <!-- Badly formed XML comment ignored for member "F:Microsoft.VisualStudio.Settings.ApplicationDataFolder.ApplicationExtensions" -->
        <member name="T:Microsoft.VisualStudio.Settings.SettingsManager">
            <summary>
            This is the gateway class to reach for the settings stored inside the Visual Studio. It provides two basic
            functionality. It allows to search for properties and collections inside the scopes. It hands the 
            <see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> and <see cref="T:Microsoft.VisualStudio.Settings.WritableSettingsStore" /> classes for further manipulation of the 
            collections and properties within the scopes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetCollectionScopes(System.String)">
            <summary>
            Outputs the scopes that contain the given collection. If more than one scope contains the collection,
            the corresponding bit flags of those scopes are set.
            </summary>
            <param name="collectionPath">Path of the collection to be searched.</param>
            <returns>Enclosing scopes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetPropertyScopes(System.String,System.String)">
            <summary>
            Outputs the scopes that contain the given property. If more than one scope contains the property,
            the corresponding bit flags of those scopes are set.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property to be searched.</param>
            <returns>Enclosing scopes.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetReadOnlySettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)">
            <summary>
            Provides the <see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> class for the requested scope which can be used for read-only 
            operations.
            </summary>
            <param name="scope">Requested scope.</param>
            <returns><see cref="T:Microsoft.VisualStudio.Settings.SettingsStore" /> instance that can be used for accessing the scope.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetWritableSettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)">
            <summary>
            Provides the <see cref="T:Microsoft.VisualStudio.Settings.WritableSettingsStore" /> class for the requested scope which can be used both for
            reading and writing.
            </summary>
            <param name="scope">Requested scope.</param>
            <exception cref="T:System.ArgumentException">If the given scope is not a writable one.</exception>
            <returns><see cref="T:Microsoft.VisualStudio.Settings.WritableSettingsStore" /> instance that can be used for accessing the scope.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetApplicationDataFolder(Microsoft.VisualStudio.Settings.ApplicationDataFolder)">
            <summary>
            Returns the folder that Visual Studio uses for storing various cache, backup, template, etc. files
            </summary>
            <param name="folder">Requested folder.</param>        
            <returns>Full path of the requested folder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsManager.GetCommonExtensionsSearchPaths">
            <summary>
            Returns the list of folders that Visual Studio uses for installing/discovering machine-wide extensions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.SettingsType">
            <summary>
            Data types of the properties that are stored inside the collections.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsType.Invalid">
            <summary>
            Invalid data type.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsType.Int32">
            <summary>
            Data type used to store 4 byte (32 bits) properties which are Boolean, Int32 and UInt32. Note
            that Boolean is stored 1 byte in the .NET environment but as a property inside the SettingsStore, 
            it is kept as 4 byte value and any value other than 0 is converted to true and 0 is converted to 
            false.        
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsType.Int64">
            <summary>
            Data type used to store 8 byte (64 bit) properties which are Int64 and UInt64.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsType.String">
            <summary>
            Data type used to store the strings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Settings.SettingsType.Binary">
            <summary>
            Data type used to store byte streams (arrays).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.SettingsStore">
            <summary>
            Abstract class for reading/enumerating the selected scope's collections and properties. It is obtained from 
            <see cref="M:Microsoft.VisualStudio.Settings.SettingsManager.GetReadOnlySettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)" /> method.
            
            In the methods of this class if the collection path is provided as the empty string ("") then it 
            denotes the top level collection. If the property name is empty string then it denotes the default 
            property of the collection.
            
            Collections can contain properties and sub-collections. Sub-collections paths are described with the 
            separators like directories in file system. Likewise, separator is '\' (back-slash) character. Example
            of a sub-collection path would be: "Root Collection\Internal Collection\Leaf Collection".
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetBoolean(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" /> as boolean.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>If the underling integer value for the property is non-zero, it returns true and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" /> as boolean.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in otherwise it returns true if the 
            underling integer value is non-zero and false if it is zero.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetInt32(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>Value of the property. If the value was stored as an unsigned integer previously then regular type 
            conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetInt32(System.String,System.String,System.Int32)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as an 
            unsigned integer previously then regular type conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetUInt32(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>Value of the property. If the value was stored as an signed integer previously then regular type 
            conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetUInt32(System.String,System.String,System.UInt32)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as an 
            signed integer previously then regular type conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetInt64(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int64" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>Value of the property. If the value was stored as an unsigned long previously then regular type 
            conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetInt64(System.String,System.String,System.Int64)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int64" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as an 
            unsigned long previously then regular type conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetUInt64(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int64" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>Value of the property. If the value was stored as an signed long previously then regular type 
            conversion sematics applies.</returns>        
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetUInt64(System.String,System.String,System.UInt64)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int64" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in. If the value was stored as an 
            signed long previously then regular type conversion sematics applies.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetString(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.String" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns>Value of the property.</returns> 
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetString(System.String,System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.String" />.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="defaultValue">Value to be returned if the property does not exist.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type.</exception>
            <returns>If the property does not exist, it returns the defaultValue passed in.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetMemoryStream(System.String,System.String)">
            <summary>
            Returns the value of the requested property whose data type is <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Binary" />. In order to
            access the underlying byte array at once <see cref="M:System.IO.MemoryStream.ToArray" /> method can be used.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property is of different type or if it does 
            not exist.</exception>
            <returns><see cref="T:System.IO.MemoryStream" /> for the stream of bytes this property.</returns>  
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetPropertyType(System.String,System.String)">
            <summary>
            Returns the type of the requested property.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException">Throws this exception if the property does not exist.</exception>
            <returns>Type of the property.</returns>  
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.PropertyExists(System.String,System.String)">
            <summary>
            Checks the existance of the property passed in to this method.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>Returns true if the property exists and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.CollectionExists(System.String)">
            <summary>
            Checks the existance of the collection passed in to this method.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <returns>Returns true if the collection exists and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetLastWriteTime(System.String)">
            <summary>
            Provides the last write time of the properties and sub collections immediate to the given collection. The method does 
            report any further changes internal to the sub collections (i.e. non-recursive). The last write time of a collection is 
            updated if properties are created, deleted or their values modified or if a sub collection is created or deleted.         
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Last update time to the collection in <see cref="F:System.DateTimeKind.Local" /> format.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetSubCollectionCount(System.String)">
            <summary>
            Returns the number of sub collections under the given collection.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Number of sub collections is returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetPropertyCount(System.String)">
            <summary>
            Returns the number of properties under the given collection.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Number of properties is returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetSubCollectionNames(System.String)">
            <summary>
            Returns the names of sub collections under the given collection.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Names of sub collections are returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetPropertyNames(System.String)">
            <summary>
            Returns the names of properties under the given collection.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, method throws this exception.</exception>
            <returns>Names of properties are returned.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.SettingsStore.GetPropertyNamesAndValues(System.String)">
            <summary>
            Returns the names of properties along with each properties associated value for the given collection.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <returns>Names and values of properties are returned.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Settings.WritableSettingsStore">
            <summary>
            Abstract class for both reading and writing the selected scope's collections and properties. It is obtained from 
            <see cref="M:Microsoft.VisualStudio.Settings.SettingsManager.GetWritableSettingsStore(Microsoft.VisualStudio.Settings.SettingsScope)" /> method.
            
            This class is derived from the SettingsStore hence it inherits all the functionalities from it. It adds property and
            collection manipulation abilities on top of it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Updates the value of the specified property to the given Boolean value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>  
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetInt32(System.String,System.String,System.Int32)">
            <summary>
            Updates the value of the specified property to the given integer value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>        
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetUInt32(System.String,System.String,System.UInt32)">
            <summary>
            Updates the value of the specified property to the given unsigned integer value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int32" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>        
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetInt64(System.String,System.String,System.Int64)">
            <summary>
            Updates the value of the specified property to the given long value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int64" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception>        
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetUInt64(System.String,System.String,System.UInt64)">
            <summary>
            Updates the value of the specified property to the given unsigned long value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Int64" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception> 
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetString(System.String,System.String,System.String)">
            <summary>
            Updates the value of the specified property to the given string value while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.String" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">New value of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception> 
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.SetMemoryStream(System.String,System.String,System.IO.MemoryStream)">
            <summary>
            Updates the value of the specified property to the bits of the MemoryStream while setting its data type to 
            <see cref="F:Microsoft.VisualStudio.Settings.SettingsType.Binary" />. If the previous data type of the property is different, it overwrites it.
            If the property does not exist it creates one.
            </summary>
            <param name="collectionPath">Path of the collection of the property.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">MemoryStream to set the bits of the property.</param>
            <exception cref="T:System.ArgumentException">If the collection does not exist, this exception is thrown.</exception> 
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.CreateCollection(System.String)">
            <summary>
            Creates the given collection path by creating each nested collection while skipping the ones that already exist. 
            If the full path of collections already exist, the method simply returns.
            </summary>
            <param name="collectionPath">Path of the collection.</param>
            <exception cref="T:System.ArgumentException">If empty string ("") which deis passed to the method it throws this exception.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.DeleteCollection(System.String)">
            <summary>
            Deletes the given collection recursively deleting all of the sub collections and properties in it. If the collection 
            does not exist or an empty string ("") is passed then the method returns false.
            </summary>
            <param name="collectionPath">Path of the collection to be deleted.</param>
            <returns>Result of the deletion.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Settings.WritableSettingsStore.DeleteProperty(System.String,System.String)">
            <summary>         
            Deletes the given property from the collection. If the property or the collection does not exist then the method 
            returns false.
            </summary>
            <param name="collectionPath">Collection that contains the property to be deleted.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>Result of the deletion.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Telemetry.StubTelemetryActivity">
             <summary>
             Stub class equivalent to VSTelemetryActivity. Does not perform any actual operations
             but instead return stubs objects for some methods, while does nothing for the ones
             that do not require return values.
            
             The purpose of this class is for instances where the Telemetry API should NOT exist,
             but still other components are dependant on it. In such case, we simply turn it into
             a No-Op class.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Telemetry.StubTelemetryActivity.AddPropertyBag(Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag)">
            <summary>
            IvsTelemetryPropertyBag doesn't support IDispatch.
            </summary>
            <param name="propertyBag"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Telemetry.StubTelemetryActivity.RemovePropertyBag(Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag)">
            <summary>
            IvsTelemetryPropertyBag doesn't support IDispatch.
            </summary>
            <param name="propertyBag"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Telemetry.StubTelemetryAssetService">
             <summary>
             Stub class equivalent to VSTelemetryAssetService. Does not perform any actual operations
             but instead return stubs objects for some methods, and do nothing for the ones
             that do not require return values.
            
             The purpose of this class is for instances where the Telemetry API should NOT exist,
             but still other components are dependant on it. In such case, we simply turn it into
             a No-Op class.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Telemetry.StubTelemetryContext">
             <summary>
             Stub class equivalent to VSTelemetryContext. Does not perform any actual operations
             but instead return stubs objects for some methods, while does nothing for the ones
             that do not require return values.
            
             The purpose of this class is for instances where the Telemetry API should NOT exist,
             but still other components are dependant on it. In such case, we simply turn it into
             a No-Op class.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Telemetry.StubTelemetryEvent">
             <summary>
             Stub class equivalent to VSTelemetryEvent. Does not perform any actual operations
             but instead return stubs objects for some methods, while does nothing for the ones
             that do not require return values.
            
             The purpose of this class is for instances where the Telemetry API should NOT exist,
             but still other components are dependant on it. In such case, we simply turn it into
             a No-Op class.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Telemetry.StubTelemetryEvent.AddPropertyBag(Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag)">
            <summary>
            IvsTelemetryPropertyBag doesn't support IDispatch.
            </summary>
            <param name="propertyBag"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Telemetry.StubTelemetryEvent.RemovePropertyBag(Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryPropertyBag)">
            <summary>
            IvsTelemetryPropertyBag doesn't support IDispatch.
            </summary>
            <param name="propertyBag"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Telemetry.StubTelemetryEventCorrelation">
             <summary>
             Stub class equivalent to VSTelemetryEventCorrelation.cs. Returns default values for properties.
            
             The purpose of this class is for instances where the Telemetry API should NOT exist,
             but still other components are dependant on it. In such case, we simply turn it into
             a No-Op class.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Telemetry.StubTelemetryPropertyBag">
             <summary>
             Stub class equivalent to VsTelemetryPropertyBag. Does not perform any actual operations
             but instead return stubs objects for some methods, while does nothing for the ones
             that do not require return values.
            
             The purpose of this class is for instances where the Telemetry API should NOT exist,
             but still other components are dependant on it. In such case, we simply turn it into
             a No-Op class.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Telemetry.StubTelemetryService">
             <summary>
             Stub class equivalent to VSTelemetryService. Does not perform any actual operations
             but instead return stubs objects for some methods, while does nothing for the ones
             that do not require return values.
            
             The purpose of this class is for instances where the Telemetry API should NOT exist,
             but still other components are dependant on it. In such case, we simply turn it into
             a No-Op class.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Telemetry.StubTelemetrySession">
             <summary>
             Stub class equivalent to VSTelemetrySession. Does not perform any actual operations
             but instead return stubs objects for some methods, while does nothing for the ones
             that do not require return values.
            
             The purpose of this class is for instances where the Telemetry API should NOT exist,
             but still other components are dependant on it. In such case, we simply turn it into
             a No-Op class.
             </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Automation.AutomationHelpers.WpfSupportsLiveRegions">
            <summary>
            Indicates whether WPF natively supports live regions
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Automation.AutomationHelpers.RaiseLiveRegionChangedEvent(System.Windows.UIElement)">
            <summary>
            Raises a <see cref="F:Microsoft.Internal.VisualStudio.PlatformUI.Automation.AutomationHelpers.LiveRegionChangedEvent" /> for <paramref name="element" />.
            </summary>
            <param name="element">The element to raise the event for</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Automation.AutomationLiveSetting">
            <summary>
            Describes the notification characteristics of a particular live region
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.Automation.AutomationLiveSetting.Off">
            <summary>
            The element does not send notifications if the content of the live region has changed.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.Automation.AutomationLiveSetting.Polite">
            <summary>
            The element sends non-interruptive notifications if the content of the live region has
            changed. With this setting, UI Automation clients and assistive technologies are expected 
            to not interrupt the user to inform of changes to the live region.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.Automation.AutomationLiveSetting.Assertive">
            <summary>
            The element sends interruptive notifications if the content of the live region has changed. 
            With this setting, UI Automation clients and assistive technologies are expected to interrupt 
            the user to inform of changes to the live region.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationEvent">
            <summary>
            An automation event not (yet) supported by WPF.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationEvents">
            <summary>
            Automation events not (yet) natively supported by WPF
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationEvents.RaiseCustomAutomationEvent(Microsoft.Internal.VisualStudio.PlatformUI.Automation.ICustomAutomationEventSource,Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationEvent)">
            <summary>
            Raises a custom event for automation.  Use this extension instead of 
            AutomationPeer.RaiseAutomationEvent(AutomationEvents eventId) when you
            need to raise an automation event that's not natively supported by WPF.
            </summary>
            <param name="customEvent">The event to raise</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationEvents.RaiseLiveRegionChangedEvent(System.Windows.UIElement)">
            <summary>
            Raises a <see cref="F:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationEvents.LiveRegionChangedEvent" /> for <paramref name="element" />.
            The element's automation peer must implement <see cref="T:Microsoft.Internal.VisualStudio.PlatformUI.Automation.ICustomAutomationEventSource" />.
            </summary>
            <param name="element">The element to raise the event for</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationIdentifier">
            <summary>
            A base class for automation identifiers not (yet) supported by WPF
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationIdentifier.CreateAutomationIdentifier``1(System.Int32,System.String)">
            <summary>
            Creates an automation identifier.  AutomationIdentifier constructors are internal
            to PresentationCore so we do this via reflection.
            </summary>
            <param name="id">The id of the event</param>
            <param name="programmaticName">The programmatic name of the event</param>
            <returns>The new automation identifier</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationProperties">
            <summary>
            Automation properties not (yet) natively supported by WPF
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationProperties.AcquireExistingDependencyProperty(System.String)">
            <summary>
            Attempts to find an automation property in the targeted version of WPF
            and if found adds this type as an additional owner of the property.
            </summary>
            <param name="name">The automation property name</param>
            <returns>The WPF automation property with the input name or null if not found.</returns>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationProperties.LiveSettingProperty">
            <summary>
            LiveSetting Property
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationProperties.IsPeripheralProperty">
            <summary>
            IsPeripheral property
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationProperties.PositionInSetProperty">
            <summary>
            PositionInSet property
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationProperties.SizeOfSetProperty">
            <summary>
            SizeOfSet property
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationProperties.MaybeAddProperty(System.Collections.Hashtable,System.Int32,System.Type,System.String)">
            <summary>
            Adds support for a custom automation property to AutomationPeer.
            </summary>
            <param name="s_propertyInfo">The AutomationPeer's s_propertyInfo table</param>
            <param name="propertyId">The ID of the custom automation property</param>
            <param name="delegateType">The value type of <paramref name="s_propertyInfo" /></param>
            <param name="getterMethodName">The name of this class's getter method for <paramref name="propertyId" /></param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationProperties.GetLiveSettingAutomationProperty(System.Windows.Automation.Peers.AutomationPeer)">
            <summary>
            The AutomationPeer-friendly accessor method for the LiveSetting automation attached property
            </summary>
            <param name="peer">The automation peer</param>
            <returns>The value of the CustomAutomationProperties.LiveSetting property attached to the peer's owner</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationProperties.GetIsPeripheralAutomationProperty(System.Windows.Automation.Peers.AutomationPeer)">
            <summary>
            The AutomationPeer-friendly accessor method for the IsPeripheral automation attached property
            </summary>
            <param name="peer">The automation peer</param>
            <returns>The value of the CustomAutomationProperties.IsPeripheral property attached to the peer's owner</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationProperties.GetPositionInSetAutomationProperty(System.Windows.Automation.Peers.AutomationPeer)">
            <summary>
            The AutomationPeer-friendly accessor method for the PositionInSet automation attached property
            </summary>
            <param name="peer">The automation peer</param>
            <returns>The value of the CustomAutomationProperties.PositionInSet property attached to the peer's owner</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationProperties.GetSizeOfSetAutomationProperty(System.Windows.Automation.Peers.AutomationPeer)">
            <summary>
            The AutomationPeer-friendly accessor method for the SizeOfSet automation attached property
            </summary>
            <param name="peer">The automation peer</param>
            <returns>The value of the CustomAutomationProperties.SizeOfSet property attached to the peer's owner</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Automation.CustomAutomationProperty">
            <summary>
            An automation property not (yet) supported by WPF.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Automation.ICustomAutomationEventSource.GetProvider">
            <summary>
            Returns the raw element provider for an automation peer that acts as a custom
            automation event source.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.EmbeddedObjectHelper">
            <summary>
            Static helper class that contains dependency properties used by containers such as Peek to obtain references to
            command handling and user context objects defined by the objects they contain.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfBitmapConverter">
            <summary>
            Data converter class for converting Win32 IVsUIWin32Bitmap UI objects to WpfBitmapUIObject UI objects
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WpfColorUIObject">
            <summary>
            Managed implementation of wrapper IVsUIObject for Colors
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ColorUIObject">
            <summary>
            Managed implementation of wrapper IVsUIObject for Colors
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfColorConverter">
            <summary>
            Data converter class for converting Win32 IVsUIWin32Color UI objects to WpfColorUIObject UI objects
            
            NOTE: In Win32, COLORREFs don't have transparency (even though they have space to store it)
            Converting color objects Win32-&gt;WPF will result in a solid color with no transparency
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WpfToWin32ColorConverter">
            <summary>
            Data converter class for converting WPF IVsUIWpfColor UI objects to Win32 IVsUIWin32Color UI objects 
            
            NOTE: In Win32, COLORREFs don't have transparency (even though they have space to store it)
            Converting color objects WPF-&gt;Win32 will lose transparency information
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ConverterBase">
            <summary>
            Base class for Gel IVsUIObject converters
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ConverterBase.Convert(Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
            <summary>
            Converts <paramref name="source" /> from SourceFormat to TargetFormat
            </summary>
            <param name="source">The object to convert</param>
            <returns>The converted object</returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ConverterBase.SourceFormat">
            <summary>
            The format this converter converts from
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ConverterBase.TargetFormat">
            <summary>
            The format this converter converts to
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ConverterBase.Type">
            <summary>
            The VSUiType that this converter converts
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.CustomPropertyInfo">
            <summary>
            A custom PropertyInfo describing a property on a Gel data source.
            This implementation will call through DataSource.GetValue in order
            to get a presentation-specific, cached property value.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CustomPropertyInfo.op_Equality(Microsoft.Internal.VisualStudio.PlatformUI.CustomPropertyInfo,Microsoft.Internal.VisualStudio.PlatformUI.CustomPropertyInfo)">
            <summary>
            Equality operators that give "left == right" the same semantics as "left.Equals (right)"
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CustomPropertyInfo.op_Inequality(Microsoft.Internal.VisualStudio.PlatformUI.CustomPropertyInfo,Microsoft.Internal.VisualStudio.PlatformUI.CustomPropertyInfo)">
            <summary>
            Matching operator, required if implementing operator ==
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.CustomPropertyInfoBase">
            <summary>
            A custom PropertyInfo describing a property on a Gel data source.
            Only the methods needed to enable WPF data binding are implemented.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.CustomType">
            <summary>
            Custom type used to implement ICustomTypeProvider for Gel data models that
            do not implement property binding interfaces (IVsUIDataSourceShape)
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.CustomTypeBase">
            <summary>
            Common base class for types used to implement ICustomTypeProvider for Gel data models.
            Most of the methods are unimplemented and the overrides are sealed for performance.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CustomTypeBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CustomTypeBase.GetPropertyInfo(System.String)">
            <summary>
            Implemented by derived classes to supply the PropertyInfo for the requested
            property.
            </summary>
            <param name="propertyName">The name of the requested property</param>
            <returns>PropertyInfo for the requested property</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CustomTypeBase.GetAllProperties">
            <summary>
            Implemented by derived classes to supply PropertyInfos for all properties
            </summary>
            <returns>Array of all properties</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.CreateInstance(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
            <summary>
            Create a DataSource wrapper of the appropriate type for the given parameters
            </summary>
            <param name="innerDataSource">The datasource to be wrapped</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.CreateInstance(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.Windows.Window,System.IServiceProvider)">
            <summary>
            Create a DataSource wrapper of the appropriate type for the given parameters
            If <paramref name="window" /> is non-null, then the DataSource will automatically
            close when Window.Closed is raised.
            If <paramref name="provider" /> is null, then the global service provider will
            be used to find any required data converters.
            </summary>
            <param name="innerDataSource">The datasource to be wrapped</param>
            <param name="window">Any associated Window (may be null)</param>
            <param name="provider">Any associated service provider (may be null)</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.EventSubscribersSize">
            <summary>
            Needed for unit tests
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.op_Equality(Microsoft.Internal.VisualStudio.PlatformUI.DataSource,Microsoft.Internal.VisualStudio.PlatformUI.DataSource)">
            <summary>
            Equality operators that give "left == right" the same semantics as "left.Equals (right)"
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.op_Inequality(Microsoft.Internal.VisualStudio.PlatformUI.DataSource,Microsoft.Internal.VisualStudio.PlatformUI.DataSource)">
            <summary>
            Inequality operators that give "left != right" the same semantics as "!left.Equals (right)"
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.RootInnerSource">
            <summary>
            A DataSource can wrap any IVsUIDataSource, including other DataSources.
            This property returns the fundamental data source, to facilitate identity
            comparison.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Dispose">
            <summary>
            Disposes the current object then suppresses further finalization.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.IsDisposed">
            <summary>
            Returns whether the object has been disposed once
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DataSource._isDisposalInProgress">
            <summary>
            Protects against reentry during disposal
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Dispose(System.Boolean)">
            <summary>
            Standard virtual overload for <see cref="T:System.IDisposable" /> pattern
            </summary>
            <remarks>
            Derived classes are expected to override this method to provide custom dispose handling.
            When <paramref name="disposing" /> is <c>false</c>, derived classes should assume they are being called from the finalizer.
            </remarks>
            <param name="disposing"><c>True</c> means this is a call to <see cref="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.Dispose" />.  <c>False</c> means it has been called from the finalizer.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.SetValue(System.String,System.Boolean)">
            <summary>
            Overload of SetValue for Boolean properties
            </summary>
            <param name="name">The name of the property to set</param>
            <param name="value">The new value of the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.GetPropertyCacheSynchronizer">
            <summary>
            Returns a synchronizing object for the accesses to the propertyCache field.
            It needs to be disposed right after you're done with propertyCache field because
            otherwise other threads will block if they need to access the propertyCache field.
            </summary>        
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.ShapeProvider">
            <summary>
            The inner IVsUIDataSource may optionally implement IVsUIDataSourceShapeProvider
            for low-overhead property binding. Note that low-overhead property binding
            bypasses the caching and format conversion provided by the DataSource class so
            it should be used only for primitive, built-in types (bool, string, int, etc.)
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.InnerOwner(System.Object)">
            <summary>
            Access the inner IVsUIDataSource for the given owner object.
            It is assumed that the owner is a DataSource and the owning
            'source' or 'target' of a databound property.
            </summary>
            <param name="owner">The owner of a bound property. Must be a DataSource.</param>
            <returns>The inner Gel datasource</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.SystemTypeFromGelType(System.String)">
            <summary>
            Convert a Gel type string into a System.Type if possible
            </summary>
            <param name="type">The Gel type string</param>
            <returns>A System.Type matching the given Gel type string</returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.IsPropertyAccessSynchronized">
            <summary>
            Derived classes may override and return true if they may be making free-threaded updates.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.CreateCompatibleInstance(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
            <summary>
            Derived classes should override this to return a new instance of their derived class
            suitable for wrapping properties of type DataSource. When overridden, the base
            implementation should typically not be called.
            </summary>
            <param name="instance">The inner Gel DataSource</param>
            <returns>A new instance of the derived class wrapping the given inner data source</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.CreateCompatibleCollection(Microsoft.VisualStudio.Shell.Interop.IVsUICollection)">
            <summary>
            Derived classes should override this to return a new instance of a suitable
            collection wrapper. The derived collection class should further implement
            CreateCompatibleDataSource and return an instance of the derived class. When
            overridden, the base implementation should typically not be called.
            </summary>
            <param name="collection">The collection obtained to be wrapped</param>
            <returns>A new collection instance wrapping the given inner collection</returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSource.ServiceProvider">
            <summary>
            Obtain the ServiceProvider used to convert values from one format to another.
            The base implementation just returns the global service provider which is
            sufficient for most purposes.
            </summary>
            <returns>The service provider to use</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceBoundProperty">
            <summary>
            A custom property implementation which uses low-overhead binding over
            a Gel DataSource.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceBoundBooleanProperty">
            <summary>
            Specialization of low-overhead property binding for bool
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceBoundStringProperty">
            <summary>
            Specialization of low-overhead property binding for string
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceBoundInt32Property">
            <summary>
            Specialization of low-overhead property binding for int
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceBoundDWordProperty">
            <summary>
            Specialization of low-overhead property binding for uint
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceBoundQWordProperty">
            <summary>
            Specialization of low-overhead property binding for ulong
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceBoundDoubleProperty">
            <summary>
            Specialization of low-overhead property binding for double
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceBoundGuidProperty">
            <summary>
            Specialization of low-overhead property binding for Guid
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.op_Equality(Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection,Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection)">
            <summary>
            Equality operators that give "left == right" the same semantics as "left.Equals (right)"
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.op_Inequality(Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection,Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection)">
            <summary>
            Inequality operators that give "left != right" the same semantics as "!left.Equals (right)"
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.RootInnerCollection">
            <summary>
            A DataSource can wrap any IVsUIDataSource, including other DataSources.
            This property returns the fundamental data source, to facilitate identity
            comparison.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.CreateInstance(Microsoft.VisualStudio.Shell.Interop.IVsUICollection)">
            <summary>
            Creates an instance of a DataSourceCollection.  The DataSourceCollection
            will be read-only if <paramref name="uiCollection" /> cannot be converted
            to IVsUIDynamicCollection.
            </summary>
            <param name="uiCollection">Gel collection to wrap.</param>
            <returns>The wrapper for <paramref name=" uiCollection" />.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.CreateInstance(Microsoft.VisualStudio.Shell.Interop.IVsUICollection,System.Windows.Window,System.IServiceProvider)">
            <summary>
            Creates an instance of a DataSourceCollection.  The DataSourceCollection
            will be read-only if <paramref name="uiCollection" /> cannot be converted
            to IVsUIDynamicCollection.
            If <paramref name="window" /> is non-null, then the DataSource will automatically
            close when Window.Closed is raised.
            If <paramref name="provider" /> is null, then the global service provider will
            be used to find any required data converters.
            </summary>
            <param name="uiCollection">Gel collection to wrap.</param>
            <param name="window">Any associated Window (may be null)</param>
            <param name="provider">Any associated service provider (may be null)</param>
            <returns>The wrapper for <paramref name=" uiCollection" />.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.CreateReadOnlyInstance(Microsoft.VisualStudio.Shell.Interop.IVsUICollection)">
            <summary>
            Creates an instance of a DataSourceCollection.  The DataSourceCollection
            will be read-only regardless of whether <paramref name="uiCollection" /> 
            can be converted to IVsUIDynamicCollection.
            </summary>
            <param name="uiCollection">Gel collection to wrap.</param>
            <returns>The wrapper for <paramref name=" uiCollection" />.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Dispose">
            <summary>
            Disposes the current object then suppresses further finalization.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.IsDisposed">
            <summary>
            Returns whether the object has been disposed once
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection._isDisposalInProgress">
            <summary>
            Protects against reentry during disposal
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Dispose(System.Boolean)">
            <summary>
            Standard virtual overload for <see cref="T:System.IDisposable" /> pattern
            </summary>
            <remarks>
            Derived classes are expected to override this method to provide custom dispose handling.
            When <paramref name="disposing" /> is <c>false</c>, derived classes should assume they are being called from the finalizer.
            </remarks>
            <param name="disposing"><c>True</c> means this is a call to <see cref="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.Dispose" />.  <c>False</c> means it has been called from the finalizer.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCollection.CreateCompatibleDataSource(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource)">
            <summary>
            Derived classes should override this to return a new instance of their derived class
            suitable for wrapping properties of type DataSource. When overridden, the base
            implementation should typically not be called.
            </summary>
            <param name="itemDataSource">The inner Gel DataSource to be wrapped</param>
            <returns>A new instance of the derived class wrapping the given inner data source</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceCreationPolicy">
            <summary>
            Encapsulates the arguments used for creating DataSource and DataSourceCollection
            wrappers.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceFactoryHelper.CreateDataSource(System.Guid,System.UInt32)">
            <summary>
            Creates a data source using a data source factory.
            </summary>
            <param name="factoryGuid">The data source factory GUID</param>
            <param name="dataSourceID">The data source identifier</param>
            <returns>The data source, or null if an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceFactoryHelper.CreateDataSource(Microsoft.Internal.VisualStudio.PlatformUI.FactoryElementID)">
            <summary>
            Creates a data source using a data source factory.
            </summary>
            <param name="factoryGuid">The data source factory GUID</param>
            <param name="dataSourceID">The data source identifier</param>
            <returns>The data source, or null if an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceFactoryHelper.CreateDataSourceAsync(System.Guid,System.UInt32)">
            <summary>
            Creates a data source using a data source factory.
            </summary>
            <param name="factoryGuid">The data source factory GUID</param>
            <param name="dataSourceID">The data source identifier</param>
            <returns>The data source</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceFactoryHelper.CreateDataSourceAsync(Microsoft.Internal.VisualStudio.PlatformUI.FactoryElementID)">
            <summary>
            Creates a data source using a data source factory.
            </summary>
            <param name="elementID">The composite ID describing the data source</param>
            <returns>The data source</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceShapeCustomType">
            <summary>
            Custom type used to implement ICustomTypeProvider for Gel data models which provide
            low-overhead property bindings via the IVsUIDataSourceShape interface.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.EnumerablePropertiesCollection">
            <summary>
            IEnumerable wrapper for IVsUIEnumDataSourceProperties
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.EnumerableVerbsCollection">
            <summary>
            IEnumerable wrapper for IVsUIEnumDataSourceVerbs
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IconConverter">
            <summary>
            Base class for icon converters
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IContentLifetimeControl.ShouldDisposeContents">
            <summary>
            Indicates whether the implementing object should automatically dispose of its contents.
            If this property is set to true, the timing of the automatic disposal is defined
            by the implementing object.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWinFormsImageListConverter">
            <summary>
            Converts Win32 HIMAGELIST (Pointer) to System.Windows.Forms.ImageList containing
            System.Drawing.Icons 
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsToWin32ImageListConverter">
            <summary>
            Converts Windows Forms System.Windows.Forms.ImageList to Win32's HIMAGELIST pointer
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.MruCache`2">
            <summary>
            An MruCache maintains a cache of recently used items.
            It is a dictionary with a bounded capacity. If a new entry is added to
            the dictionary when it is full, the oldest (least recently used) entry
            is discarded to make room.
            The performance characteristics for access and insertion are the same
            as Dictionary. Removal is not supported.
            </summary>
            <typeparam name="TKey">Type of the key into the cache</typeparam>
            <typeparam name="TValue">Type of values stored in the cache</typeparam>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.MruCache`2.Count">
            <summary>
            Ths number of entries in the cache
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.MruCache`2.Clear">
            <summary>
            Remove all entries
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.MruCache`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">The value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter.</param>
            <returns>true if the cache contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.MruCache`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the cache.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.MruCache`2.OnCacheMiss(`0)">
            <summary>
            Called by the base implementation when TryGetValue fails to find an entry in the cache
            </summary>
            <param name="key">The key of the element that is not in the cache</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.MruCache`2.OnDiscard(`0)">
            <summary>
            Called by the base implementation when the cache is full and Add is called
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.MruCache`2.DiscardOldest">
            <summary>
            Discard the oldest 
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.MruCache`2.IsFull">
            <summary>
            Check if the map is at capacity
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.MruCache`2.Entry">
            <summary>
            The values stored in the map contain the user stored data (TValue)
            and a node in our linked list.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifier">
            <summary>
            A {GUID:DWORD} pair
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifierMap">
            <summary>
            The ShapeIdentifierMap is an index of recently seen data-source shapes. It
            allows us to cache custom types.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifierMap.GetCustomType(Microsoft.Internal.VisualStudio.PlatformUI.IUIDataSource)">
            <summary>
            This is the main method for callers. It retrieves a custom Type
            from the map, or creates a new entry and caches it.
            </summary>
            <param name="datasource">The datasource for which you want property descriptors</param>
            <returns>The custom type for this datasource</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ShapeIdentifierMap.CreateCustomType(Microsoft.Internal.VisualStudio.PlatformUI.IUIDataSource)">
            <summary>
            Given a datasource, create a custom type representing its available properties
            </summary>
            <param name="datasource">The datasource</param>
            <returns>The custom type</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.SyncObjectLock">
            <summary>
            Used to create a synchronization with respect to the object passed in. This object
            is used in place of C#'s lock statement when locking is conditional (i.e. it might
            be skipped). So it can be used inside using statement so that once the executiion
            leaves its block synchronization object is automatically released.
            Note that this class throws InvalidOperationException if its Disposal is forgotten
            as it could cause very serious blocks on other threads.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.TypeMap.map">
            <summary>
            Performance: The collection is small and a fixed size, use a plain array.
            The order is determined by actual usage data. The most frequently
            accessed values appear first.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TypeMap.VsUITypeFromType(System.Type)">
            <summary>
            Get the corresponding UI type string for a given System.Type
            </summary>
            <param name="type">The System.Type to look up</param>
            <returns>The corresponding UI type string or null if one cannot be found</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TypeMap.TypeFromVsUIType(System.String)">
            <summary>
            Given a UI type string, return the appropriate System.Type
            </summary>
            <param name="typeName">The UI type string</param>
            <returns>The System.Type for that UI type or null if the UI type is unrecognized</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TypeMap.GetDefaultValueOfBuiltInUIType(System.String)">
            <summary>
            Given a UI type, create an object that represents the default value of that type
            </summary>
            <param name="typeName">UI type string</param>
            <returns>The default value, or null if the type string was not recognized</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWinFormsIconConverter">
            <summary>
            Conveter for Win32 HICON to System.Drawing.Icon
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ToWpfIconConverter">
            <summary>
            Conveter for Win32 HICON to System.Windows.Media.Imaging.BitmapSource
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsToWin32IconConverter">
            <summary>
            Converts System.Drawing.Icon to an HICON 
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WpfIconConverter">
            <summary>
            Base class for WPF icon converters
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WpfToWin32IconConverter">
            <summary>
            Converts System.Windows.Media.Imaging.BitmapSource to an HICON 
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WpfToWinFormsIconConverter">
            <summary>
            Converts System.Windows.Media.Imaging.BitmapSource to a System.Drawing.Icon
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.FrugalMapBase`1.Search(`0)">
            <summary>
            Looks for an entry that contains the given key, null is returned if the
            key is not found.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.FrugalMapBase`1.Sort">
            <summary>
            A routine used by enumerators that need a sorted map
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.FrugalMapBase`1.GetKeyValuePair(System.Int32,`0@,System.Object@)">
            <summary>
            A routine used by enumerators to iterate through the map
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.FrugalMapBase`1.Iterate(System.Collections.ArrayList,Microsoft.Internal.VisualStudio.PlatformUI.FrugalMapIterationCallback{`0})">
            <summary>
            A routine used to iterate through all the entries in the map
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.FrugalMapBase`1.Promote(Microsoft.Internal.VisualStudio.PlatformUI.FrugalMapBase{`0})">
            <summary>
            Promotes the key/value pairs in the current collection to the next larger
            and more complex storage model.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.FrugalMapBase`1.Count">
            <summary>
            Size of this data store
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.FrugalMapBase`1.Clear">
            <summary>
            Clears all data from the map
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.SingleObjectMap`1">
            <summary>
            A simple class to handle a single key/value pair
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ThreeObjectMap`1">
            <summary>
            A simple class to handle a single object with 3 key/value pairs.  The pairs are stored unsorted
            and uses a linear search.  Perf analysis showed that this yielded better memory locality and
            perf than an object and an array.
            </summary>
            <remarks>
            This map inserts at the last position.  Any time we add to the map we set _sorted to false. If you need
            to iterate through the map in sorted order you must call Sort before using GetKeyValuePair.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.SixObjectMap`1">
            <summary>
            A simple class to handle a single object with 6 key/value pairs.  The pairs are stored unsorted
            and uses a linear search.  Perf analysis showed that this yielded better memory locality and
            perf than an object and an array.
            </summary>
            <remarks>
            This map inserts at the last position.  Any time we add to the map we set _sorted to false. If you need
            to iterate through the map in sorted order you must call Sort before using GetKeyValuePair.
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ArrayObjectMap`1">
            <summary>
            A simple class to handle an array of between 6 and 12 key/value pairs.  It is unsorted
            and uses a linear search.  Perf analysis showed that this was the optimal size for both
            memory and perf.  The values may need to be adjusted as the CLR and Avalon evolve.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.Internal.VisualStudio.PlatformUI.FrugalMapIterationCallback`1" -->
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject">
            <summary>
            Representation of a Data Source in a Gel data model. Has similar usage and characteristics
            to a DependencyObject.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject.GetValue(Microsoft.Internal.VisualStudio.PlatformUI.GelProperty)">
            <summary>
            Get the value of the given GelProperty for this GelDependencyObject.
            </summary>
            <param name="descriptor">GelProperty whose value should be obtained.</param>
            <returns>Value of the given GelProperty for this GelDependencyObject.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject.GetValue``1(Microsoft.Internal.VisualStudio.PlatformUI.GelProperty)">
            <summary>
            Get the value of type T of the given GelProperty for this GelDependencyObject.
            </summary>
            <typeparam name="T">Type of the value to obtain.</typeparam>
            <param name="descriptor">GelProperty whose value should be obtained.</param>
            <returns>Value of the given GelProperty for this GelDependencyObject.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject.SetValue(Microsoft.Internal.VisualStudio.PlatformUI.GelProperty,System.Object)">
            <summary>
            Set the value of the given GelProperty for this GelDependencyObject.
            </summary>
            <param name="descriptor">GelProperty whose value should be set.</param>
            <param name="newValue">New value for the GelProperty.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject.SetValue(Microsoft.Internal.VisualStudio.PlatformUI.GelProperty,System.Boolean)">
            <summary>
            Set the value of the given GelProperty for this GelDependencyObject.
            Overloaded for bool to avoid needless boxing of Boolean values.
            </summary>
            <param name="descriptor">GelProperty whose value should be set.</param>
            <param name="newValue">New Boolean value for the GelProperty.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject.ResetValue(Microsoft.Internal.VisualStudio.PlatformUI.GelProperty)">
            <summary>
            Reset the value of the given GelProperty for this GelDependencyObject to the default.
            </summary>
            <param name="descriptor">GelProperty whose value should be reset.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject.Invoke(Microsoft.Internal.VisualStudio.PlatformUI.GelVerb,System.Object)">
            <summary>
            Invoke a given GelVerb defined in this GelDependencyObject.
            </summary>
            <param name="descriptor">GelVerb to invoke.</param>
            <param name="param">Parameter passed to the GelVerb on invocation.</param>
            <returns>Result of the invocation.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject.Invoke(System.String,System.Object)">
            <summary>
            Invoke a given GelVerb defined in this GelDependencyObject.
            </summary>
            <param name="verb">Name of the verb to invoke.</param>
            <param name="param">Parameter passed to the verb on invocation.</param>
            <returns>Result of the invocation.</returns>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject._isCloseInProgress">
            <summary>
            Protects against reentry during close
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.GelIndirectPropertyMetadata">
            <summary>
            Indirect properties are read-only and supply a 'getter' function for
            retrieving the value at runtime.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelIndirectPropertyMetadata.#ctor(System.String,System.UInt32,Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyGetterCallback)">
            <summary>
            Construct metadata for a new indirect property.
            </summary>
            <param name="type">The property's type (VsUIType)</param>
            <param name="format">The property's data format</param>
            <param name="getter">The getter function used to retrieve values for instances of this property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelIndirectPropertyMetadata.#ctor(System.String,System.UInt32,Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyGetterCallback,System.Boolean)">
            <summary>
            Construct metadata for a new indirect property.
            </summary>
            <devnote>The RejectingValidator is used to make instances of this property read-only</devnote>
            <param name="type">The property's type (VsUIType)</param>
            <param name="format">The property's data format</param>
            <param name="getter">The getter function used to retrieve values for instances of this property</param>
            <param name="oneTime">true if the value is expensive to retrieve and should be cached in the dependency object</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelIndirectPropertyMetadata.GetDefaultValue(Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject,System.Boolean@)">
            <summary>
            Get the default value for this property. This calls through the getter function to
            retreive the value.
            </summary>
            <param name="owner">The owning dependency object. This is passed into the getter.</param>
            <param name="saveResult">Set to true if the value should be cached by the owning object.</param>
            <returns>The value retrieved from the getter.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelIndirectPropertyMetadata.RejectingValidator(Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject,System.Object)">
            <summary>
            The RejectingValidator rejects all property changes. This makes it a read-only
            property.
            </summary>
            <param name="owner">The owning dependency object (ignored)</param>
            <param name="newValue">The proposed new value for this property (ignored)</param>
            <returns>false always</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.GelLazyInitializedPropertyMetadata">
            <summary>
            Lazy initialized properties are properties that supply a 'getter' function for
            retrieving and initializing the value at runtime, only when the property is first accessed or reset via IVsUIDataSource.ResetValue.
            These are somewhat similar to one-time indirect properties, with the difference that indirect properties cannot be set 
            (those use a RejectingValidator meaning that any SetValue call fails silently), whereas lazy-initialized properties can be set
            with new values at any time.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelLazyInitializedPropertyMetadata.#ctor(System.String,System.UInt32,Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyGetterCallback)">
            <summary>
            Construct metadata for a new lazy initialized property.
            </summary>
            <param name="type">The property's type (VsUIType)</param>
            <param name="format">The property's data format</param>
            <param name="getter">The getter function used to retrieve values for instances of this property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelLazyInitializedPropertyMetadata.GetDefaultValue(Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject,System.Boolean@)">
            <summary>
            Get the default value for this property. This calls through the getter function to
            retreive the value.
            </summary>
            <param name="owner">The owning dependency object. This is passed into the getter.</param>
            <param name="saveResult">Set to true if the value should be cached by the owning object.</param>
            <returns>The value retrieved from the getter.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.GelProperty">
            <summary>
            Representation of a property in a Gel data model. Has similar usage and characteristics
            to a DependencyProperty.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.GelProperty.Metadata">
            <summary>
            Get/Set metadata for this GelProperty.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.GelProperty.UnsetValue">
            <summary>
            Value that indicates that a value has not been set on a GelProperty.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelProperty.FromName(System.Type,System.String)">
            <summary>
            Get the GelProperty with the given name that was registered on the given Type.
            </summary>
            <remarks>
            Throws System.Collections.Generic.KeyNotFoundException if name is not found.
            </remarks>
            <param name="ownerType">Type of the property owner.</param>
            <param name="name">Name of the property.</param>
            <returns>GelProperty registered for the given Type with the given name.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelProperty.GetRegisteredProperties(System.Type,System.Boolean)">
            <summary>
            Gets an enumeration of all registered properties for the given Type.
            </summary>
            <param name="ownerType">Type whose properties should be obtained.</param>
            <param name="includeBaseTypes">Indicates if we should search properties in base types.</param>
            <returns>Enumeration of all registered properties for the given Type.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelProperty.RegisterInternal(System.String,System.Type,Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyMetadata)">
            <summary>
            Register a Gel property.
            </summary>
            <param name="name">Name of the property</param>
            <param name="ownerType">Owning type for this property</param>
            <param name="metadata">Metadata</param>
            <returns>The newly registered property</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelProperty.RegisterIndirectProperty``1(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.__VSUIDATAFORMAT,Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyGetterCallback)">
            <summary>
            Register a property with a getter callback. The getter will be invoked each time
            the property's value is needed.
            This is a readonly property. Calls to SetValue on this property will silently fail
            without changing the value.
            This may be used for computed or synthesized values, such as extracting individual
            boolean flags out of a bitfield.
            </summary>
            <typeparam name="TOwner">Owning type. This should be a type derived from GelDependencyObject.</typeparam>
            <param name="name">The new property's name</param>
            <param name="type">The new property's datatype (VsUIType)</param>
            <param name="format">The new property's data format</param>
            <param name="getter">Getter function</param>
            <returns>The registered property</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelProperty.RegisterIndirectProperty``1(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.__VSUIDATAFORMAT,Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyGetterCallback,System.Boolean)">
            <summary>
            Register a property with a getter callback. The getter will be invoked
            when the property's value is first needed. After that, the value is cached
            for fast retrieval. However, the the getter will be called again if the
            property is reset via a call to ResetValue.
            This is a readonly property. Calls to SetValue on this property will silently fail
            without changing the value.
            </summary>
            <typeparam name="TOwner">Owning type. This should be a type derived from GelDependencyObject.</typeparam>
            <param name="name">The new property's name</param>
            <param name="type">The new property's datatype (VsUIType)</param>
            <param name="format">The new property's data format</param>
            <param name="getter">The one-time getter function</param>
            <param name="oneTime"></param>
            <returns>The registered property</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Internal.VisualStudio.PlatformUI.GelProperty.CastToGelPropertyGetterCallback``1(System.Func{Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject,``0})" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Internal.VisualStudio.PlatformUI.GelProperty.CastToGelPropertyGetterCallback(System.Func{Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject,System.Object},System.Type)" -->
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelProperty.RegisterIndirectDataSourceProperty``1(System.String,System.Func{Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject,System.Object})">
            <summary>
            Register a data source with a getter callback.
            NOTE: The getter is declared as returning an <code>object</code> due to the compiler failing to use an
            embedded interop type in a generic Func declaration from an external assembly.
            However, be sure to always return an IVsUIDataSource object from the getter.
            </summary>
            <typeparam name="TOwner">Owning type. This should be a type derived from GelDependencyObject.</typeparam>
            <param name="name">The new property's name.</param>
            <param name="getter">The getter function. Make sure to always return an IVsUIDataSource object.</param>
            <returns>The registered property.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelProperty.RegisterIndirectCollectionProperty``1(System.String,System.Func{Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject,System.Object})">
            <summary>
            Register a collection with a getter callback.
            NOTE: The getter is declared as returning an <code>object</code> due to the compiler failing to use an
            embedded interop type in a generic Func declaration from an external assembly.
            However, be sure to always return an IVsUICollection object from the getter.
            </summary>
            <typeparam name="TOwner">Owning type. This should be a type derived from GelDependencyObject.</typeparam>
            <param name="name">The new property's name</param>
            <param name="getter">The getter function. Make sure to always return an IVsUICollection object.</param>
            <returns>The registered property.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelProperty.RegisterLazyInitializedProperty``1(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.__VSUIDATAFORMAT,Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyGetterCallback)">
            <summary>
            Register a property with a getter callback. The getter will be invoked
            when the property's value is first needed (lazy initialized). 
            After that, the value is cached for fast retrieval. 
            However, the the getter will be called again if the property is reset via a call to ResetValue.
            </summary>
            <typeparam name="TOwner">Owning type. This should be a type derived from GelDependencyObject.</typeparam>
            <param name="name">The new property's name</param>
            <param name="type">The new property's datatype (VsUIType)</param>
            <param name="format">The new property's data format</param>
            <param name="getter">The getter function</param>
            <returns>The registered property</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyChangedEventArgs">
            <summary>
            EventArgs for property change events from GelDependencyObject
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyChangedEventArgs.#ctor(Microsoft.Internal.VisualStudio.PlatformUI.GelProperty,System.Object,System.Object)">
            <summary>
            Constructs a GelPropertyChangedEventArgs instance.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyChangedEventArgs.Property">
            <summary>
            Property that changed.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyChangedEventArgs.OldValue">
            <summary>
            Old value.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyChangedEventArgs.NewValue">
            <summary>
            New value.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyEnumerator">
            <summary>
            Represents an enumeration of GelProperty objects.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyMetadata">
            <summary>
            Represents metadata for a given GelProperty.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyMetadataWithDefaultValueCreator">
            <summary>
            Represents metadata for a given GelProperty whose default value is created on demand by invoking a constructor function.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyMetadataWithDefaultValueCreator.GetDefaultValue(Microsoft.Internal.VisualStudio.PlatformUI.GelDependencyObject,System.Boolean@)">
            <summary>
            Evaluate the functor to create the default value
            </summary>
            <param name="owner">Ignored</param>
            <param name="saveResult">always true</param>
            <returns>The created value</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.GelRegisteredObject">
            <summary>
            Representation of a Gel object in a Gel data model that can be registered in a GelDependencyObject.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.GelRegisteredObject.Name">
            <summary>
            Name of the GelRegisteredObject.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.GelRegisteredObject.GlobalIndex">
            <summary>
            Global index of this GelRegisteredObject.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.GelRegisteredObject.OwnerType">
            <summary>
            Type that owns this GelRegisteredObject.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelRegisteredObject.GetTypeHierarchy(System.Type)">
            <summary>
            Get an enumerator for the type hierarchy starting at the given type.
            </summary>
            <param name="type">The derived type to start the enumeration</param>
            <returns>Enumerator for the type hierarchy</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.GelUIObject">
            <summary>
            Represents a Gel object.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelUIObject.#ctor(System.Object,Microsoft.Internal.VisualStudio.PlatformUI.GelPropertyMetadata)">
            <summary>
            Construct a GelUIObject instance.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VerbActionCallback">
            <summary>
            Delegate that handles a Verb action.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.GelVerb">
            <summary>
            Representation of a verb in a Gel data model. 
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelVerb.FromName(System.Type,System.String)">
            <summary>
            Get the GelVerb with the given name that was registered on the given Type.
            </summary>
            <remarks>
            Throws System.Collections.Generic.KeyNotFoundException if name is not found.
            </remarks>
            <param name="ownerType">Type of the verb owner.</param>
            <param name="name">Name of the verb.</param>
            <returns>GelVerb registered for the given Type with the given name.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelVerb.GetRegisteredVerbs(System.Type,System.Boolean)">
            <summary>
            Gets an enumeration of all registered verbs for the given Type.
            </summary>
            <param name="ownerType">Type whose verbs should be obtained.</param>
            <param name="includeBaseTypes">Indicates if we should search verbs in base types.</param>
            <returns>Enumeration of all registered verbs for the given Type.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GelVerb.Register``1(System.String,Microsoft.Internal.VisualStudio.PlatformUI.VerbActionCallback)">
            <summary>
            Register a GelVerb for a given TOwner.
            </summary>
            <typeparam name="TOwner">Owner of the registered GelVerb.</typeparam>
            <param name="name">Name of the Verb to register.</param>
            <param name="action">Callback that is called when the verb is invoked.</param>
            <returns>Registered GelVerb.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.GelVerbEnumerator">
            <summary>
            Represents an enumeration of GelVerb objects.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.BuiltInPropertyValue.CreateEmptyValue(System.String)">
            <summary>
            Create empty value of the specified type, to be used with fallback properties
            </summary>
            <param name="type"></param>
            <returns>An empty value of the specified type</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.CookieTraits`1">
            <summary>
            This class defines the default type, range for cookies handed out by CCookieTable.
            </summary>
            <typeparam name="T">Cookie type</typeparam>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.CookieTableLock">
            <summary>
            Note: By using a struct we can avoid heap allocation, but users must
            be careful NOT to copy these around. The usage pattern is expected to
            be limited to a "using" statement within a function.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.#ctor(Microsoft.Internal.VisualStudio.PlatformUI.CookieTraits{`0})">
            <summary>
            Constructor, initialize the current cookie
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.Table">
            <summary>
            Returns the dictionary holding active cookie/value pairs, creating it if necessary.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.PendingMods">
            <summary>
            Returns the PendingMods structure for the cookie table, creating it if necessary.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.HasPendingMods">
            <summary>
            Determines if the cookie table has pending modifications.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.NextCookie">
            <summary>
            Returns next available cookie
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.Insert(`1)">
            <summary>
            Insert a new element in the cookie table
            </summary>
            <param name="value">The new element to insert</param>
            <returns>The cookie associated with the new element</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.Remove(`0)">
            <summary>
            Remove the value identified by the specified cookie from the table
            </summary>
            <param name="cookie">Cookie to remove</param>
            <returns>Whether the cookie was removed from the table</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.Clear">
            <summary>
            Removes all elements in the cookie table
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.ContainsCookie(`0)">
            <summary>
            Indicates whether <paramref name="cookie" /> is in the cookie table.
            </summary>
            <param name="cookie">The cookie to check</param>
            <returns>True if the cookie is in the table, false if not.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.ForEach(Microsoft.Internal.VisualStudio.PlatformUI.CookieTableCallback{`0,`1})">
            <summary>
            Execute the specified callback for each of the remaining elements in the cookie table
            </summary>
            <param name="callback">The callback function to call for each iterated element</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.ForEach(Microsoft.Internal.VisualStudio.PlatformUI.CookieTableCallback{`0,`1},System.Boolean)">
            <summary>
            Execute the specified callback for each of the elements in the cookie table,
            allows to call back even for elements that are removed during the iteration
            </summary>
            <param name="callback">The callback function to call for each iterated element</param>
            <param name="skipRemoved">Whether the callback should be called or not for elemens removed during the iteration</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.ForEach``1(System.Action{`0,`1,``0},``0)">
            <summary>
            Execute the specified callback for each of the remaining elements in the cookie table
            </summary>
            <param name="callback">The callback function to call for each iterated element</param>
            <param name="state">Additional state to pass to the callback function</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.ForEach``1(System.Action{`0,`1,``0},``0,System.Boolean)">
            <summary>
            Execute the specified callback for each of the elements in the cookie table,
            allows to call back even for elements that are removed during the iteration
            </summary>
            <param name="callback">The callback function to call for each iterated element</param>
            <param name="state">Additional state to pass to the callback function</param>
            <param name="skipRemoved">Whether the callback should be called or not for elemens removed during the iteration</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.TryGetValue(`0,`1@)">
            <summary>
            Checks whether the specified cookie is still in the table and returns the associated value
            </summary>
            <param name="cookie">cookie to search</param>
            <param name="value">found value</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.Cookies">
            <summary>
            Returns a collection of cookies held by the CookieTable
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.Item(`0)">
            <summary>
            Indexer returning the value for the specified cookie.  An ArgumentException is thrown
            if the cookie isn't in the table.
            </summary>
            <param name="cookie">Cookie to search</param>
            <returns>Value for <paramref name="cookie" /></returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.Size">
            <summary>
            Returns the size of the cookie table (if locked, return the size at the time the table was locked)
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.PendingSize">
            <summary>
            Returns the size of the coookie table, including pending modifications 
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.MaxSize">
            <summary>
            Returns the maximum size of the cookie table, as given by the cookie traits
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.Lock">
            <summary>
            Lock the table so subsequent insert/remove operations won't affect iterators
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.Unlock">
            <summary>
            Unlock the table. When the lock count goes to zero, perform all pending insert/remove/clear operations
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CookieTable`2.IsLocked">
            <summary>
            Returns whether the table is currently locked for pending modifications
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DataSourceFactory.GetDataSource(System.Guid@,System.UInt32)">
            <summary>
            Get a UI Data Source for the specified Data Source factory guid and data source ID.
            Override in your derived factory class
            </summary>
            <param name="guid">factory guid</param>
            <param name="dw">data source ID</param>
            <returns>An Data Source implementing also the IObjectWithSite interface</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DialogResult">
            <summary>
            Dialog result values. These match Windows buttons IDs (IDOK, IDCANCEL, etc.)
            In addition we define the result for failure to display the dialog.
            WPF dialogs return OK/Cancel for the boolean value result of ShowDialog() call, and Fail if the dialog does not have return value yet.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IIndirectPropertyValue">
            <summary>
            This is a simple interface used to identify indirect property
            values.  Since IndirectPropertyValue is a generic type a simple
            test like "foo is IndirectPropertyValue" won't compile.  If the only
            thing the caller cares about is whether an object is an indirect
            property value and doesn't care about the type of the value, he
            can use "foo is IIndirectPropertyValue".
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IndirectPropertyValue`1.Equals(System.Object)">
            <summary>
            Override the Equals operator to compare the values instead of object reference 
            if the parameter is also an IVsUIObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IndirectPropertyValue`1.GetHashCode">
            <summary>
            Need to override this if we override Equals
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.Value">
            <summary>
            The contained value
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase._typeName">
            <summary>
            The type of the contained value
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.Format">
            <summary>
            Derived classed must supply this property
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.TypeNameFromValue(System.Object)">
            <summary>
            Derived classes implement this to supply type string mapping
            </summary>
            <param name="type">The type of the stored value</param>
            <returns>The VsUI type string for the given type</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.#ctor(System.Object)">
            <summary>
            Default constructor
            </summary>
            <param name="value">Object to store in the property. The type is deduced on first access.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.#ctor(System.Object,System.String)">
            <summary>
            Construct given an explicit type.
            </summary>
            <param name="value">Object to store in the property.</param>
            <param name="type">UI Type of the object.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.Equals(System.Object)">
            <summary>
            Override the Equals operator to compare the values instead of object reference 
            if the parameter is also an IVsUIObject
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.GetHashCode">
            <summary>
            Need to override this if we override Equals
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.Equals(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,System.Boolean@)">
            <summary>
            General purpose equality test for IVsUIObjects
            </summary>
            <param name="pOtherObject">The rhs of the comparison</param>
            <param name="pfAreEqual">true iff equal</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PropertyValueBase.DeduceTypeName">
            <summary>
            Deduce the type name from the contained value. Uses the
            TypeNameFromValue helper method supplied by derived classes.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute">
            <summary>
            This attribute registers a data converter (IVsUIDataConverter implementer) for custom properties.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Declares the data converter parameters: the converted type, the converter's name, ID and the package implementing the converter
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute.ConvertedType">
            <summary>
            Get the type of the IVsUIObjects that can be converted with this converter
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute.ConverterName">
            <summary>
            Get the friendly name of the UI data converter (written in registry)
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute.ConverterGuid">
            <summary>
            Get the unique guid identifying the UI data converter
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute.ConverterPackage">
            <summary>
            Get the guid of the package implementing the UI data converter
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                It also contains other information such as the type being registered and path information.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataConverterAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister the data converter
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataSourceProviderAttribute">
            <summary>
            This attribute registers a UIDataSourceProvider (IVsDataSourceFactory implementer)
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataSourceProviderAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Declares the Data Source provider (IVsDataSourceFactory implementer) parameters: ID, the provider's friendly name and the package implementing the provider
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataSourceProviderAttribute.ProviderName">
            <summary>
            Get the friendly name of the Data Source provider (written in registry)
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataSourceProviderAttribute.ProviderGuid">
            <summary>
            Get the unique guid identifying the Data Source provider
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataSourceProviderAttribute.ProviderPackage">
            <summary>
            Get the guid of the package implementing the Data Source provider
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataSourceProviderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                It also contains other information such as the type being registered and path information.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIDataSourceProviderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister the Data Source provider (IVsDataSourceFactory implementer)
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIProviderAttribute">
            <summary>
            This attribute registers an UIProvider (IVsUIFactory implementer)
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIProviderAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Declares the UI provider (IVsUIFactory implementer) parameters: ID, the provider's friendly name and the package implementing the provider
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIProviderAttribute.ProviderName">
            <summary>
            Get the friendly name of the UI provider (written in registry)
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIProviderAttribute.ProviderGuid">
            <summary>
            Get the unique guid identifying the UI provider
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIProviderAttribute.ProviderPackage">
            <summary>
            Get the guid of the package implementing the UI provider
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIProviderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
                Called to register this attribute with the given context.  The context
                contains the location where the registration information should be placed.
                It also contains other information such as the type being registered and path information.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ProvideUIProviderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister the UI provider (IVsUIFactory implementer)
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.SetValue(System.String,System.Object)">
            <summary>
            Type-friendly wrapper around IVsUIDataSource.SetValue
            </summary>
            <param name="prop">Property name</param>
            <param name="newValue">New value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.SetValue(System.String,System.Int32)">
            <summary>
            Type-specific wrapper around IVsUIDataSource.SetValue
            </summary>
            <param name="prop">Property name</param>
            <param name="newValue">New value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.SetValue(System.String,System.UInt32)">
            <summary>
            Type-specific wrapper around IVsUIDataSource.SetValue
            </summary>
            <param name="prop">Property name</param>
            <param name="newValue">New value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.SetValue(System.String,System.UInt64)">
            <summary>
            Type-specific wrapper around IVsUIDataSource.SetValue
            </summary>
            <param name="prop">Property name</param>
            <param name="newValue">New value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.SetValue(System.String,System.Double)">
            <summary>
            Type-specific wrapper around IVsUIDataSource.SetValue
            </summary>
            <param name="prop">Property name</param>
            <param name="newValue">New value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.SetValue(System.String,System.String)">
            <summary>
            Type-specific wrapper around IVsUIDataSource.SetValue
            </summary>
            <param name="prop">Property name</param>
            <param name="newValue">New value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.SetValue(System.String,System.Boolean)">
            <summary>
            Type-specific wrapper around IVsUIDataSource.SetValue
            </summary>
            <param name="prop">Property name</param>
            <param name="newValue">New value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.IsClosableType(System.String)">
            <summary>
            Utility method which checks if a type obviously doesn't support IVsUISimpleDataSource.Close
            </summary>
            <param name="type">Gel type string</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.GetValue``1(System.String)">
            <summary>
            Type-friendly wrapper around the GetValue that returns IVsUIObject
            </summary>
            <param name="name">Property name</param>
            <returns>Strongly-typed contents of the property</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddBuiltInProperty(System.String,System.Object)">
            <summary>
            Add a named property to the data source and initialize it with a
            value of the appropriate built-in type.
            </summary>
            <param name="name">Name of the new property</param>
            <param name="value">Initial value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddBuiltInProperty(System.String,System.Boolean)">
            <summary>
            Add a named property to the data source and initialize it with a
            Boolean value.
            </summary>
            <param name="name">Name of the new property</param>
            <param name="value">Initial value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddBuiltInProperty(System.String,System.Int32)">
            <summary>
            Add a named property to the data source and initialize it with an
            integer value.
            </summary>
            <param name="name">Name of the new property</param>
            <param name="value">Initial value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddBuiltInProperty(System.String,System.UInt32)">
            <summary>
            Add a named property to the data source and initialize it with an
            unsigned integer value.
            </summary>
            <param name="name">Name of the new property</param>
            <param name="value">Initial value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddBuiltInProperty(System.String,System.UInt64)">
            <summary>
            Add a named property to the data source and initialize it with an
            unsigned long integer value.
            </summary>
            <param name="name">Name of the new property</param>
            <param name="value">Initial value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddBuiltInProperty(System.String,System.Double)">
            <summary>
            Add a named property to the data source and initialize it with a
            floating point value.
            </summary>
            <param name="name">Name of the new property</param>
            <param name="value">Initial value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddBuiltInProperty(System.String,System.String)">
            <summary>
            Add a named property to the data source and initialize it with a
            string value.
            </summary>
            <param name="name">Name of the new property</param>
            <param name="value">Initial value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddUnknownProperty(System.String,System.Object)">
            <summary>
            Add a named property to the data source and set it as being of type VsUIType.Unknown.
            </summary>
            <param name="name">Name of the new property</param>
            <param name="value">Initial value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddDispatchProperty(System.String,System.Object)">
            <summary>
            Add a named property to the data source and set it as being of type VsUIType.Dispatch.
            </summary>
            <param name="name">Name of the new property</param>
            <param name="value">Initial value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddIndirectProperty``1(System.String,System.String,Microsoft.Internal.VisualStudio.PlatformUI.GetterThunk{``0})">
            <summary>
            Add an IndirectProperty to the datasource.
            </summary>
            <typeparam name="T">Type returned from GetterThunk</typeparam>
            <param name="name">Name of the new property</param>
            <param name="type">Type of the new property</param>
            <param name="getterThunk">Method to actually return the property when asked</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource.AddProperty(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
            <summary>
            Add a named property to the data source and initialize it with the
            given UIObject
            </summary>
            <param name="name">Name of the new property</param>
            <param name="initialValue">Initial value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIDataSourceDynamicCollection.AddItem(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.UInt32@)">
            <summary>
            Adds a new data source item to the collection
            </summary>
            <param name="pItem">The item to be added</param>
            <param name="pIndex">The 0-based index of the item in the collection</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIElement">
            <summary>
            Implements the IVsUIElement interface. 
            Also, any IVsUIElement is assumed to implement IObjectWithSite, too.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIFactory.CreateUIElement(System.Guid@,System.UInt32)">
            <summary>
            Create a UI Element for the specified UI factory guid and element ID.
            Override in your derived factory class
            </summary>
            <param name="guid">factory guid</param>
            <param name="dw">element ID</param>
            <returns>An UI element implementing also the IObjectWithSite interface</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryException">
            <summary>
            Custom exception object for common exceptions from a UI Factory
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryHelper">
            <summary>
            Helper methods for working with UI Factories.
            </summary>
            <summary>
            Helper methods for working with UI Factories.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryHelper.GetViewFromUIFactory(System.Guid,System.UInt32)">
            <summary>
            Create a UI element from the UI factory service.
            </summary>
            <param name="factory">GUID part of the UI Element identifier</param>
            <param name="elementId">DWORD part of the UI Element identifier</param>
            <returns>An element from the UI Factory</returns>
            <exception cref="T:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryException">The UI Element could not be created for the
            reason given in the exception message</exception>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryHelper.GetViewFromUIFactory(Microsoft.VisualStudio.Shell.Interop.VsUIElementDescriptor)">
            <summary>
            Create a UI element from the UI factory service.
            </summary>
            <param name="viewDescriptor">Descriptor of the UI Element</param>
            <returns>An element from the UI factory</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryHelper.GetViewFromUIFactoryAsync(System.Guid,System.UInt32)">
            <summary>
            Create a UI element from the UI factory service.
            </summary>
            <param name="factoryGuid">The UI element factory GUID</param>
            <param name="elementId">The UI element identifier</param>
            <returns>The UI element</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryHelper.GetViewFromUIFactoryAsync(Microsoft.Internal.VisualStudio.PlatformUI.FactoryElementID)">
            <summary>
            Create a UI element from the UI factory service.
            </summary>
            <param name="elementID">The composite ID describing the UI element</param>
            <returns>The UI element</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryHelper.CreateElementAndDataSource(Microsoft.Internal.VisualStudio.PlatformUI.FactoryElementIDBundle)">
            <summary>
            Creates the UI element and data source described in <paramref name="bundle" /> and
            returns the FrameworkElement for the UI element.  The data source will be set as
            the DataContext of the returned FrameworkElement.
            </summary>
            <param name="bundle">A bundle describing how the element and its data source are created</param>
            <returns>The new FrameworkElement</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryHelper.CreateElementAndDataSource(Microsoft.Internal.VisualStudio.PlatformUI.FactoryElementID,Microsoft.Internal.VisualStudio.PlatformUI.FactoryElementID)">
            <summary>
            Creates the UI element and data source described by <paramref name="uiElementID" /> and
            <paramref name="dataSourceID" /> and returns the FrameworkElement for the UI element.  
            The data source will be set as the DataContext of the returned FrameworkElement.
            </summary>
            <param name="uiElementID">The factory ID for the UI element</param>
            <param name="dataSourceID">The factory ID for the data source</param>
            <returns>The new FrameworkElement</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryHelper.CreateElementAndDataSourceAsync(Microsoft.Internal.VisualStudio.PlatformUI.FactoryElementIDBundle)">
            <summary>
            Creates the UI element and data source described in <paramref name="bundle" /> and
            returns the FrameworkElement for the UI element.  The data source will be set as
            the DataContext of the returned FrameworkElement.
            </summary>
            <param name="bundle">A bundle describing how the element and its data source are created</param>
            <returns>The new FrameworkElement</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryHelper.CreateElementAndDataSourceAsync(Microsoft.Internal.VisualStudio.PlatformUI.FactoryElementID,Microsoft.Internal.VisualStudio.PlatformUI.FactoryElementID)">
            <summary>
            Creates the UI element and data source described by <paramref name="uiElementID" /> and
            <paramref name="dataSourceID" /> and returns the FrameworkElement for the UI element.  
            The data source will be set as the DataContext of the returned FrameworkElement.
            </summary>
            <param name="uiElementID">The factory ID for the UI element</param>
            <param name="dataSourceID">The factory ID for the data source</param>
            <returns>The new FrameworkElement</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryHelper.ResolveWpfViewAndSetDataContext(Microsoft.VisualStudio.Shell.Interop.IVsUIElement,System.Object)">
            <summary>
            Given a UI Element created by a UI factory, resolve it to a WPF FrameworkElement
            and bind it to the given model.
            </summary>
            <param name="elementFromFactory">Object created by a UI factory</param>
            <param name="model">The new view's data model, or null if the element has the data model already set otherwise</param>
            <returns>A WPF FrameworkElement that is bound to the given model</returns>
            <exception cref="T:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryException">The UI Element could not be created for the
            reason given in the exception message</exception>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryHelper.ResolveWpfView(Microsoft.VisualStudio.Shell.Interop.IVsUIElement)">
            <summary>
            Given a UI Element created by a UI factory, resolve it to a WPF FrameworkElement
            </summary>
            <param name="elementFromFactory">An element created by a UI factory</param>
            <returns>A WPF FrameworkElement obtained from the given object</returns>
            <exception cref="T:Microsoft.Internal.VisualStudio.PlatformUI.UIFactoryException">The UI Element could not be created for the
            reason given in the exception message</exception>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.UIObject">
            <summary>
            Simple wrapper class over an existing IVsUIObject, 
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.GetTypedValue``1(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String)">
            <summary>
            Simple wrapper around GetValue that casts the resultant <see cref="T:System.Object" /> to
            <typeparam name="T" />.
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to be returned</param>
            <returns>Value of the property cast as <typeparamref name="T" />.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.GetValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String)">
            <summary>
            Returns the value of a data source's property as an object instead of an IVsUIObject
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to be returned</param>
            <returns>Value of the property</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.TryGetTypedValue``1(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,``0@)">
            <summary>
            Simple wrapper around TryGetValue that casts the resultant <see cref="T:System.Object" /> to
            <typeparam name="T" />.
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to be returned</param>
            /// <param name="value">Value of the property cast as <typeparamref name="T" />.</param>
            <returns>True if the look up succeeded, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.TryGetValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,System.Object@)">
            <summary>
            Tries to return the value of a data source's property as an object instead of an IVsUIObject
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to be returned</param>
            <param name="value">The value of the property</param>
            <returns>True if the look up succeeded, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.GetValueAsFormat(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,Microsoft.VisualStudio.Shell.Interop.__VSUIDATAFORMAT)">
            <summary>
            Returns the value of a data source's property as an object instead of an IVsUIObject
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to be returned</param>
            <returns>Value of the property</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.Convert(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,Microsoft.VisualStudio.Shell.Interop.__VSUIDATAFORMAT)">
            <summary>
            Converts the given object to the requested format.
            </summary>
            <param name="source">Object to convert</param>
            <param name="targetFormat">Format to convert to</param>
            <returns>Converted object</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.Convert(Microsoft.VisualStudio.Shell.Interop.IVsUIObject,Microsoft.VisualStudio.Shell.Interop.__VSUIDATAFORMAT,System.IServiceProvider)">
            <summary>
            Converts the given object to the requested format.
            </summary>
            <param name="source">Object to convert</param>
            <param name="targetFormat">Format to convert to</param>
            <param name="sp">Service provider for conversion service</param>
            <returns>Converted object</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.GetObjectData(Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
            <summary>
            Returns the data contained in an IVsUIObject
            </summary>
            <param name="obj">IVsUIObject whose data is to be retrieved</param>
            <returns>Data contained by the IVsUIObject</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.QueryTypedValue``1(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String)">
            <summary>
            Wrapper around QueryValue that casts the resultant <see cref="T:System.Object" /> to
            <typeparam name="T" />.
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to be returned</param>
            <returns>Value of the property cast as <typeparamref name="T" />.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.QueryValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String)">
            <summary>
            Returns the value of a data source's property as an object via QueryValue
            Note: Not all implementations implement QueryValue
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to query</param>
            <returns>Value of the property</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.SetValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,System.Object)">
            <summary>
            Sets the value of a data source's property.
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to be returned</param>
            <param name="value">New value for the property</param>
            <remarks>
            This function is intended to be used with objects types that are
            supported by BuiltInPropertyValue.  Calling it with different
            types will result in an exception.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.SetValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,System.Boolean)">
            <summary>
            Sets the value of a Boolean property of a data source.
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to be returned</param>
            <param name="value">New value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.SetValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,System.Int32)">
            <summary>
            Sets the value of an integer property of a data source.
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to be returned</param>
            <param name="value">New value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.SetValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,System.UInt32)">
            <summary>
            Sets the value of an unsigned integer property of a data source.
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to be returned</param>
            <param name="value">New value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.SetValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,System.UInt64)">
            <summary>
            Sets the value of an unsigned long property of a data source.
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to be returned</param>
            <param name="value">New value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.SetValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,System.Double)">
            <summary>
            Sets the value of a double property of a data source.
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to be returned</param>
            <param name="value">New value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.SetValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,System.String)">
            <summary>
            Sets the value of a string property of a data source.
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to be returned</param>
            <param name="value">New value for the property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.SetValue(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
            <summary>
            Sets the value of a data source's property.
            </summary>
            <param name="ds">Data source to query</param>
            <param name="prop">Property to be returned</param>
            <param name="value">New value for the property</param>
            <remarks>
            This function doesn't provide much value on its own, but prevents
            the more generic overload of SetValue from trying to wrap an
            IVsUIObject in a BuiltInPropertyValue.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.GetObjectType(Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
            <summary>
            Extract the type string from a UI object
            </summary>
            <param name="obj">The object</param>
            <returns>Its type name</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.GetObjectFormat(Microsoft.VisualStudio.Shell.Interop.IVsUIObject)">
            <summary>
            Extract the format from a UI object
            </summary>
            <param name="obj">The object</param>
            <returns>Its format</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.Invoke(Microsoft.VisualStudio.Shell.Interop.IVsUIDataSource,System.String,System.Object)">
            <summary>
            Simple wrapper around Invoke that returns directly the verb invocation <see cref="T:System.Object" /> result.
            </summary>
            <param name="ds">Data source to invoke the verb on</param>
            <param name="verbName">Verb to invoke</param>
            <param name="parameter">Optional parameter for the verb</param>
            <returns>The verb invocation result</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.GetItem(Microsoft.VisualStudio.Shell.Interop.IVsUICollection,System.UInt32)">
            <summary>
            Simple wrapper returning collection items
            </summary>
            <param name="collection">Data source collection whose items is to be retrieved</param>
            <param name="index">Index of the item in the collection</param>
            <returns>The data source of the item in the collection</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.Count(Microsoft.VisualStudio.Shell.Interop.IVsUICollection)">
            <summary>
            Extension method, returns the number of items in the collection
            </summary>
            <returns>The number of itesm in the collection</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Utilities.CallCatchingExceptions(System.Action)">
            <summary>
            Calls the specifyied method, catching exceptions around the call, and display warning messages in a debugger's output window if that happens.
            This method should be called only on shutdown/Dispose(), when we risk accessing the inner data source that may be already disposed/disconnected.
            </summary>
            <param name="method">The method to be called</param>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIConstants.VsUICookieNil">
            <summary>Special value that may be used to initialize VsUI event handler cookie values</summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIConstants.WpfLoaderGuid">
            <summary>The guid of the IVsUIWpfLoader service that can be used to create IVsUIElement objects</summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIConstants.HelpTopicProperty">
            <summary>HelpTopic string used in data sources of VsUI dialogs to indicate the help topic displayed by dialog</summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VsUIConstants.HelpVerb">
            <summary>Verb name used in data sources of VsUI dialogs to specify the callback that will display the help topic</summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VsUICookieTraits">
            <summary>
            Cookie traits using VSUICOOKIE-style value range
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VsUICookieTable`1">
            <summary>
            A cookie table using VSUICOOKIE values and traits
            </summary>
            <typeparam name="TValue">The type of elements to store in the cookie table</typeparam>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32BitmapUIObject">
            <summary>
            Managed implementation of wrapper IVsUIObject for HBITMAP
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32HandleUIObject`1">
            <summary>
            Base class for IVsUIObject types that wrap Win32 handles
            </summary>
            <typeparam name="TData">The type returned from get_Data</typeparam>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32IconUIObject">
            <summary>
            Managed implementation of wrapper IVsUIObject for HICON
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Win32ImageListUIObject">
            <summary>
            Managed implementation of wrapper IVsUIObject for HIMAGELIST
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsBitmapUIObject">
            <summary>
            Implementation of wrapper IVsUIObject for System.Drawing.Bitmap
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsIconUIObject">
            <summary>
            Implementation of wrapper IVsUIObject for System.Drawing.Icon
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WinFormsImageListUIObject">
            <summary>
            Implementation of wrapper IVsUIObject for System.Windows.Forms.ImageList
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfPropertyValue.CreateEmptyValue(System.String)">
            <summary>
            Create empty value of the specified type, to be used with fallback properties
            </summary>
            <param name="type"></param>
            <returns>An empty value of the specified type</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfPropertyValue.TypeNameFromValue(System.Object)">
            <summary>
            Supply type mappings for WPF objects
            </summary>
            <param name="type">Type of stored value</param>
            <returns>The type string</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_AddBuiltInPropertyUsedForUIObject">
            <summary>
              Looks up a localized string similar to AddBuiltInProperty should not be used for values which already implement IVsUIObject. Call AddProperty instead..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotChangeDataSourceCollection">
            <summary>
              Looks up a localized string similar to Properties whose values are of type IVsUICollection cannot currently be set through the presentation layer with a wrapped collection object..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotCheckEqual">
            <summary>
              Looks up a localized string similar to Cannot test if the new property value is the same as the old property value; property change notification cannot be raised..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotCreateChildWindow">
            <summary>
              Looks up a localized string similar to Cannot create the child window..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotCreateUIElement">
            <summary>
              Looks up a localized string similar to The factory cannot create a UI element for the specified element identifier {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotCreateUIElementType">
            <summary>
              Looks up a localized string similar to The WPF loader cannot create a UI element for type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotCreateWindow">
            <summary>
              Looks up a localized string similar to Cannot create the window..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotCreateWPFLoader">
            <summary>
              Looks up a localized string similar to Cannot create the WPF Loader..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotDestroyWindow">
            <summary>
              Looks up a localized string similar to Cannot destroy the window..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotEnterModal">
            <summary>
              Looks up a localized string similar to Cannot enter modal state for the shell main window..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotGetDataSource">
            <summary>
              Looks up a localized string similar to The factory cannot get a data source for the specified data source identifier {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotGetImageFromList">
            <summary>
              Looks up a localized string similar to Cannot retrieve the indexed image {0} from the image list..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotGetImageInfo">
            <summary>
              Looks up a localized string similar to Cannot get information for image {0} in the image list..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotGetParent">
            <summary>
              Looks up a localized string similar to Cannot get parent window handle from shell..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotGetProperty">
            <summary>
              Looks up a localized string similar to The UI object returned an error code for GetValue.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotGetPropertyData">
            <summary>
              Looks up a localized string similar to Cannot get the property value's data..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotGetPropertyValueFormat">
            <summary>
              Looks up a localized string similar to Cannot get the property value's format..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotGetPropertyValueType">
            <summary>
              Looks up a localized string similar to Cannot get the property value's type..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotGetUIObject">
            <summary>
              Looks up a localized string similar to Cannot get the UI object from the IVsUIElement, the visual element cannot be created..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotGetUIShellService">
            <summary>
              Looks up a localized string similar to Cannot get IVsUIShell service..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotInsertCollectionIntoItself">
            <summary>
              Looks up a localized string similar to Cannot insert a collection into itself..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotInvokeVerbOnDataSource">
            <summary>
              Looks up a localized string similar to The verb cannot be invoked on this data source..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotObtainColor">
            <summary>
              Looks up a localized string similar to Cannot obtain color information for conversion..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotSetDataSource">
            <summary>
              Looks up a localized string similar to Cannot set the data source for the UI element..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotSetProperty">
            <summary>
              Looks up a localized string similar to The UI object returned an error code for SetValue.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CannotSetPropertyNullValue_Format">
            <summary>
              Looks up a localized string similar to The property '{0}' cannot have null values because it has a custom type '{1}'. A data converter must be used to set the value of this property..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CapacityMustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to The capacity for a ShapeIdentifierMap must be 1 or more.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CollectionElementIsNotDataSource">
            <summary>
              Looks up a localized string similar to The value does not implement IDataSource interface..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_ConversionFailed">
            <summary>
              Looks up a localized string similar to Conversion of the value type to WPF format failed..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_ConversionFailed_InvalidType">
            <summary>
              Looks up a localized string similar to The object does not implement {0} and is not a {1} {2}. Conversion is not possible..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CookieTable_AccessPendingModsWhileUnlocked">
            <summary>
              Looks up a localized string similar to PendingMods should only be accessed when the cookie table is locked.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CookieTable_HasPendingModsWhileUnlocked">
            <summary>
              Looks up a localized string similar to Cookie table has pending modifications while it's unlocked.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CookieTable_InvalidRange">
            <summary>
              Looks up a localized string similar to Invalid range for cookie values..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CookieTable_InvalidRange2">
            <summary>
              Looks up a localized string similar to Invalid cookie value should be either smaller than minimum valid value or greater than maximum valid value..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CookieTable_NoMoreCookies">
            <summary>
              Looks up a localized string similar to No more cookies available..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_CookieTable_Unlocked">
            <summary>
              Looks up a localized string similar to The cookie table is not locked..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_DoubleCreateElementCall">
            <summary>
              Looks up a localized string similar to CreateFrameworkElement should be called only once..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_DuplicateProperty">
            <summary>
              Looks up a localized string similar to The data source already contains a property '{0}'..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_DuplicateVerb">
            <summary>
              Looks up a localized string similar to The data source already contains a verb '{0}'..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_EmptyFactoryGuid">
            <summary>
              Looks up a localized string similar to The factory Guid cannot be empty.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_EmptyString">
            <summary>
              Looks up a localized string similar to {0} can not be an empty string..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_GelTypeCannotBeEmpty">
            <summary>
              Looks up a localized string similar to The Gel type string cannot be empty..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_GetFrameworkElementBeforeCreate">
            <summary>
              Looks up a localized string similar to GetFrameworkElement should only be called after CreateFrameworkElement..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_IncorrectPropValueType">
            <summary>
              Looks up a localized string similar to The value is not of the expected type of this property..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_InvalidCookieValue">
            <summary>
              Looks up a localized string similar to The cookie value is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_InvalidObjectHandle">
            <summary>
              Looks up a localized string similar to The object contains NULL handle for {0}, the conversion is not possible..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_InvalidUIObjectType">
            <summary>
              Looks up a localized string similar to The UI object is not {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_KeyCannotBeNull">
            <summary>
              Looks up a localized string similar to The key for an element in the cache cannot be null.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_NoConverterAvailable">
            <summary>
              Looks up a localized string similar to No converter exist for this value type and format to WPF..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_NoConverterManager">
            <summary>
              Looks up a localized string similar to Cannot obtain the IVsUIDataConverterManager service..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_NoServiceProvider">
            <summary>
              Looks up a localized string similar to The property requires using a data converter. The DataSource parameters needs to specify the service provider..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_NotExpectedReturnType">
            <summary>
              Looks up a localized string similar to Expected a return type: '{0}'. Actual return type: '{1}'.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_NoValidHelpTopic">
            <summary>
              Looks up a localized string similar to Cannot invoke the Help command. The help topic was not specified and cannot be obtained from properties..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_PropertyNotDefined">
            <summary>
              Looks up a localized string similar to The data source does not contain a property '{0}'..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_PropertyValueNeedsToBeVsUIObject">
            <summary>
              Looks up a localized string similar to Properties that don't have built-in types need to be set using IVsUIObject values..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_PropertyValueTypeMismatch">
            <summary>
              Looks up a localized string similar to The value doesn't match the property type..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_PropValueNotUIObject">
            <summary>
              Looks up a localized string similar to The value of a property must be an IVsUIObject..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_ProviderCannotBeObtainedFromSite">
            <summary>
              Looks up a localized string similar to The service provider site must provide the Microsoft.VisualStudio.OLE.Interop.IServiceProvider service..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_ReadOnlyCollection">
            <summary>
              Looks up a localized string similar to The collection is read-only..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_SiteIsNotProvider">
            <summary>
              Looks up a localized string similar to The element site must be a service provider that implements either System.IServiceProvider or Microsoft.VisualStudio.OLE.Interop.IServiceProvider..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_UnknownUIObjectType">
            <summary>
              Looks up a localized string similar to The UI object type {0} is not recognized, the visual element cannot be created..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_UnrecognizedBuiltInValueType">
            <summary>
              Looks up a localized string similar to Unrecognized object value for built in VsUI types..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_UnrecognizedWindowHandle">
            <summary>
              Looks up a localized string similar to Unrecognized window handle..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_ValueMayNotBeUnset">
            <summary>
              Looks up a localized string similar to A GelProperty may not be set to Unset..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Error_VerbNotDefined">
            <summary>
              Looks up a localized string similar to The data source does not contain a verb '{0}'..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Log_Registering">
            <summary>
              Looks up a localized string similar to Registering {0}:\t\t{1} ({2})\n.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Log_Unregistering">
            <summary>
              Looks up a localized string similar to Unregistering {0}:\t\t{1}\n.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.UIFactory_CreateFrameworkElementFailed">
            <summary>
              Looks up a localized string similar to The UI Factory returned a valid UIElement that supports IVsUIWpfElement, but CreateFrameworkElement failed with error code 0x{0:x8}..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.UIFactory_CreateFrameworkElementTargetInvocationException">
            <summary>
              Looks up a localized string similar to The UI Factory threw a TargetInvocationException during CreateFrameworkElement. This typically indicates a XAML bug in the WPF control being instantiated. See the inner exception for details..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.UIFactory_CreateUIElementFailed">
            <summary>
              Looks up a localized string similar to Unable to load the requested UI element from a UI Factory (UI Factory:{0}, element {1}). The UI factory service returned error code 0x{2:x8}.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.UIFactory_GetUIObjectFailed">
            <summary>
              Looks up a localized string similar to The UI Factory returned a valid view, but the view failed to create.  The UI element's GetUIObject method returned error code 0x{0:x8}.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.UIFactory_ViewIsNotAFrameworkElement">
            <summary>
              Looks up a localized string similar to The UI Factory returned a valid UIElement but it does not support WPF and cannot be used in this scenario. (Actual type:{0})..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Resources.Warning_DataSourceNotClosed">
            <summary>
              Looks up a localized string similar to The data source was not disposed before the application was terminated. Consider calling IVsUISimpleDataSource.Close() when the data source is no longer needed (e.g. when the tool window using the data is closed)..
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.FactoryElementID">
            <summary>
            A tuple that fully identifies an object that can be created by a UI or data source factory
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.FactoryElementIDBundle">
            <summary>
            A tuple that fully identifies a UI element/data source combination that can be created 
            by UI and data source factories.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.AddHelpTopic(Microsoft.Internal.VisualStudio.PlatformUI.UIDataSource,System.String)">
            <summary>
            Adds a help topic to a data source used by a dialog using the constants
            HelpTopic property and Help verb.
            </summary>
            <param name="dataSource">The data source to be used by the dialog</param>
            <param name="topic">Help topic to be displayed by the </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CreateWpfLoader">
            <summary>
            Creates a WPF Loader object that can be used to create IVsUIElement objects
            wrapping UI objects specified by their types.
            </summary>
            <returns>An object implementing IVsUIWpfLoader interface</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CreateUIElement(System.Guid,System.UInt32)">
            <summary>
            Create a UI Element
            </summary>
            <param name="factory">The guid of the UIFactory supporting the element</param>
            <param name="elementId">The ID of the UI Element to create</param>
            <returns>The UI Element</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CreateUIElement(Microsoft.Internal.VisualStudio.PlatformUI.FactoryElementID)">
            <summary>
            Create a UI Element
            </summary>
            <param name="elementID">The UI element's identifier</param>
            <returns>The UI Element</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CreateUIElement(System.Type)">
            <summary>
            Create a UI Element
            </summary>
            <param name="elementType">The type of WPF control to create an UI element for</param>
            <returns>The UI Element</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.GetDialogOwnerHandle">
            <summary>
            Returns the window handle that can be used to parent modal dialogs
            </summary>
            <returns>The window handle that can be used to parent modal dialogs</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.ShowModalElement(Microsoft.VisualStudio.Shell.Interop.IVsUIElement,System.IntPtr)">
            <summary>
            Displays the UIElement as a modal dialog, using the specified Win32 window as parent
            </summary>
            <param name="element">The element to display as a modal dialog</param>
            <param name="parent">The parent window handle</param>
            <returns>Win32 button IDs (0 for unknown)</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.GetOrCreateFrameworkElement``1(Microsoft.VisualStudio.Shell.Interop.IVsUIWpfElement)">
            <summary>
            Gets or creates the FrameworkElement represented by the given IVsUIWpfElement.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.ShowModal(System.Windows.Window,System.IntPtr)">
            <summary>
            Shows a WPF window using a Win32 parent window
            </summary>
            <param name="window">Dialog to show</param>
            <param name="parent">The parent window handle</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.ShowModal(System.Windows.Window)">
            <summary>
            Displays a WPF window as modal dialog in Visual Studio shell
            </summary>
            <param name="window">The WPF Window to be shown as dialog.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CenterInRect(Microsoft.VisualStudio.NativeMethods.RECT,System.Int32,System.Int32,Microsoft.VisualStudio.NativeMethods.RECT)">
            <summary>
            Determines a centering rectangle in a given parent rectangle, ensuring that the centered rectangle is
            translated into a monitor bounds if possible.
            </summary>
            <param name="parentRect">The bounds for the parent window.</param>
            <param name="childWidth">The width of the child window being centered.</param>
            <param name="childHeight">The height of the child window being centered.</param>
            <param name="monitorClippingRect">The monitor bounds which the child window should be forced into.</param>
            <returns>The centered child rectangle, translated to stay within the monitorClippingRect.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CenterRectOnSingleMonitor(Microsoft.VisualStudio.NativeMethods.RECT,System.Int32,System.Int32)">
            <summary>
            Centers a child rectangle on a single monitor.
            </summary>
            <param name="parentRect">The parent window to center on.</param>
            <param name="childWidth">The width of the child window.</param>
            <param name="childHeight">The height of the child window.</param>
            <returns>A rectangle, which has the size (childWidth, childHeight) and
            which is constrained to the single monitor which contains the largest portion of parentRect,
            and which is centered on the subrectangle of the parentRect which is on that monitor.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.ShowModalElement(Microsoft.VisualStudio.Shell.Interop.IVsUIElement)">
            <summary>
            Create the specified element and display it as a modal dialog using the IDE's main window as parent
            </summary>
            <param name="element">Element to create and display as dialog</param>
            <returns>Win32 button IDs (0 for unknown)</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.ShowModalElement(System.Guid,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource)">
            <summary>
            Create the specified element and display it as a modal dialog using the IDE's main window as parent
            </summary>
            <param name="factory">The guid of the UIFactory supporting the element</param>
            <param name="elementId">The ID of the UI Element to create</param>
            <returns>Win32 button IDs (0 for unknown)</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.GetHwndFromUIElement(Microsoft.VisualStudio.Shell.Interop.IVsUIElement,System.IntPtr)">
            <summary>
            Create the specified element as a modeless child window
            </summary>
            <param name="element">Element to create</param>
            <param name="parent">The parent window handle</param>
            <returns>The window handle of the child window</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CreateChildElement(Microsoft.VisualStudio.Shell.Interop.IVsUIElement,System.IntPtr)">
            <summary>
            Create and displays the specified element as a modeless child window
            </summary>
            <param name="element">Element to create and display</param>
            <param name="parent">The parent window handle</param>
            <returns>The window handle of the child window</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CreateChildElement(System.Guid,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource,System.IntPtr)">
            <summary>
            Create and displays a UI element as a modeless child window
            </summary>
            <param name="factory">The Guid of the UIFactory creating the UI element</param>
            <param name="elementId">The ID of the UI element to be created and displayed</param>
            <param name="parent">The parent window handle</param>
            <returns>The window handle of the child window</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.ShowModalElement(Microsoft.VisualStudio.Shell.Interop.IVsUIElement,System.Windows.Window)">
            <summary>
            Create the specified element and display it as a modal dialog using the specified window or the IDE's main window as parent
            </summary>
            <param name="element">Element to create and display as dialog</param>
            <param name="owner">The Window to be used for parent</param>
            <returns>Win32 button IDs (0 for unknown)</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.NativeWindowHost">
            <summary>
            Helper class, creates a FrameworkElement hosting the Win32 window created by a IVsUIWin32Element
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.GetFrameworkElementFromUIElement(Microsoft.VisualStudio.Shell.Interop.IVsUIElement)">
            <summary>
            Creates a FrameworkElement from the specified UIElement
            </summary>
            <param name="element">The UIElement from which to get a FrameworkElement</param>
            <returns>The framework element of the UI object</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CreateChildElement(Microsoft.VisualStudio.Shell.Interop.IVsUIElement,System.Windows.FrameworkElement,System.Windows.FrameworkElement@)">
            <summary>
            Try our best to create and set the element as a child of the specified parent
            </summary>
            <param name="element">The element to be created and displayed</param>
            <param name="parent">The framework element to be used as parent</param>
            <param name="frameworkElement">Returns the created child framework element</param>
            <returns>True if the parent relationship could be established</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WindowHelper.CreateChildElement(System.Guid,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource,System.Windows.FrameworkElement,System.Windows.FrameworkElement@)">
            <summary>
            Try our best to create and set the element as a child of the specified parent
            </summary>
            <param name="factory">The Guid of the UIFactory creating the UI element</param>
            <param name="elementId">The ID of the UI element to be created and displayed</param>
            <param name="parent">The framework element to be used as parent</param>
            <param name="frameworkElement">Returns the created child framework element</param>
            <returns>True if the parent relationship could be established</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIElement.OnFrameworkElementCreated(System.Windows.FrameworkElement)">
            <summary>
            Called after the framework element for this WPFUIElement has been created.
            </summary>
            <param name="element">The new instance of the FrameworkElement that this object wraps.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIElement.UpdateDataContext(System.Object)">
            <summary>
            Update the framework element's data context, disposing of the old one
            </summary>
            <param name="newContext">The new data context</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIElement.CreateDataSourceWrapper(Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource)">
            <summary>
            Create an appropriate WPF-flavor wrapper for the given data source.
            </summary>
            <param name="dataSource">The new data source</param>
            <returns>A wrapper around the given data source or null if a suitable wrapper could not be created.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WpfUIElement.ApplyDataSourceToFrameworkElement(Microsoft.VisualStudio.Shell.Interop.IVsUISimpleDataSource)">
            <summary>
            Create a suitably-wrapped DataSource and apply it to the FrameworkElement's DataContext
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.GlobalServices.GetServiceAsync``2(System.Boolean)">
            <summary>
            Gets a service interface asynchronously.
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <typeparam name="TInterface">The interface type</typeparam>
            <param name="throwOnFailure">
            Determines how a failure to get the requested service interface is
            handled.  If true, an exception is thrown; if false, null is returned.
            </param>
            <returns>The requested service interface</returns>
            <exception cref="T:Microsoft.VisualStudio.Shell.ServiceUnavailableException">
            Either the service could not be acquired, or the service does not support
            the requested interface.
            </exception>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.GlobalServices.AsyncServiceProvider">
            <summary>
            The asynchronous service provider
            </summary>
            <remarks>
            This is cached to improve the performance of <see cref="M:Microsoft.Internal.VisualStudio.PlatformUI.GlobalServices.GetServiceAsync``2(System.Boolean)" />
            </remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.HierarchySearchMatchEvaluator">
            <summary>
            Collects search terms used for comparing with a candidate IVsHierarchyItem's caption,
            and determines if a given IVsHierarchyItem or hierarchy caption is a matched by search given those terms.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HierarchySearchMatchEvaluator.GetHierarchySearchTerms(Microsoft.VisualStudio.Shell.Interop.IVsSearchQuery)">
            <summary>
            Gets the search terms from a search query that should be used for determining if
            a hierarchy item
            </summary>
            <param name="query">The query to extract the search terms from.</param>
            <returns>The set of terms that should be used for determining if an IVsHierarchItem
            is included by the search.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HierarchySearchMatchEvaluator.IsSearchMatch(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
            <summary>
            Determines if the given IVsHierarchy and itemid match all of the given search terms.
            This is determined by comparing the caption of the hierarchy with the terms.
            </summary>
            <param name="hierarchy">The hierarchy whose item is a search result candidate.</param>
            <param name="itemid">The itemid of the search result candidate.</param>
            <returns>True if the item in the hierarchy matches all of the terms, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HierarchySearchMatchEvaluator.IsSearchMatch(System.String)">
            <summary>
            Determines if the given hierarchy caption includes all of the given search terms.
            </summary>
            <param name="hierarchyCaption">The caption to compare with the search terms.</param>
            <returns>True if the caption matches all of the terms, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HierarchyUtilities.FindCommonAncestor``1(``0,``0,System.Func{``0,``0})">
            <summary>
            Finds the common ancestor of obj1 and obj2 using the given function to get the parent of each element.
            </summary>
            <param name="obj1">The first object.</param>
            <param name="obj2">The second object.</param>
            <param name="parentEvaluator">The method used to determine the parent of an element.</param>
            <returns>The first element in the parent tree that is both an ancestor of obj1 and obj2, or
            null if no such element exists.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.HierarchyUtilities.GetStateToolTip(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String@)">
            <summary>
            Get the tool tip for the state icon index.
            </summary>
            <param name="hierarchy">Hierarchy for the item whose state tip is required</param>
            <param name="itemid">ID for the item within Hierarchy for the item whose state tip is required</param>
            <param name="tipText">Value of the tip text returned if successful</param>
            <returns>Returns true if successful and indicates either it is not connected with SCC or
            that it is connected and SCC was able to provide the tip text.    False indicates that it is connected but the text is not
            yet available and it it should be requested again later.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Suspender.#ctor(System.Action)">
            <summary>
            Constructs a Suspender object
            </summary>
            <param name="resumeAction">Optional.  The action to perform when SuspendCount becomes zero.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Suspender.Suspend">
            <summary>
            Ensures that IsSuspended will return true for the lifetime
            of the return object
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Suspender.IsSuspended">
            <summary>
            Are there any outstanding calls to Suspend?
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.Suspender.SuspendCount">
            <summary>
            How many outstanding calls to Suspend are there?
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Suspender.Microsoft#Internal#VisualStudio#PlatformUI#ISuspendable#Suspend">
            <summary>
            Increments SuspendCount
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.Suspender.Microsoft#Internal#VisualStudio#PlatformUI#ISuspendable#Resume">
            <summary>
            Decrements SuspendCount.  If SuspendCount becomes zero, _finalUnsuspendAction is run.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DeferredResourceDictionaryBase">
            <summary>
            Represents a ResourceDictionary in which the Brush and Color values are defer-loaded
            based on values.  If the value of an key in the ResourceDictionary is a ThemeResourceKey,
            that key will be used to construct a SolidColorBrush or Color appropriate for that key.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DeferredResourceDictionaryBase.GetRgbaColorValue(Microsoft.VisualStudio.Shell.ThemeResourceKey)">
            <summary>
            Return the RGBA color value for the specified theme resource key
            </summary>
            <param name="key"></param>
            <returns>RGBA color value</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DeferredResourceDictionaryBase.RealizeValue(Microsoft.VisualStudio.Shell.ThemeResourceKey)">
            <summary>
            Constructs a deferred Brush or Color representing the value of the given
            ThemeResourceKey for the current theme.
            </summary>
            <param name="key">The key for which to construct the brush or color value.</param>
            <returns>The brush or color for the given key in the current color theme.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IconHandleImageCache">
            <summary>
            Represents a cache where the HICON is used as a key
            mapping to a WPF image wrapper for that HICON.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.NativeImageList">
            <summary>
            Represents a weak cache of images from a native HIMAGELIST.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ShellHelper.IsInCommandLineMode">
            <summary>
            Gets a value indicating whether the shell is running in command line mode.
            </summary>
            <remarks>
            This SHOULD be called on the main thread. It will incur RPC transitions to the main thread otherwise.
            </remarks>
            <devremarks>
            We use RPC if called on a background thread because this property is called from existing legacy code that has public entrypoints,
            and that legacy code already relied on RPC. So throwing if on the wrong thread, or using JTF in this code path,
            changes the threading rules by which the legacy code would run.
            </devremarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WeakImageCache`1">
            <summary>
            Represents a cache of IImageHandle instances which is weak
            on the IImageHandle, allowing them to be freed when no longer referenced
            by the UI.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WeakImageCache`1.GetImage(`0)">
            <summary>
            Tries to get the image handle with the given index.  If the image can't be created for any reason,
            this method returns null rather than throwing an exception.
            </summary>
            <param name="index">The index of the image to retrieve.</param>
            <returns>The image handle corresponding with the index, or null if it can't be retrieved.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WeakImageCache`1.RealizeImage(`0)">
            <summary>
            In a derived class, realizes the image for the given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.WeakImageCache`1.Cache">
            <summary>
            Gets the weak cache used to store references to image handles.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.CanPreviewItemResult.NotSupported">
            <summary>
            The item cannot be previewed.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.CanPreviewItemResult.NotSupportedDisabled">
            <summary>
            The item cannot be previewed because preview is disabled for it.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.CanPreviewItemResult.NotSupportedSlow">
            <summary>
            The item cannot be previewed because the editor is too slow for single-click preview.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.CanPreviewItemResult.NotSupportedLarge">
            <summary>
            The item cannot be previewed because the file is too large for single-click preview.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.CanPreviewItemResult.Delayed">
            <summary>
            The item can be previewed, but the preview has been delayed
            (for instance while we're figuring out whether a mouse click
            was a selection or the beginning of a drag/drop operation).
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.CanPreviewItemResult.Supported">
            <summary>
            The item can be previewed.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ISelectionPreviewController">
            <summary>
            Controls when and how item previewing occurs for a Selector-based control.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ISelectionPreviewController.CanPreviewSelection(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Determines if an item can be previewed based on a selection change.
            </summary>
            <param name="e">The selection change which may cause a preview operation to occur.</param>
            <returns>A result indicating when and if previewing the newly-selected item is supported.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ISelectionPreviewController.CanPreviewItem(System.Object)">
            <summary>
            Determines if an item can be previewed.
            </summary>
            <param name="item">The item which is pending preview.</param>
            <returns>A result indicating when and if previewing the newly-selected item is supported.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ISelectionPreviewController.PreviewItem(System.Object)">
            <summary>
            Called to immediately preview an item.
            </summary>
            <param name="item">The item which should be previewed.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ISelectionPreviewController.NotifyPreviewNotSupported(Microsoft.Internal.VisualStudio.PlatformUI.PreviewNotSupportedReason)">
            <summary>
            Called when a preview operation was considered and rejected.
            </summary>
            <param name="reason">The reason for which previewing was rejected.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ISelectionPreviewController.ClearPreviewNotSupported">
            <summary>
            Called when a preview operation was considered and not rejected, or was rejected
            without a specific reason.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IVsInfoBarUIElementPrivate.OnAddedToHost(Microsoft.VisualStudio.Shell.Interop.IVsInfoBarHost)">
            <summary>
            Notifies the info bar UI element when it is added to the info bar host
            </summary>
            <param name="host"></param>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.PreviewNotSupportedReason.Disabled">
            <summary>
            The item cannot be previewed because preview is disabled for it.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.PreviewNotSupportedReason.Slow">
            <summary>
            The item cannot be previewed because the editor is too slow for single-click preview.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.PreviewNotSupportedReason.Large">
            <summary>
            The item cannot be previewed because the file is too large for single-click preview.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ThemeColorsDeferredResourceDictionary">
            <summary>
            Represents a ResourceDictionary in which the Brush and Color values are defer-loaded
            based on values from the specified theme's colors.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.ThemeColorsDeferredResourceDictionary.GetRgbaColorValue(Microsoft.VisualStudio.Shell.ThemeResourceKey)">
            <summary>
            Return the RGBA color value for the specified theme resource key
            </summary>
            <param name="key"></param>
            <returns>RGBA color value</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.SelectionPreview">
            <summary>
            Attaches the "selection preview" behavior to a Selector control.  An ISelectionPreviewController manages
            when and how selection preview is allowed to occur.  When selection changes happen, the controller is queried
            to determine if previewing is allowed for the new selected item.  If preview is allowed, the controller
            is asked to preview the item.
            
            The PreviewSelectedItem property can be used to disable previewing in all circumstances.  When PreviewSelectedItem
            is set to false, previewing is not allowed regardless of the ISelectionPreviewController's implementation.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.SelectionPreview.UpdateSelectedItemPreview(System.Windows.Controls.Primitives.Selector,System.Boolean)">
            <summary>
            Previews the selected item, if possible
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.SelectionPreview.SuppressSelectionPreview(System.Windows.Controls.Primitives.Selector)">
            <summary>
            Creates an IDisposable object that will suppression single-click preview until it is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.SelectionPreview.PreviewItemState.UpdateSelectedItemPreview(System.Boolean)">
            <summary>
            Previews the selected item, if possible
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.SelectionPreview.PreviewItemState.SuppressSelectionPreview">
            <summary>
            Creates an IDisposable object that will suppression single-click preview until it is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.SelectionPreview.PreviewItemState.DelayedPreviewSelection(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Previews the selection item, delayed.
            </summary>
            <param name="e">SelectionChanged event arguments</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.SelectionPreview.PreviewItemState.StartDelayedPreviewTimer">
            <summary>
            Starts the timer we'll use for delayed previewing
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.SelectionPreview.PreviewItemState.StopDelayedPreviewTimer">
            <summary>
            Stops the timer we started for delayed previewing
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.SelectionPreview.PreviewItemState.OnDelayedPreviewTimerTick(System.Object,System.EventArgs)">
            <summary>
            DispatcherTimer.Tick handler for previewing selected items.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.CrossThreadNotificationQueue`2">
            <summary>
            Represents a queue of objects from a worker thread that notifies a viewer thread of each item's insertion.
            When a change is made to the source queue on the worker thread, a single BeginInvoke is made to the ViewDispatcher.
            Subsequent changes that happen on the background thread before the ViewDispatcher has updated the 
            view will not cause additional BeginInvoke calls to be made.
            
            The collection can only be safely written on a single thread without all users following a locking pattern.
            </summary>
            <typeparam name="TSource">The source type being added on the writer thread.</typeparam>
            <typeparam name="TTarget">The target type being viewed on the viewer thread.
            The source type is converted into the target type on the viewer thread immediately
            before being added to the viewable collection.</typeparam>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CrossThreadNotificationQueue`2.HandleNotification(`1)">
            <summary>
            Called on the viewer thread as an item queued on the background thread is being processed.
            </summary>
            <param name="item">The item that was queued by the background thread.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CrossThreadNotificationQueue`2.ViewDispatcher">
            <summary>
            Gets the Dispatcher used on the thread that is viewing this collection.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CrossThreadNotificationQueue`2.Converter">
            <summary>
            Gets the converter used to convert the items used on the background thread
            to the items being viewed on the viewing thread.  This conversion
            will happen on the viewing thread.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CrossThreadNotificationQueue`2.SynchronizationPriority">
            <summary>
            Gets the priority at which collection changes are synchronized with the viewer thread.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.CrossThreadNotificationQueue`2.TaskCompletionHandle">
            <summary>
            Gets a WaitHandle which becomes signalled when the currently-executing work has completed.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CrossThreadNotificationQueue`2.DrainQueue">
            <summary>
            Drains the queue of pending changes, stopping if the work takes
            more than MaximumUnresponsiveMilliseconds.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.CrossThreadNotificationQueue`2.BeginNotification(`0)">
            <summary>
            Queues a new item for notification on the viewer thread.
            </summary>
            <param name="item">The item to eventually notify the viewer
            thread about.</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DragDropScrollManager">
            <summary>
            Allows an attached behavior on a ScrollViewer or a control that hosts a ScrollViewer.
            When EnableAutoScroll is set to true, the attached behavior observes drag-drop events
            and automatically scrolls the ScrollViewer when the mouse gets near the edge.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DragDropScrollManager.EnableAutoScrollProperty">
            <summary>
            Property set on an element to enable auto-scrolling that element.  When this is set to true, a
            behavior is attached to the element that monitors drag-drop events and automatically scrolls
            the ScrollViewer contained within the target element when the mouse hovers around the outside
            of the contained ScrollContentPresenter.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DragDropScrollManager.ScrollObserverProperty">
            <summary>
            Private property that stores the attached behavior instance.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DragDropScrollManager.DragDropAutoScrollObserver">
            <summary>
            Observes a target element for drag-drop events, and watches
            for the mouse to remain in regions that should auto-scroll, and performs
            auto-scrolling when that happens.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.DragDropScrollManager.DragDropAutoScrollObserver.CurrentRegion">
            <summary>
            Gets or sets the current region for auto-scrolling.  This region
            is determined by the mouse position relative to the ScrollContentPresenter
            while drag-drop is in progress.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.DragDropStateManager">
            <summary>
            Helper class that attaches two useful properties to elements to be used during drag-drop.
            IsDragDropOver is similar to IsMouseOver.  It's set to true on all elements currently being
            dragged over.  IsDragDropDirectlyOver is similar to IsMouseDirectlyOver.  It's set to true
            only on the topmost element being dragged over.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.DragDropStateManager.IsDragDropOverChangedEvent">
            <summary>
            Direct event raised on each item after its IsDragDropOver property value changed.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DraggableListBoxItem.CancelDrag">
            <summary>
            Cancel a drag operation. Release mouse capture and notify that dragging has
            finished by a cancelation.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.DraggableListBoxItem.CompleteDrag">
            <summary>
            Complete a drag operation. Release mouse capture and notify that dragging has
            finished by a successful drag completion.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.EditableItemTextBox.MeasureOverride(System.Windows.Size)">
            <summary>
            Override measure so that there is a clickable pad to the right of the text
            The Padding property causes an area that clicks through the control and gives focus
            to the host of the text box causing the edit transaction to be committed.
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.EnumerableSnapshot">
            <summary>
            Class which stores a stable snapshot of a collection which could potentially
            change during enumeration, and detects changes to the source enumerable
            if that enumerable implements INotifyCollectionChanged.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.EnumerableSnapshot.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.EnumerableSnapshot.DetectedChange">
            <summary>
            Returns true if any changes were detected while this snapshot
            was alive.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.EnumerableSnapshot.ChangeSource">
            <summary>
            Gets or sets the INotifyCollectionChange being observed
            for collection changes during enumeration.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IFilteredItemsSource.GetFilterDescendantsBehavior(System.Object)">
            <summary>
            Determines whether descendants of the specified item are available when no descendants are explicitly
            included in the filtered items. If any descendants are explicitly included, the result of this method
            has no effect. If descendants are not explicitly included and this method returns IncludeDescendantsByDefault,
            then the full descendant tree will be available.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IndentToMarginConverter.Convert(System.Int32,System.Boolean,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what the indent level should be for a VirtualizingTreeViewItem
            based on the depth of the item and whether or not root expansion indicators
            are shown.
            </summary>
            <param name="value1">The depth of the item in the tree, with 0 being the top-level items.</param>
            <param name="value2">True if expansion indicators are shown at the root, false if they are not.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>The margin that should be applied to the item to indent it properly in the tree.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.InteractionPatternProvider">
            <summary>
            Helper class to query for a pattern from an object that may or may not support
            IInteractionPatternProvider.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.InteractionPatternProvider.GetPattern``1(System.Object)">
            <summary>
            Tries to query an item for IInteractionPatternProvider, and if successful queries
            the provider to see if it supports a specific pattern.
            </summary>
            <typeparam name="TPattern">The pattern to query the item's IInteractionPatternProvider implementation for.</typeparam>
            <param name="item">The item that may implement IInteractionPatternProvider.</param>
            <returns>The instance of the pattern implementation, or null if the pattern was not supported.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.InteractionPatternProvider.GetPatterns``1(System.Collections.IEnumerable)">
            <summary>
            Converts a sequence of objects into a pattern for the subset of objects that are IInteractionPatternProviders.
            </summary>
            <typeparam name="TPattern">The pattern to query the item's IInteractionPatternProvider implementation for.</typeparam>
            <param name="sourceItems">The set of source items to retrieve patterns from.</param>
            <returns>A sequence of pattern implementations from the items that support the pattern.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IToolTipVisibilityController">
            <summary>
            Represents an object which can control the content of a tooltip and whether or not
            that tooltip should be shown at a given position.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IToolTipVisibilityController.GetToolTipContent">
            <summary>
            Gets the content that should be used for the tooltip.  This
            can be a potentially expensive operation that should only be invoked
            when the tooltip is about to be displayed.
            </summary>
            <returns>The object that should be shown at the root of the tooltip.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IToolTipVisibilityController.CanShowToolTip(System.Windows.Point)">
            <summary>
            Determines if the tooltip can be shown at the given position.
            </summary>
            <param name="elementRelativePosition">A point relative to the FrameworkElement
            the tooltip is associated with.</param>
            <returns>True if the tooltip should be shown at the given position, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode">
            <summary>
            Represents a node in a VirtualizingTreeView.
            </summary>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.Expanded">
            <summary>
            Event raised immediately after the node is expanded in the tree.
            </summary>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.Collapsed">
            <summary>
            Event raised immediately after the node is collapsed in the tree.
            </summary>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.ExpandedItemsLoaded">
            <summary>
            Event raised when the possibly-async collection of items contained
            within this node is realized after having expanded the node.  If
            the node is subsequently collapsed, or collapsed and re-expanded,
            after the initial Expanded event but before ExpandedItemsLoaded,
            ExpandedItemsLoaded will still be raised exactly one time for the node.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.IsExpanded">
            <summary>
            Gets or sets the expansion state of the node.  If the node is not expandable,
            attempting to set IsExpanded to true will result in no change (the node's
            IsExpanded value will remain false after the set completes).
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.IsExpandable">
            <summary>
            Gets whether or not the node can be expanded.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.Item">
            <summary>
            Gets the item representing the content of this node.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.ItemsSource">
            <summary>
            Gets the collection of child items contained by this node.
            If the node has never been expanded, this enumerable will be null.
            RealizeChildNodes can be used to initialize the ItemsSource for a node
            that has never been expanded without expanding the node.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.Parent">
            <summary>
            Gets the parent node for this node.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.ChildNodes">
            <summary>
            Gets the collection of child IVirtualizingTreeNodes contained by this node.
            If this node has not been expanded, ChildNodes will return an empty collection.
            RealizeChildNodes can be used to construct the ChildNodes collection for a node
            that has never been expanded without expanding the node.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.DescendantNodes">
            <summary>
            Enumerates all realized descendant nodes of this node.  Children of nodes which are expandable
            but which have never been expanded will not be enumerated.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.RealizeChildNodes">
            <summary>
            Realizes this node's ChildNodes if they haven't been created yet.  If the node has
            never been expanded, this will construct child nodes without expanding
            the node.  If the node has been expanded, or if RealizeChildNodes has already
            been invoked, this method has no effect.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.PropertyStore">
            <summary>
            Gets a DependencyObject instance which can be used to attach properties
            to this IVirtualizingTreeNode instance.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.AreChildNodesRealized">
            <summary>
            Returns true if the ChildNodes collection for this node is realized
            and attached to live data, or false if the ChildNodes collection
            is empty because this node has never been expanded and the RealizeChildNodes
            function has never been invoked.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.IsFilterActive">
            <summary>
            Determines if the node's children are currently being filtered.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.IsIncludedInFilter">
            <summary>
            Determines if the node is currently included in the filter.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.IsExplicitlyIncludedInFilter">
            <summary>
            Determines if the node is included in the filter directly.
            This will be true if the filtered set includes the node, and
            will be false if the node was included only because it is an
            ancestor of an explicitly-included node.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.IsVisible">
            <summary>
            Determines if the node is currently visible in the treeview.
            If the treeview is being filtered this will be determined by its
            inclusion in the filter.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode.RefreshAsync">
            <summary>
            Begins to refresh the children of this node, which is potentially
            an asynchronous operation.  Some types of nodes may keep children
            always updated, and may return synchronously.
            </summary>
            <returns>A task which tracks the lifetime of the refresh operation.
            The task may already be completed synchronously, or may complete
            asynchronously when the refresh completes.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNodeInternal">
            <summary>
            Internal contract for a node in a VirtualizingTreeView.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNodeInternal.IsCollapsing">
            <summary>
            Gets a value that determines if the current node is being collapsed.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigationEntry">
            <summary>
            Represents a step in the forward/backward navigation of a PivotNavigator instance.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigationEntry.RootItems">
            <summary>
            Gets the root item displayed with this navigation entry.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigationEntry._relationship">
            <summary>
            Gets the relationship associated with the tree at this navigation entry.
            </summary>
            
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigationEntry._navigator">
            <summary>
            Gets the navigator instance associated with this navigation entry.
            </summary>
            
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigationEntry.OnNavigateTo">
            <summary>
            Method called by the PivotNavigator when this navigation entry is being presented
            in the PivotNavigator.
            </summary>
            <returns>The PivotTreeView instance that should be displayed by the navigator.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigationEntry.OnNavigateAway">
            <summary>
            Method called by the PivotNavigator when this navigation entry is about to be navigated away from.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigationEntry.ShouldHandleEscape">
            <summary>
            Gets whether or not pressing Escape should leave this navigation entry.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigator.Owner">
            <summary>
            ToolWindowPane that owns this navigator.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigator.OnSelectionChanged">
            <summary>
            Called when the selection within the current tree changed, or if the current
            tree is replaced with a different tree that might contain different selection.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigator.TrySynchronzeSelectionBetweenTrees(Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView)">
            <summary>
            Attempts to transfer selection state from another tree control to the current tree.  This method
            only transfers single-selection between two trees--if there is a multiple
            selection in <paramref name="sourceTree" />, the selection of the current tree is unaltered.
            If the current tree does not contain the selected item from the previous tree, selection may also
            not change.
            </summary>
            <param name="sourceTree">The tree to synchronize selection from.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigator.ExpandToItemInTreeCore(System.Object)">
            <summary>
            Implements the core logic for ensuring an item is expanded.  This method
            doesn't know how to resolve an item that doesn't currently have a realized
            node, but derived classes may supply additional logic to realize ancestor
            items for the item on demand.
            </summary>
            <param name="item">The item to ensure the ancestors are expanded for.</param>
            <returns>The node representing the item, or null if the item couldn't
            be found in the current tree.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigator.SelectItemInTreeCore(Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode,Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeSelectionAction,System.Boolean)">
            <summary>
            Implements the core logic for selecting an item in the current tree.
            </summary>
            <param name="node">The node to select in the tree.</param>
            <param name="action">The selection action to take on the item.</param>
            <param name="scrollIntoView">Whether or not to scroll the item into view.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigator.ExpandToItemInTree(System.Object)">
            <summary>
            Expands items in the current tree view to ensure that the given item is expanded.
            </summary>
            <param name="item">The item to expand the ancestors of in the current tree.</param>
            <returns>The node corresponding to the item that was expanded, or null
            if the item couldn't be found in the tree.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotNavigator.SelectItemInTree(System.Object,Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeSelectionAction,System.Boolean)">
            <summary>
            Selects an item in the current tree view, expanding the item's ancestors if necessary.
            </summary>
            <param name="item">The item to select.</param>
            <param name="action">The selection action to take on the item.</param>
            <param name="scrollIntoView">Whether or not to scroll the item into view.</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.PivotRelationshipNavigationEntry">
            <summary>
            Represents an entry in which a root item's subtree for a given relationship is shown.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.GetTreeNodeKeyFromItem(System.Object)">
            <summary>
            For purposes of mapping items to IVirtualizingTreeNode instances, always use the unwrapped
            source item as the key.
            </summary>
            <param name="item">The item, which may be wrapped in an IAttachedCollectionSource
            in the tree.</param>
            <returns>The object which should be used as a key for finding the IVirtualizingTreeNodes
            corresponding to an item.</returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.UseSingleMouseSelection">
            <summary>
            UseSingleMoustSelection mode on PivotTreeView means that the selection is always handles as single item selection,
            even though SelectionMode is still set to Multiple. UseSingleMouseSelection is utilized by SolutionPivotNavigator filtering feature.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.ContextMenuIsEnabled(System.Windows.DependencyObject)">
            <summary>
            Logic is copied from the internal ContextMenuService.ContextMenuIsEnabled
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.IsElementEnabled(System.Windows.DependencyObject)">
            <summary>
            Logic is copied from the internal PopupControlService.IsElementEnabled
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.GetInvocationPattern(Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode)">
            <summary>
            Returns the invocation pattern for the given tree node.
            </summary>
            <param name="node">Tree node to inspect</param>
            <returns>The invocation pattern for the node, or null if not supported</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.Microsoft#Internal#VisualStudio#PlatformUI#ISelectionPreviewController#PreviewItem(System.Object)">
            <summary>
            Opens the given node in preview mode
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.EstablishInvocationScope(System.Boolean)">
            <summary>
            Gives derived classes an opportunity to establish a scope around the preview
            action, such as a NewDocumentStateScope.
            </summary>
            <param name="preview">Is this for a preview invocation?</param>
            <returns>Object that will be disposed after the preview is complete.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.Dispose">
            <summary>
            Disposes the current object then suppresses further finalization.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.IsDisposed">
            <summary>
            Returns whether the object has been disposed once, protects against double disposal
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.ThrowIfDisposed">
            <summary>
            Throws an ObjectDisposedException if this object has been disposed
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.Dispose(System.Boolean)">
            <summary>
            Standard virtual overload for <see cref="T:System.IDisposable" /> pattern
            </summary>
            <param name="disposing">
            <c>True</c> means this is a call to <see cref="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.Dispose" />.
            <c>False</c> means it has been called from the finalizer.
            </param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.DisposeManagedResources">
            <summary>
            Allows derived classes to provide custom dispose handling for managed resources
            </summary>
            <remarks>
            Derived classes are expected to override this method to dispose their managed resources, then call the base class.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView.DisposeNativeResources">
            <summary>
            Allows derived classes to provide custom dispose handling for native resources
            </summary>
            <remarks>
            Derived classes are expected to override this method to dispose their native resources, then call the base class.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeViewItem.GetIsSelectionTarget(System.Windows.DependencyObject)">
            <summary>
            Gets whether or not mouse events through an element should always cause single selection
            regardless of the handled state of the event.
            </summary>
            <param name="element">The element to determine the selection target state of.</param>
            <returns>True if any handled mouse events on the item should cause single selection,
            otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeViewItem.SetIsSelectionTarget(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets an element as as selection target.  If a handled mouse event is seen in the subtree
            of an element that is a selection target, that mouse event will cause selection
            of the tree item.
            </summary>
            <param name="element">The element to set the selection target state of.</param>
            <param name="value">True if any handled mouse events on the item should cause single selection,
            otherwise false.</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeViewTextSearch">
            <summary>
            Handles custom TextSearch functionality for the PivotTreeView.
            
            Much of this code is a copy of System.Windows.Controls.TextSearch. 
            This class differs from the TextSearch class in the following ways:
            1. PivotTreeViewTextSearch always starts at the current item in the tree, where
               the WPF TextSearch class starts at the first item every time the search
               is reset
            2. PivotTreeViewTextSearch doesn't require a TextPath, as it can locate
               the text from the ITreeDisplayItem pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeViewTextSearch.Search(Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView,System.String)">
            <summary>
            Extends the search by scoping based on the next input character.
            This function is called during text input.
            </summary>
            <param name="treeControl">The control the search is starting or continuing on.</param>
            <param name="nextChar">The text input added to the control.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeViewTextSearch.DeleteLastCharacter(Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView)">
            <summary>
            Removes a previously-added character from the control.  This function
            is called when a Back key is pressed in the tree.
            </summary>
            <param name="treeControl">The control to remove a searched character from.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeViewTextSearch.GetCurrentItemIndex">
            <summary>
            Gets the current item from the tree.  This is the focused item
            (or, if focus is not within the control, the selected item).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeViewTextSearch.NavigateToItem(System.Int32)">
            <summary>
            Navigates to the item at the given index by scrolling it into view
            and focusing it.
            </summary>
            <param name="index">The index of the item to navigate to.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeViewTextSearch.DeleteLastCharacter">
            <summary>
                Called when the user presses backspace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeViewTextSearch.FindMatchingPrefix(System.Windows.Controls.ItemsControl,System.String,System.String,System.Int32,System.Boolean,System.Boolean@)">
             <summary>
                 Searches through the given itemCollection for the first item matching the given prefix.
             </summary>
             <remarks>
                 --------------------------------------------------------------------------
                 Incremental Type Search algorithm
                 --------------------------------------------------------------------------
            
                 Given a prefix and new character, we loop through all items in the collection
                 and look for an item that starts with the new prefix.  If we find such an item,
                 select it.  If the new character is repeated, we look for the next item after
                 the current one that begins with the old prefix**.  We can optimize by
                 performing both of these searches in parallel.
            
                 **NOTE: Win32 will only do this if the old prefix is of length 1 - in other
                         words, first-character-only matching.  The algorithm described here
                         is an extension of ITS as implemented in Win32.  This variant was
                         described to me by JeffBog as what was done in AFC - but I have yet
                         to find a listbox which behaves this way.
            
                 --------------------------------------------------------------------------
             </remarks>
             <returns>Item that matches the given prefix</returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeViewTextSearch.TimeOut">
            <summary>
            Gets the timeout period, after which the state machine will reset and begin
            a new search.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeViewTextSearch.GetPrimaryText(Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode)">
            <summary>
            Gets the text associated with an item in the control.  This text
            is found using the ITreeDisplayItem associated with the node.
            </summary>
            <param name="node">The node to extract the text from.</param>
            <returns>The string representation of the node used for text searching.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeViewTextSearch.GetOrCreateInstance(Microsoft.Internal.VisualStudio.PlatformUI.PivotTreeView)">
            <summary>
            Gets or creates a PivotTreeViewTextSearch instance associated with the given control.
            This instance will serve as a state machine for text search.
            </summary>
            <param name="control">The control to locate or create the text search instance for.</param>
            <returns>The text search instance associated with the control.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.RelationshipTextConverter">
            <summary>
            Represents a converter that returns formatted text "ItemName [RelationshipName]"
            for the root item of non-default relationships, but returns only "ItemName"
            in all other cases.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ScreenDragCompletedEventArgs">
            <summary>
            Class that describes arguments of DragCompleted event. Indicates if
            dragging was completed successfully or not.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.ScreenDragCompletedEventArgs.IsCompleted">
            <summary>
            Indicates if dragging was canceled or it was completed successfully.
            True if dragging was completed, false if it was canceled.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ScreenDragEventArgs">
            <summary>
            Class similar to DragEventArgs that also contains the screen
            coordinates for the mouse's current location.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.SingleItemTrackingCollection">
            <summary>
            Represents an IList implementation that returns a single item.
            This implementation is lifetime aware.  If the single item implements ITransientObject, the list
            will auto-expire when the single item expires.  If the single item implements IResurrectableObject,
            the single item may be replaced with the resurrected object instance upon expiration.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.SpinAnimationControl">
            <summary>
            Represents a spin animation control, which animates a rotating band
            of circles of various transparencies over a given time period.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.SpinAnimationControl.ControlPointCount">
            <summary>
            Gets or sets the number of control points used to draw the ring used in the spin
            animation.  This represents how many dots will be included in the rotating ring.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.SpinAnimationControl.ControlPointRadius">
            <summary>
            Gets or sets the radius of each control point used when drawing the ring
            for the spin animation.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.SpinAnimationControl.IsClockwise">
            <summary>
            Gets or sets whether or not the animation should be drawn clockwise.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.SpinAnimationControl.RotationPeriod">
            <summary>
            Gets or sets the time span over which a full revolution rotation will happen.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.SpinAnimationControl.IsSpinning">
            <summary>
            Gets the spinning state of the control. When true, an animation is running
            that will rotate the control over the RotationPeriod.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.SpinAnimationControl.SpinAnimationRenderer">
            <summary>
            Represents the rendering of the spin animation, which runs on a background thread.  This avoids
            pauses in the animation when the UI thread becomes busy or blocked.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.SpinAnimationControl.SpinAnimationRenderer.ControlPointCount">
            <summary>
            Gets or sets the number of control points used to draw the ring used in the spin
            animation.  This represents how many dots will be included in the rotating ring.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.SpinAnimationControl.SpinAnimationRenderer.ControlPointRadius">
            <summary>
            Gets or sets the radius of each control point used when drawing the ring
            for the spin animation.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.SpinAnimationControl.SpinAnimationRenderer.IsClockwise">
            <summary>
            Gets or sets whether or not the animation should be drawn clockwise.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.SpinAnimationControl.SpinAnimationRenderer.RotationPeriod">
            <summary>
            Gets or sets the time span over which a full revolution rotation will happen.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.SpinAnimationControl.SpinAnimationRenderer.IsSpinning">
            <summary>
            Gets the spinning state of the control. When true, an animation is running
            that will rotate the control over the RotationPeriod.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.SpinAnimationControl.SpinAnimationRenderer.AnimationIndex">
            <summary>
            Gets or sets the current frame index for the animation. This index represents
            the number of points the image should be rotated (out of the total number
            of control points).
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.SuspendableObservableCollection`1">
            <summary>
            Represents an ObservableCollection that has the capacity to temporarily
            suspend forwarding change notifications.  If any changes are made
            while observation is suspended, a Reset change notification will be raised
            once change tracking is resumed.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.SuspendableObservableCollection`1.SuspendChangeNotification">
            <summary>
            Temporarily suspends all change notification until all such
            returned disposable objects have been disposed.
            </summary>
            <returns>An object whose lifetime prevents change notifications
            from being raised.</returns>
            <remarks>Once all such returned instances are disposed,
            the collection will raise a Reset collection change event
            if any changes were made while processing was suspended.</remarks>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.ToolTipVisibilityManager">
            <summary>
            Manages the visibility of tooltips on an element by querying
            a given IToolTipController at the approriate times for information about
            the content and visibility of the tooltip.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter">
            <summary>
            Represents a class which can handle specific rendering of items in a treeview.
            
            This class is specifically concerned with the proper layout and rendering of these
            major parts:
            1. The expand/collapse button.
            2. The icon area, including the icon, state icon, and overlay icon.
            3. The normal label text.
            4. The edit box when renaming an item.
            5. The pivot button used to show alternate relationships and create multiple views.
            6. The in-between drag-drop indicator for reordering items.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.IsInSpinAnimation">
            <summary>
            Gets or sets whether or not the spin animation is currently being shown.  Spin animations
            are shown if IsExpandingAsynchronously is set to true, and if the delay specified
            by SpinAnimationStartDelay has already passed.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.GetAutomationClickablePoint">
            <summary>
            Gets a point that is safe to click to select this item, if such a point exists.
            </summary>
            <returns>A point on which it is safe to click on this item, in screen coordinates.
            Otherwise, Double.NaN values are returned.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.ExcludeRect(System.Windows.Rect@,System.Windows.Rect)">
            <summary>
            Excludes a rectangle from consideration as a potential clickable region.
            </summary>
            <param name="bounds">The current clickable region, updated
            based on boundsToExclude</param>
            <param name="boundsToExclude">The bounds that is not clickable.</param>
            <returns>True if a non-empty region still exists that's clickable, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.DrawBorder(System.Windows.Media.DrawingContext,System.Windows.Rect,System.Windows.Media.Brush,System.Windows.Media.Pen)">
            <summary>
            Draws a border so that the lines for the stroke are drawn in the theoretical center
            of pixels, assuming that layout rounding is being used.
            </summary>
            <param name="drawingContext">The context to draw the border in.</param>
            <param name="bounds">The rectangle to draw the border in.</param>
            <param name="background">The brush to use for the background.</param>
            <param name="border">The pen to use for the border.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.InitializeBindings">
            <summary>
            Sets up all data bindings for the TreeItemPresenter
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.InitializeLibraryBindings">
            <summary>
            Sets up image library data bindings for the TreeItemPresenter
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.InitializeDpiBindings">
            <summary>
            Sets up DPI data bindings for the TreeItemPresenter
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.InitializeHighContrastBindings">
            <summary>
            Sets up high contrast data bindings for the TreeItemPresenter
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.ExpanderLayoutPart.IsVisible">
            <summary>
            Determines if the expander should be shown or not.  When the root expander
            is hidden for the tree, or when the item is non-expandable, the expander shouldn't
            be rendered or used for hit-testing (although the expander does still take up
            space)
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.ExpanderLayoutPart.DrawExpander(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the expansion indicator based on the expanded state and selection state of the item,
            and the mouseover state of the expander.
            </summary>
            <param name="context">The DrawingContext to render the expansion indicator into.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.ExpanderLayoutPart.IsOwnerActiveAndSelected">
            <summary>
            Gets whether or not this item is drawn in the selected-and-active state.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.ExpanderLayoutPart.IsGlyphFilled">
            <summary>
            Gets whether or not the glyph for expansion should be filled.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.IconLayoutPart.GetTopLeft">
             <summary>
             VSO Bug #840090
            
             After fixing several DPI scaling bugs in the Solution Explorer, we still received bugs about overly
             blurry Solution Explorer icons when running at 125% DPI. After testing, it appears that x25% and x75%
             scales don't behave well with non-zero top/left values for the image rect. This issue manifests as poor
             vertical aliasing on all images in the solution tree, and poor horizontal aliasing on all odd depth
             nodes in the solution tree. Color comparison showed that when this issue occurs, the images are
             (nearly) perfectly halfway between pixel boundaries. So, to counteract the undesired aliasing:
            
             - If the current scale is NOT x25% or x75%, then the image will be pixel aligned, so:
                 - xOffset = 0
                 - yOffset = 0
             - If the current scale IS x25% or x75%, then:
                 - xOffset = 0 if on an even depth
                           = 0.5 if on an odd depth
                 - yOffset = 0.5 always
             </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.LayoutPart">
            <summary>
            Represents a sub-part of the TreeItemPresenter that can handle
            positioning, rendering, minimal mouse interaction, and
            hosting a real FrameworkElement in the TreeItemPresenter.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.LayoutPart.Width">
            <summary>
            Gets the width of this part, or calculates the width
            if it has not been calculated.  When layout is invalidated
            (by InvalidateMeasure or InvalidateArrange), the backing
            field will be cleared, and the value will be recalculated
            upon the next query.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.LayoutPart.Height">
            <summary>
            Gets the height of this part, or calculates the height
            if it has not been calculated.  When layout is invalidated
            (by InvalidateMeasure or InvalidateArrange), the backing
            field will be cleared, and the value will be recalculated
            upon the next query.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.LayoutPart.Top">
            <summary>
            Gets the offset to the top of this part from the TreeItemPresenter,
            or calculates the top if it has not been calculated.  When layout is invalidated
            (by InvalidateMeasure or InvalidateArrange), the backing
            field will be cleared, and the value will be recalculated
            upon the next query.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.LayoutPart.Left">
            <summary>
            Gets the offset to the left of this part from the TreeItemPresenter,
            or calculates the top if it has not been calculated.  When layout is invalidated
            (by InvalidateMeasure or InvalidateArrange), the backing
            field will be cleared, and the value will be recalculated
            upon the next query.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.LayoutPart.Bounds">
            <summary>
            Gets the bounds of this part relative to the tree control, or
            calculates the bounds if they haven't been calculated.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.LayoutPart.Measure">
            <summary>
            Measures and returns the size requested by this part.
            If this part hosts a child FrameworkElement, the FrameworkElement's
            Measure will already have produced a DesiredSize before LayoutPart.Measure
            is called.
            </summary>
            <returns>The size requested by this part.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.LayoutPart.Arrange">
            <summary>
            Positions and returns the offset from the TreeItemPresenter
            requested by this part.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.LayoutPart.InvalidateMeasure">
            <summary>
            Clears the backing fields that store measure information, causing
            them to be recalculated when they're next accessed.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.TreeItemPresenter.LayoutPart.InvalidateArrange">
            <summary>
            Clears the backing fields that store arrange information, causing
            them to be recalculuated when they're next accessed.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView">
            <summary>
            A tree view control based on ListBox instead of TreeView.
            Supports virtualization and multiselection.
            </summary>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.NodeExpanded">
            <summary>
            Event raised immediately after a node is expanded in the tree.
            </summary>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.NodeCollapsed">
            <summary>
            Event raised immediately after a node is collapsed in the tree.
            </summary>
        </member>
        <member name="E:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.NodeExpandedItemsLoaded">
            <summary>
            Event raised when the possibly-async collection of items contained
            within a node is realized after having expanded the node.  If
            the node is subsequently collapsed, or collapsed and re-expanded,
            after the initial Expanded event but before ExpandedItemsLoaded,
            ExpandedItemsLoaded will still be raised exactly one time for the node.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.MaxSearchResultNodes">
            <summary>
            The maximum number of expanded nodes per search result item
            that we're able to handle without introducing a UI delay.
            A bit of an arbitrary value at 100. If it is hit too often
            and we get user feedback about it, we probably can increase it.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.MaxSearchResultNodesExceeded">
            <summary>
            Indicates whether a search result item expanded nodes exceeded a
            maximum node count threshold put in place to minimize UI delays.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ItemsPath">
            <summary>
            Gets or sets the PropertyPath that should be used to bind each set of child items
            for items in this VirtualizingTreeView.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.IsExpandablePath">
            <summary>
            Gets or sets the PropertyPath that should be used to bind the IsExpandable property
            on each child item in this VirtualizingTreeView.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ItemToCollectionSourceAdapter">
            <summary>
            Converter which can transform an item into a collection source.  The collection source is an object which can be bound to
            by the ItemsPath and IsExpandablePath properties.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ShowRootExpander">
            <summary>
            Gets or sets whether or not the expand/collapse button is shown for root items in the tree.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.InternalItems">
            <summary>
            All access to the Items collection of the ListBox should go through this wrapper.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.RootItemsSource">
            <summary>
            Gets or sets the root ItemsSource.  This is the ItemsSource for the root items in the tree.
            The ListBox.ItemsSource should not be used for tree data, as it corresponds to all of the
            items in the list.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.FilterParentEvaluator">
            <summary>
            Gets or sets a function which is used to find the set of parents containing an item in the tree.
            This function is used when a filter is applied to construct new tree nodes to extend the tree
            to complete the filter.  Otherwise, the tree would have to be pre-expanded, and all of the
            real, bound intermediate nodes would have to be realized.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.FilteredItemsSource">
            <summary>
            Gets or sets the collection of items that are explicitly included by the filter.  When this property is null,
            the tree is unfiltered.  When this property is non-null, only the objects which are included in this collection and
            their ancestors up to the root are included in the tree.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.AutoExpandFilteredItems">
            <summary>
            Determines if items added to the filter should be auto-expanded or not.  By default, when
            the FilteredItemsSource is assigned, or when the collection assigned is updated,
            the expansion state of each item will not be modified.
            If this property is set to true, each time an item is added to the filter, the item will be expanded
            automatically.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.GetFirstTreeNode(System.Object)">
            <summary>
            Returns the TreeNode instance corresponding to the item.  If multiple TreeNode
            instances corresponding to the item exist in the tree, this method returns
            the instance with the smallest depth first, followed by the closest to the top
            of the tree.
            </summary>
            <param name="item">The item to find the tree node for.</param>
            <returns>The node instance corresponding to the item that has the smallest depth
            followed by the lowest index.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.GetTreeNodes(System.Object)">
            <summary>
            Gets the IVirtualizingTreeNode wrapping an item instance.
            </summary>
            <param name="item">The item to retrieve the IVirtualizingTreeNode instance for.</param>
            <returns>The node instance corresponding to the item, or null if the item is
            not part of the tree and thus does not have a corresponding node.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ScrollIntoViewWhenPossiblyUnloaded(Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode)" -->
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ScrollIntoViewWhenUnloaded(Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode)">
            <summary>
            Schedules scrolling an element into view when the tree view is currently unloaded (see ScrollIntoViewWhenPossiblyUnloaded)
            </summary>
            <param name="selectionTarget">The node to scroll into view.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.EnsureInView(Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode)">
            <remarks>
              VSO #475281: When Solution Explorer is auto hidden and active item is tracked, switching between editor
            and Solution Explorer may trigger scroll into view twice (see bug fix comment in
            <see cref="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ScrollIntoViewWhenPossiblyUnloaded(Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode)" />. Even when the item is in view, invoking ScrollIntoView
            multiple times on loaded / unloaded may cause redundant scrolling. Fix this issue by only scroll when the
            item is not in view.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.CancelPendingScrollRequestCheck">
            <summary>
            Cancels any pending scroll request check (see ScrollIntoViewWhenPossiblyUnloaded).
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ChangeSelection(Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeSelectionAction,System.Boolean,System.Int32)">
            <summary>
            Selects a range of items given a direction, count of items and an action type, and ensures that scroll state
            and anchor item state are properly updated based on the action.
            </summary>
            <param name="action">The type of selection change to perform.</param>
            <param name="forward">The direction the action should take place over a distance of 'count'</param>
            <param name="count">The distance over which the selection action should occur.  MaxInt will result in all items in the direction being selected for extending selection.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ChangeSelection(Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode,Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeSelectionAction,System.Boolean)">
            <summary>
            Selects the target item using the given action, and ensures that scroll state
            and anchor item state are properly updated based on the action.
            </summary>
            <param name="selectionTarget">The type of selection change to perform.</param>
            <param name="action"></param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.IsDirectlyGainingKeyboardFocus">
            <summary>
            Gets whether or not this VirtualizingTreeView is currently being directly focused.  When directly focused,
            the treeview forwards focus to the ideal VirtualizingTreeViewItem, but should avoid changing the scroll state.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Invoked when an unhandled Keyboard.GotKeyboardFocus attached event reaches this element.
            </summary>
            <remarks>
            - Bug 428516: When an existing project is added to a solution, the new node is selected and expanded in
              Solution Explorer. When focus is returned to Solution Explorer, the following happens:
              1. New node is added, project system tells Solution Explorer to select the new node - ChangeSelection
                 with SingleSelection.
              2. However Solution Explorer has not received focus yet, so in UpdateAnchorItemCore, it only sets a flag
                 to delay focus the anchor item.
              3. This works fine if the focus is switched to an editor, next time Solution Explorer gets focus, it will
                 focus on the anchor item if needed. However, if no editor is opened (add existing project), Window
                 Manager will restore focus to the last element it remembers - the solution node. This results in a bug
                 where the new project node is selected but focus remains on the solution node.
              To fix this problem in a low risk scope:
              1. In UpdateAnchorItemCore, when delay focusing new anchor node, also store the previous anchor node.
              2. In ChangeSelection - SetAnchorItem, if the new item is the same as the previous anchor node, no-op.
              3. In this method, when receiving focus indirectly, focus on the anchor item if in delay focus mode.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.SelectFirstFilteredItem">
            <summary>
            Selects the first filtered item in the Items collection.
            </summary>
            <returns>True if the first filtered item was selected, false if there were no filtered items</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.GetFirstFilteredItem">
            <summary>
            Returns the first filtered item in the Items collection, or null if there isn't one.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.SetAnchorItem(System.Object,System.Boolean)">
            <summary>
            Sets the anchor item for the underlying list box
            </summary>
            <param name="item">The node to be the anchor item</param>
            <param name="validateItemContainer">
            Specifies whether a check should be performed to ensure the item has a container before setting anchor
            </param>
            <remarks>
            - https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1002721 - When a virtualized item is focused in
              <see cref="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.FocusNode(Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode)" />, the focus and set anchor action is dispatched to a later
              time in <see cref="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.GetContainerForItemOverride" />. From Watson, it's possible for the item to become
              without a container again, and anchor item setter will throw. Check to ensure the item has a container,
              and also ignore non-state-corruption exceptions because setting anchor is not critical.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ExpandNodeRecursively(Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode)">
            <summary>
            Recursively expands the given node and its descendants in the tree.
            </summary>
            <param name="node">The node which should be expanded, along
            with its descendants.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.AnchorNode">
            <summary>
            Gets or sets the anchor TreeNode.   This will be the focused node when the tree has focus.
            The anchor item will be used for extend selection.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.RootNode">
            <summary>
            Gets or sets the root TreeNode in the tree.  The RootNode does not correspond
            to a visual element in the tree.  Logically, it is the parent of the top-level
            items in the tree.  The ItemsSource of the RootNode contains the top-level
            tree nodes (which come from the RootItemsSource).  See the TreeNode comments
            for more information.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.RootNodes">
            <summary>
            Gets the collection of root IVirtualizingTreeNode instances
            displayed in the tree.  Each IVirtualizingTreeNode instance in this collection
            wraps an item in the RootItemsSource and exposes expansion and tree structure
            data about the item.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.CommitChangesBeforeExpansionChange">
            <summary>
            Commits changes (for example name change for a node in rename mode) before the expansion state changes.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.RealizedNodes">
            <summary>
            Returns every IVirtualizingTreeNode that's currently realized in the tree.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.CreatePlaceholderNodesForFilteredItemAndContainers(System.Object)">
            <remarks>
            This must be implemented lazily because sometimes we want to stop before enumerating all
            the results (e.g. when the nodes matching a given item exceed <see cref="F:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.MaxSearchResultNodes" />).
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.GetTreeNodeKeyFromItem(System.Object)">
            <summary>
            Gets the key that should be used to associate an item added to the tree with the TreeNode
            that wraps the item for expansion/selection purposes.
            </summary>
            <param name="item">The data item retrieved from the data model bound to this tree.</param>
            <returns>The object instance that should be used as a key for associating <paramref name="item" />
            with the TreeNode instance in the tree.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.GetVerifiedTreeNodeKeyFromItem(System.Object)">
            <summary>
            Gets the key for an item, and verifies that it is a valid, non-null key.
            </summary>
            <param name="item">The data item retrieved from the data model bound to this tree.</param>
            <returns>The object instance that should be used as a key for associating <paramref name="item" />
            with the TreeNode instance in the tree.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.GetTreeNodesCore(System.Object)">
            <summary>
            Gets the TreeNode corresponding to a data item.
            </summary>
            <param name="item">The item to get the TreeNode for.</param>
            <returns>A TreeNode corresponding to <paramref name="item" />, or <c>null</c> if the TreeNode
            has not been created.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.GetOrCreateTreeNode(System.Object,Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode)">
            <summary>
            Gets an existing TreeNode, or creates and returns a new TreeNode for the given
            data item.
            </summary>
            <param name="item">The item to get the TreeNode for.</param>
            <param name="parentNode">The parent of the item, if the node needs to be created.</param>
            <returns>A TreeNode corresponding to <paramref name="item" />.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.RemoveAllNodes">
            <summary>
            Removes all nodes when the tree view is disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.RemoveTreeNode(Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode)">
            <summary>
            Removes the cached TreeNode for an item.
            </summary>
            <param name="item">The item to remove the TreeNode for.</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNodeState">
            <summary>
            To save storage space on each TreeNode, a number of boolean flags
            are combined here into a single value.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode">
            <summary>
            Represents state data about an item in a <see cref="T:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView" />.
            </summary>
            <remarks>
            Each TreeNode corresponds one-to-one with a data item in the hierarchy of the VirtualizingTreeView.
            The TreeNode.Item property references that item.
            </remarks>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.ExpansionSpinStartDelay">
            <summary>
            When expanding an item, wait 100 milliseconds before starting to show a busy animation.  This
            doesn't always flash the animation for fast expansion, but also doesn't wait a visible amount
            of time to start the animation.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.RefreshSpinStartDelay">
            <summary>
            When refreshing all items, wait 500 milliseconds before starting to show a busy animation.
            This avoids flashing briefly the busy animation on all items when expansion takes between 100
            and 500 milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.ChildNodes">
            <summary>
            Gets the immediately available child nodes of this node.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.DescendantNodes">
            <summary>
            Gets all descendant nodes realized in cachedChildNodes collections
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.Item">
            <summary>
            Gets the data item that this TreeNode is associated with.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.IsExpandable">
            <summary>
            This is a CLR property (and not a DependencyProperty) to allow lazy initialization.
            The first time the property is accessed, a Binding will be set up on the data model
            which will actually request the value from the data model, avoiding calculating
            expanability until the first access happens.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.IsExpandablePrivateProperty">
            <summary>
            This is a private DependencyProperty used to support a binding target from the data model.
            The public property is not associated with this DependencyProperty in name so that the 
            Binding created can be lazily initialized.  Otherwise, WPF will bind directly to the DependencyProperty
            and will bypass the CLR property entirely.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.IsPermanentlyExpandedRoot">
            <summary>
            Determines if this node is a root node in a tree that doesn't show
            root expanders.  If so, the node shouldn't be allowed to collapse.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.IsDefaultExpanded">
            <summary>
            Gets whether or not this node should be expanded by default when
            realizing that the node is expandable.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.IsExpansionVisible">
            <summary>
            Determines if the node is visible, and if its items are expanded,
            and if the containers for them should be already visible in the tree
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.TreeIndex">
            <summary>
            Gets the index of this item in the containing VirtualizingTreeView, or returns -1
            if the item is not in the tree.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.FindNearestVisibleNode">
            <summary>
            Find the closest visible node to this node.  The following algorithm is used:
            1. The node itself, if the node is still visible.
            2. The node's next visible sibling.
            3. The node's previous visible sibling's last visible descendant.
            4. The node's closest visible ancestor.
            </summary>
            <returns>The nearest visible node to this possibly-visible node, or null if no visible nodes remain.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.ExpandInternal">
            <summary>
            Expand without checking the IsExpanded property.
            This method is used by Expand, and is also used to insert items
            to an already-expanded node when a parent node is expanded.  If
            node A is collapsed, but child node B is expanded, then when A
            is expanded, B needs to expand its items as well.  Calling this
            method instead of Expand skips the IsExpanded check and adds
            the child items anyway.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.SyncChildNodes(System.Collections.IEnumerable)">
            <summary>
            Ensures that the cachedChildNodes collection is updated based on the new set of items,
            and ensures that items which are no longer children have their cached TreeNodes destroyed.
            </summary>
            <param name="newSource">The new source of items, which may be null to indicate no items.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.InsertItems(System.Int32,System.Collections.IEnumerable)">
            <summary>
            Inserts items into the VirtualizingTreeView
            </summary>
            <param name="index">The list-based index to insert items at.</param>
            <param name="items">The collection of items to insert.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.GetLastVisibleDescendantOrSelf">
            <summary>
            Gets the last visible descendant in this node's subtree, or returns this node itself.
            </summary>
            <returns>The last visible child recursively in this subtree, or this node if there are no visible children.</returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.AreItemsPlaceholders">
            <summary>
            Gets or sets whether or not this node's children are placeholder, or a bound collection
            of complete items.  When AreItemsPlaceholders is true, the ItemsSource collection is not
            a full collection, but only contains placeholders that have been added for filtering.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.PlaceholderChildItems">
            <summary>
            Gets the collection of placeholder items if this is a node with AreItemsPlaceholders set to true.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode.RestorePreviousExpansion(System.Collections.Generic.IEnumerable{Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode})">
            <summary>
            Expands the current items in the tree to match the expansion structure contained in the set of previousChildNodes.
            </summary>
            <param name="previousChildNodes">The TreeNode instances that were formerly childern of this node.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.GetDistinctSelection``1">
            <summary>
            Gets the set of distinct items that are selected.  The actual items in the tree
            are VirtualizingTreeView+TreeNode instances, which in the PivotTreeView
            have IAttachedCollectionSource instances as content.
            
            Additionally, an item may be selected multiple times in the same tree.  In this
            case, the item will map to multiple VirtualizingTreeView+TreeNode instances.
            This method deals with merging multiply-selected items into a single set.
            </summary>
            <typeparam name="TItem">The type of items to return.  Any instances selected
            that aren't of type TItem will be ignored and not returned.</typeparam>
            <returns>The set of items selected of type TItem.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.ItemCollectionConverter">
            <summary>
            Converts an IEnumerable of items into an ItemCollectionAdapter, a collection which can transform each item
            into a collection source.  The collection source is the object which can be bound to by the
            VirtualizingTreeView's IsExpandablePath and ItemsPath, and is retrieved using the ItemCollectionSourceAdapter property.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.PrioritizedItemsSourceComparer">
            <summary>
            An IComparer implementation that can compare two objects that may implement IPrioritizedComparable.
            IPrioritizedComparable objects should be ordered primarily on Priority, and secondarily on
            IComparable.CompareTo.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeViewAutomationPeer.GetChildPeers(Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeViewAutomationPeer,System.Collections.Generic.IEnumerable{Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode},System.Collections.Generic.IDictionary{Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode,System.Windows.Automation.Peers.AutomationPeer}@)">
            <summary>
            Gets the the collection of child automation peers corresponding to the given child tree nodes, re-using
            existing nodes from the given cache if possible, and updateing the cache with latest mapping.
            </summary>
            <param name="treeViewAutomationPeer">The tree view's automation peer</param>
            <param name="childNodes">The set of child nodes to compute child automation peers for</param>
            <param name="childPeerCache">
            The current map from child nodes to child automation peers, will be updated to the latest mapping
            </param>
            <returns>
            A collection of child automation peers corresponding to the given child tree nodes.
            </returns>
            <remarks>
            DevDiv VSO Bug 443955: 
                VSTFDEVDIV Changeset 268347 consumed newly exposed FindOrCreateItemAutomationPeer from WPF, but removed
            the equivalence of ItemsControlAutomationPeer::ItemPeers cache. (The corresponding changeset 229198 did not
            add support for the ItemsPeer cache to FindOrCreateItemAutomationPeer). Without this cache, all WPF uses is
            a weak-reference cache.
                As a result, for a large Solution Explorer view (&gt;1000 nodes), when UI Automation is activated
            (Narrator, remoting from touch enabled device), scrolling through Solution Explorer will cause heavy
            creation / GC'ing of automation peers on UI thread. This results in very bad stuttering.
                The fix is to bring back the item peers cache for Solution Explorer custom automation peers, using
            similar logic of ItemsControlAutomationPeer::GetChildrenCore, where each node has its own children map, and
            each call will replace the current map with a new one, re-using existing children peers if possible.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeViewAutomationPeer.FindOrCreateChildPeer(Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeViewAutomationPeer,Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode,System.Collections.Generic.IDictionary{Microsoft.Internal.VisualStudio.PlatformUI.IVirtualizingTreeNode,System.Windows.Automation.Peers.AutomationPeer})">
            <summary>
            Finds or creates an Automation Peer for the given child Tree Node, re-use one from cache if possible.
            </summary>
            <param name="treeViewAutomationPeer">The Tree View automation peer</param>
            <param name="childNode">The Tree Node to create Automation Peer for</param>
            <param name="childPeerCache">The cache of existing Automation Peers</param>
            <returns>An Automation Peer for the given child Tree Node.</returns>
            <remarks>
            DevDiv VSO Bug 443955:
                For virtualized Tree View, the number of visible Tree View Items
            (<see cref="T:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeViewItem" />) can be much smaller than the number of available Tree Nodes
            (<see cref="T:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeView.TreeNode" />). During scrolling, Tree View Items will be recycled to
            contain different Tree Nodes.
                For UI Automation to understand the tree view hierarchy, all available Tree Nodes must have Node
             Automation Peers (<see cref="T:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeViewItemAutomationPeer" />. The container Tree View Items have
             Wrapper Automation Peers (<see cref="T:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeViewItemWrapperAutomationPeer" />. The Wrapper Peers
             must be linked to the Node Peers using EventsSource property. During scrolling, UI Automation will keep
             asking for the full hierarchy of Node Automation Peers; then for each Node Automation Peer, check if there
             is a container Tree View Item displaying the corresponding node, and link the Peer with the Wrapper Peer.
                Prior to this bug's fix, Solution Navigator custom Automation Peers override GetChildrenCore to rely on
            <see cref="M:System.Windows.Automation.Peers.ItemsControlAutomationPeer.FindOrCreateItemAutomationPeer(System.Object)" /> to perform the look up.
            However, this lacks the direct child peer cache and causes performance issue when scrolling large solution,
            when the full hierarchy of Node Automation Peers kept getting created and disposed.
                A child peer cache was introduced to fix the performance issue. As a result, this code must also link
            Wrapper Peer (if exists) with Node Peer itself.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeViewItem.IsExpandable">
            <summary>
            Gets or sets whether or not this item can be expanded.
            Unlike a normal TreeViewItem, this value must be bound explicitly per item.  This is so that
            the Items collection doesn't have to be populated simply to tell if the expansion glyph should
            be shown.  Ideally, an extra property on HierarchicalDataTemplate could be used to bind this
            property, just like the ItemsSource is eventually bound to the HierarchicalDataTemplate.ItemsSource.
            Unfortunately, templates aren't currently extensible.  Thus, a Style needs to be used to bind
            this property to the data-specific property that can tell if the data item has child items.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeViewItemAutomationPeer.GetNodePositionInSet" -->
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeViewItemAutomationPeer.GetNodeSizeOfSet" -->
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeViewItemAutomationPeerFactoryProvider">
             <summary>
             This factory provider determines which type of factory to instantiate,
             based on currently running .NET Framework version, in order to create
             the correct implementation of <see cref="T:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeViewItemAutomationPeer" />.
             </summary>
             <remarks>
             This abstraction layer was introduced in order to fix a bug:
             https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1485509
             
             .NET Framework 4.8 added the ability to customize the "X of Y" that narrator reads
             by overriding newly introduced virtual methods GetPositionInSetCore and GetSizeOfSetCore
             on automation peer class.
             
             Unfortunately, we currently build against 4.72, so we cannot override these
             methods at compile time while still building an assembly compatible for 4.72.
             
             The solution is to use reflection emit APIs to dynamically generate a class
             that overrides these methods, when running on .NET Framework 4.8.
             
             The factory layer was introduced so that the creation of automation peer objects
             (which there could be thousands) can be done via an interface call on the factory object.
             The factory itself is the one created via late-binding, which is slower, but there is
             only one instance of that needed.
            
             Code is currently conditionally compiled for NET472, and those can be
             deleted once .NET Framework 4.72 is no longer being targeted:
             - Add the following overrides directly on VirtualizingTreeViewItemAutomationPeer class:
                protected override int GetPositionInSetCore() =&gt; GetNodePositionInSet();
                protected override int GetSizeOfSetCore() =&gt; GetNodeSizeOfSet();
             - Delete the IVirtualizingTreeViewItemAutomationPeerFactory interface
             - Delete the VirtualizingTreeViewItemAutomationPeerFactoryProvider class (all of this)
             - Instead of calling into this factory, make VirtualizingTreeViewAutomationPeer.CreateItemAutomationPeer
               instantiate VirtualizingTreeViewItemAutomationPeer directly
             </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VirtualizingTreeViewItemAutomationPeerFactoryProvider.GetOrCreateFactory">
            <summary>
            Returns a factory for creating item automation peer for tree view item.
            First caller will incur a performance hit
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.IVideoMetadataProvider">
            <summary>
            Provides the necessary metadata to allow a video to play
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.IVideoPlayerService">
            <summary>
            For Internal Use Only.
            Service that controls playing videos playing
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.IVideoPlayerService.OpenVideoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Opens and start playing the specified video.
            </summary>
            <param name="videoID">The video to play.</param>
            <param name="cancellationToken">Controls cancellation of the task.</param>
            <returns>A task that is complete when the video has been opened.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.AgileTaskBoardVideoDescription">
            <summary>
              Looks up a localized string similar to This short video shows how to use agile project management tools in Team Foundation Server and Visual Studio to plan your backlog, and coordinate work with your team..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.AgileTaskBoardVideoTitle">
            <summary>
              Looks up a localized string similar to Coordinate your team with agile project management.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.CodeCloneVideoDescription">
            <summary>
              Looks up a localized string similar to This short video shows how to search your code base for cloned code, including code that has been copy/pasted, and then manage these clones to improve your architecture..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.CodeCloneVideoTitle">
            <summary>
              Looks up a localized string similar to Finding and managing cloned code.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.CodedUITestVideoDescription">
            <summary>
              Looks up a localized string similar to This short video shows how to create programmatic user interface tests easily and reliably in Visual Studio..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.CodedUITestVideoTitle">
            <summary>
              Looks up a localized string similar to Easily testing user interfaces with Coded UI tests.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.CodeMapDebuggerDescription">
            <summary>
              Looks up a localized string similar to This short video introduces Code Map debugger integration, a new feature for debugging complex code in C#, VB, C++, JavaScript, and other languages without getting lost..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.CodeMapDebuggerTitle">
            <summary>
              Looks up a localized string similar to Debug visually with Code Map debugger integration.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.CodeReviewVideoDescription">
            <summary>
              Looks up a localized string similar to This short video shows how to use the Code Review feature to request and respond to code reviews without leaving Visual Studio..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.CodeReviewVideoTitle">
            <summary>
              Looks up a localized string similar to Using Code Review to improve quality.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.EnhancedTestingVideoDescription">
            <summary>
              Looks up a localized string similar to This short video introduces enhancements to testing features added in Visual Studio Ultimate 2012 Update 1..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.EnhancedTestingVideoTitle">
            <summary>
              Looks up a localized string similar to Enhanced features for testing software with Visual Studio.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.IntellitraceAVIcodeDescription">
            <summary>
              Looks up a localized string similar to Now developers and operations staff can collaborate on code running in production with Visual Studio Ultimate 2012 Update 1..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.IntellitraceAVIcodeTitle">
            <summary>
              Looks up a localized string similar to Monitor and improve your applications with System Center and IntelliTrace.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.IntellitraceVideoDescription">
            <summary>
              Looks up a localized string similar to This short video shows how to collect runtime data on running applications in production, and then analyze it to identify bugs and reproduction steps..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.IntellitraceVideoTitle">
            <summary>
              Looks up a localized string similar to Collecting and analyzing data in production.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.LabManagementVideoDescription">
            <summary>
              Looks up a localized string similar to This short video shows how to use lab management to create and manage consistent testing environments..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.LabManagementVideoTitle">
            <summary>
              Looks up a localized string similar to Managing lab environments for testing.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.LoadTestingVideoDescription">
            <summary>
              Looks up a localized string similar to This short video shows how to perform load testing of your application directly in Visual Studio..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.LoadTestingVideoTitle">
            <summary>
              Looks up a localized string similar to Load testing applications in Visual Studio.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.ManualTestingToolsDescription">
            <summary>
              Looks up a localized string similar to Visual Studio 2012 Update 2 releases several new features for quality enablement in the development process for testers. In addition to enhancing Microsoft Test Manager, Update 2 introduces Web-based test management features for manual testers enables several new testing scenarios like testing non-Windows applications, and executing test cases without installing test-specific tools. The new Test Hub enables the entire development team to view and edit test cases and lets stake holders walk through the case  [rest of string was truncated]";.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.ManualTestingToolsTitle">
            <summary>
              Looks up a localized string similar to New testing tools for manual testers.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.ManualTestingVideoDescription">
            <summary>
              Looks up a localized string similar to This short video shows how Microsoft Test Manager enables developers and testers to easily capture and reproduce reproduction steps and IntelliTrace logs for bugs found..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.ManualTestingVideoTitle">
            <summary>
              Looks up a localized string similar to Easily reproducing issues through manual testing.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.MyWorkVideoDescription">
            <summary>
              Looks up a localized string similar to This short video shows how to use My Work to suspend and resume multiple tasks efficiently in Visual Studio..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.MyWorkVideoTitle">
            <summary>
              Looks up a localized string similar to How to multi-task with My Work.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.ProgressionCodeMapDescription">
            <summary>
              Looks up a localized string similar to This short video introduces Code Map, a feature for visualizing and navigating complex code without getting lost..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.ProgressionCodeMapVideoTitle">
            <summary>
              Looks up a localized string similar to Understand design from code with Visual Studio code maps.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.ProgressionLayerDiagramDescription">
            <summary>
              Looks up a localized string similar to This short video shows how to design architectural layers in your product, and then validate them to ensure that components implement the intended architecture..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.ProgressionLayerDiagramVideoTitle">
            <summary>
              Looks up a localized string similar to Using layer diagrams to design and validate your architecture.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.ShareNames">
            <summary>
              Looks up a localized string similar to Facebook...;Twitter...;E-mail....
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.SharePointFakesDescription">
            <summary>
              Looks up a localized string similar to This short video explores several new features for SharePoint development introduced in Visual Studio Ultimate 2012 Update 1..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.SharePointFakesTitle">
            <summary>
              Looks up a localized string similar to Developing, testing, and production debugging for SharePoint.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.TestExplorerImprovementsDescription">
            <summary>
              Looks up a localized string similar to This short video introduces the new features that have been added to the Test Explorer in Visual Studio 2012 Updates 1 and 2. New features include grouping and filtering tests by Project, by Trait, or by Class. Also shown is the new Test Playlist feature..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.TestExplorerImprovementsTitle">
            <summary>
              Looks up a localized string similar to Improve unit testing workflow with these Test Explorer improvements.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.UnitTestingUltimateVideoDescription">
            <summary>
              Looks up a localized string similar to This short video shows how to run and manage unit tests from multiple providers in Visual Studio, and create fakes to bring complex systems under test..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.UnitTestingUltimateVideoTitle">
            <summary>
              Looks up a localized string similar to Improving quality with unit tests and fakes.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.UnitTestingVideoDescription">
            <summary>
              Looks up a localized string similar to This short video shows how to run and manage unit tests from multiple providers in Visual Studio..
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.PremiumVideoMetadata.UnitTestingVideoTitle">
            <summary>
              Looks up a localized string similar to Improving quality with unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.VideoLauncher.GetVideoServices(Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.IVideoProvider@,Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.IVideoPlayerService@)">
            <summary>
            Gets video services.  Used externally.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.VideoLauncherResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.VideoLauncherResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.VideoLauncherResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.VideoLauncherResources.DismissLinkText">
            <summary>
              Looks up a localized string similar to Don't show this again.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.VideoLauncherResources.HeaderStringFormat">
            <summary>
              Looks up a localized string similar to Streaming Video: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.VideoLauncherResources.ShowDescriptionText">
            <summary>
              Looks up a localized string similar to Show Video Description.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.VideoMetadata">
            <summary>
            Provides metadata for a video.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VideoLauncher.VideoStateHelper">
            <summary>
            This class is intended to make it easy to persist some state for each video, such as whether the video has been watched or dismissed.
            Use a unique state name (e.g. Watched, Dismissed, etc.) to identify the state you are interested in persisting.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.BackgroundDispatcher">
            <summary>
            Manages a collection of named dispatchers. Naming the dispatchers allows
            sharing of dispatchers between different components.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.BackgroundDispatcher.GetBackgroundDispatcher(System.String,System.Int32)">
            <summary>
            Get or create a dispatcher with the specified name.
            </summary>
            <param name="dispatcherName">The name of the thread/dispatcher (one will be created per unique name)</param>
            <param name="stackSize">Optional size of the stack to be used for new threads</param>
            <returns>The dispatcher associated with the name</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.BackgroundDispatcher.CreateDispatcher(System.Int32)">
            <summary>
            Creates the worker thread an associates a dispatcher.
            On exit, the Dispatcher is fully created.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.BackgroundDispatcher.OnApplicationExit(System.Object,System.Windows.ExitEventArgs)">
            <summary>
            Event handler for Application.Exit
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.BackgroundDispatcher.OnDispatcherShutdownStarted(System.Object,System.EventArgs)">
            <summary>
            Event handler for Dispatcher.ShutdownStarted
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.BackgroundDispatcher.HandleTerminationEvent">
            <summary>
            Shuts down the background dispatcher
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.BackgroundDispatcher.HookEvents">
            <summary>
            Hooks events of interest to this object
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.BackgroundDispatcher.UnhookEvents">
            <summary>
            Unhooks events of interest to this object
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.BackgroundDispatcher.ThreadProc(System.Object)">
            <summary>
            The background thread proc.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VisualTargetPresentationSource">
            <summary>
            This class is used to provide the surface to the Visual of the worker threaded UI.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VisualTargetPresentationSource.#ctor(System.Windows.Media.HostVisual)">
            <summary>
            Constructs the PresentationSource for the given HostVisual, which is the host for the root of the worker thread Visual tree.
            </summary>        
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VisualTargetPresentationSource.RootVisual">
            <summary>
            Gets/Sets the root of the worker thread Visual tree.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VisualTargetPresentationSource.IsDisposed">
            <summary>
            Returns true if the object has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VisualTargetPresentationSource.GetCompositionTargetCore">
            <summary>
            Returns the CompositionTarget that represents display surface of this PresentationSource.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VisualTargetPresentationSource.Dispose">
            <summary>
            Disposes of this object, releasing its VisualTarget.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VisualTargetPresentationSource.Dispose(System.Boolean)">
            <summary>
            Standard virtual overload for <see cref="T:System.IDisposable" /> pattern
            </summary>
            <param name="disposing">
            <c>True</c> means this is a call to <see cref="M:Microsoft.Internal.VisualStudio.PlatformUI.VisualTargetPresentationSource.Dispose" />.
            <c>False</c> means it has been called from the finalizer.
            </param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.VisualWrapper">
            <summary>
            This FrameworkElement wraps a single Child which is a Visual. This allows you to add a
            simple Visual as a child of one of the standard containers: StackPanel, Grid, Canvas, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VisualWrapper.Child">
            <summary>
            Read or write the visual to be wrapped.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.VisualWrapper.GetVisualChild(System.Int32)">
            <summary>
            Returns the Visual child at the given index. It is always the wrapped
            visual.
            </summary>
            <param name="index">Must be zero</param>
            <returns>The wrapped Visual</returns>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.VisualWrapper.VisualChildrenCount">
            <summary>
            The count of child visuals. Either zero or one depending on whether
            the Child property has been set.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer">
             <summary>
             This class is used to connect the UI elements in worker threads to Main Window. One key thing for this
             class is that, communications between main thread and worker thread are always accomplished with
             Dispatcher.BeginInvoke instead of Dispatcher.Invoke because sometimes these threads can run into deadlock
             situations as latter call wouldn't return unless Dispatcher processes it.
            
             For example first arrange pass of the main thread UI would cause the worker thread UI to arrange itself.
             as we delegate that to worker thread but then worker thread UI needs to access the data model properties
             which is handled by the across thread COM calls via window messages.
             </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.#ctor">
            <summary>
            Constructs the host of the root visual. The worker thread is started
            when the host is connected to a PresentationSource.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.CreateRootUIElement">
            <summary>
            Returns the root UIElement of the worker thread. This method will be called by the
            worker thread created by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.DispatcherGroup">
            <summary>
            Overriding the DispatcherGroup enables sharing of the worker thread
            between related elements. The base implementation creates a new
            thread for each WorkerThreadElementContainer instance.
            The DispatcherGroup name is also used to name the thread
            so that it is easy to find in a debugger.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.StackSize">
            <summary>
            The stack size for the worker thread in bytes. If zero, then the default
            stack size for managed threads is used.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.MeasureOverride(System.Windows.Size)">
            <summary>
            Dispatches a Measure pass while returning the latest DesiredSize. If the layout of the
            root UIElement changes then layout of this class is invalidated to accommodate that.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.ArrangeOverride(System.Windows.Size)">
            <summary>
            Dispatches an Arrange pass while returning the latest RenderSize. If the layout of the
            root UIElement changes then layout of this class is invalidated to accommodate that.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <summary>
            Returns the host visual as the hit target. This is required to listen to FrameworkElement
            property changes such as mouse clicks.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Forwards the inheritable Framework properties so that worker thread's UI can benefit from them.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.ShouldForwardPropertyChange(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Determine if a property changed event on the container should be forwarded to the inner control.
            Derived classes can supply their own logic. The base class rejects read-only properties and
            properties that are not inheritable.
            </summary>
            <param name="e">The property changed event arguments</param>
            <returns>true if the property change should be forwarded to the inner control.</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.ForwardPropertyChange(System.Windows.DependencyProperty,System.Object)">
            <summary>
            Forward a property change notification from the container to the contained
            UI element. If the contained UI element has not yet been created by the worker
            thread, then the forwarded property change is remembered and delevered when
            the element is eventually created.
            </summary>
            <param name="dp">The forwarded property</param>
            <param name="newValue">The new value of the forwarded property</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.OnPresentationSourceChanged(System.Object,System.Windows.SourceChangedEventArgs)">
            <summary>
            Called when this element is connected to a PresentationSource on the UI thread.  When the UI thread's
            PresentationSource is connected, it signals that the PresentationSource for the background thread should
            be initialized.  When the UI thread's PresentationSource is disconnected, it signals cleanup for the
            background thread's PresentationSource.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The information about the changed PresentationSource.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.CreateHostedVisualWorker">
            <summary>
            Called from the background thread to create a new hosted visual and hook it up
            to the appropriate presentation source.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.ConnectHostedVisualToSourceWorker">
            <summary>
            Called from the background thread to attach an already-initialized hosted visual to a new
            PresentationSource.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.ConnectHostedPresentationSource">
            <summary>
            Connects the hosted visual to a new PresentationSource.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.DisconnectHostedVisualFromSourceWorker">
            <summary>
            Called from the background thread to clean up the hosted PresentationSource.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.ForwardCachedProperties(System.Windows.Media.Visual)">
            <summary>
            Propagate property changes which occurred before the visual was created.
            </summary>
            <param name="visual">The newly-created visual</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.InnerMeasure(System.Windows.Size)">
            <summary>
            Called on the worker thread to handle measure requests forwarded from the
            container's thread.
            </summary>
            <param name="availableSize">The size passed to the container's MeasureOverride method</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.PlatformUI.WorkerThreadElementContainer.InnerArrange(System.Windows.Size)">
            <summary>
            Called on the worker thread to handle arrange requests forwarded from the
            container's thread.
            </summary>
            <param name="finalSize">The size passed to the container's ArrangeOverride method</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IOleComponent2Private">
            <summary>
            The following interface is implemented here to fix a problem in the Interop.9.0 definition where 
            the marshalling for GetWaitHandlesAndTimeout has an extra level of indirection on the handles argument
            which results in INVALID_HANDLE_VALUE errors in the message loop. Interop.9.0 decided not to fix this
            and thus we have IOleComponent2 defined here. All the methods with 'new' are required to keep the vtables
            aligned
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ComStreamFromDataStream">
            <summary>
            Adapts a managed stream into an OLE stream.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ComStreamFromDataStream.#ctor(System.IO.Stream)">
            <summary>
            Adapts the given stream to an OLE stream.  The stream is disposed when this object is disposed.
            </summary>
            <param name="stream">The stream to adapt to an OLE stream.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ComStreamFromDataStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Adapts the given stream to an OLE stream.
            </summary>
            <param name="stream">The stream to adapt to an OLE stream.</param>
            <param name="leaveOpen">If true, the stream will not be disposed when this object is disposed.</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.DataStreamFromComStream">
            <summary>
            This class implements a managed Stream object on top of a COM IStream
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.DisposableList">
            <summary>
            Simple collection that can dispose of its elements
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.DisposableList`1">
            <summary>
            Simple generic collection that can dispose of its elements
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.DefaultScopeAttribute">
            <summary>
            Defines whether this <see cref="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IScopeFilterFactory" />
            produces a <see cref="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler" /> which is a candidate for being selected by default.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.DefaultScopeAttribute.IsDefault">
            <summary>
            Whether produced <see cref="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler" /> is a candidate for being selected by default.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Internal.VisualStudio.Shell.ErrorList.FilterHandlerBase.PostInitialize" -->
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ErrorList.FilterHandlerBase.DetermineVisibility">
            <summary>
            Override when visibility has to be determined rather that always true
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ErrorList.FilterHandlerBase.OnActivated">
            <summary>
            Override when need to perform post-activation logic
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ErrorList.FilterHandlerBase.OnDeactivated">
            <summary>
            Override when need to perform post-deactivation logic
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.Initialize(Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListScopeFilterManager)">
            <summary>
            Initialize the handler and associating the handler with a manager.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.FilterDisplayName">
            <summary>
            The display name for the filter. Assumed to be unique.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.FilterId">
            <summary>
            Unique filter identifier
            </summary>
            <remarks>This value will be persisted when the filter scope changes in <see cref="N:Microsoft.Internal.VisualStudio.Shell.ErrorList" /></remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.GetFilter(System.String@)">
            <summary>
            Returns the filter for the current state of the handler
            </summary>
            <param name="displayText">The display text associated with the filter. Can be null.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.Active">
            <summary>
            Whether the handler is active 
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.Visible">
            <summary>
            Whether the handler is visible
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterFactory">
            <summary>
            Defines a MEF export for custom scope filters.
            </summary>
            <remarks>
            Implementations of this interface should have the:
            <code>[Export(typeof(IErrorListFilterFactory))]</code>
            attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterFactory.CreateFilter(System.Guid)">
            <summary>
            Create an instance of an <see cref="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler" /> for the toolwindow with the indicated Guid.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListScopeFilterManager.RequestUpdateFilter(Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler)">
            <summary>
            Queues a request to update the filter
            <seealso cref="M:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.GetFilter(System.String@)" />
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListScopeFilterManager.RequestUpdateFilterVisibility(Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler)">
            <summary>
            Queues a request to re-examine the specified filter visiblity
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IReplacingScopeFilterFactory">
            <summary>
            Defines a MEF export which supplies or replaces <see cref="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler" /> for <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl" />
            whose <see cref="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.Manager" />.<see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableManager.Identifier" /> matches
            theh wildcard expression provided by the <see cref="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.TableManagerIdentifierAttribute" />.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported
            as <see cref="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IScopeFilterFactory" /> with the following attributes:
            <example>
            <code>
            [Export(typeof(IScopeFilterFactory))]
            [TableManagerIdentifier("*")]
            [Replaces(PredefinedScopeFilterNames.AllItemsScopeFilter)]
            [Name("MyScopeFilter")]
            [Order(After = DefaultOrderings.Default)]
            </code>
            </example>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Internal.VisualStudio.Shell.ErrorList.IReplacingScopeFilterFactory.ReplaceFilter(Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl,System.String)" -->
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IScopeFilterFactory">
            <summary>
            Defines a MEF export which provides <see cref="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler" /> for <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl" />
            whose <see cref="P:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.Manager" />.<see cref="P:Microsoft.VisualStudio.Shell.TableManager.ITableManager.Identifier" /> matches
            theh wildcard expression provided by the <see cref="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.TableManagerIdentifierAttribute" />.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attributes:
            <example>
            <code>
            [Export(typeof(IScopeFilterFactory))]
            [TableManagerIdentifier("*")]
            [Name("MyScopeFilter")]
            [Order(After = PredefinedScopeFilterNames.AllItemsScopeFilter)]
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ErrorList.IScopeFilterFactory.CreateFilter(Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl)">
            <summary>
            Create an instance of an <see cref="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler" /> for provided <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl" />.
            </summary>
            <remarks>
            Typically, return <c>null</c> from <see cref="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IReplacingScopeFilterFactory" />.
            </remarks>
            <param name="tableControl">Reference to <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl" /> which builds the scope filters</param>
            <returns><see cref="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler" /> to add, or <c>null</c> if no addition is needed.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterIds">
            <summary>
            Defines IDs used as <see cref="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.FilterId" /> of default exported instances of <see cref="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IScopeFilterFactory" />.
            </summary>
            <remarks>
            These IDs need to be unique for different scopes to allow programmatic selection.
            </remarks>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterIds.EntireSolutionScopeFilter">
            <summary>
            <para>
            <see cref="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.FilterId" /> for scope filter
            identified by <see cref="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.EntireSolutionScopeFilter" />
            or <see cref="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.AllItemsScopeFilter" />.
            </para>
            <para>
            Equals <see cref="F:Microsoft.Internal.VisualStudio.Shell.Interop.__ERRORLISTFILTERSCOPE.ELFS_EntireSolution" />.
            </para>
            </summary>
            <remarks>
            Note that <see cref="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.EntireSolutionScopeFilter" />
            and <see cref="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.AllItemsScopeFilter" />
            share the ID because they mutually exclusive but functionally the same.
            </remarks>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterIds.CurrentProjectScopeFilter">
            <summary>
            <para>
            <see cref="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.FilterId" /> for scope filter
            identified by <see cref="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.CurrentProjectScopeFilter" />.
            </para>
            <para>
            Equals <see cref="F:Microsoft.Internal.VisualStudio.Shell.Interop.__ERRORLISTFILTERSCOPE.ELFS_CurrentProject" />.
            </para>
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterIds.CurrentDocumentScopeFilter">
            <summary>
            <para>
            <see cref="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.FilterId" /> for scope filter
            identified by <see cref="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.CurrentDocumentScopeFilter" />.
            </para>
            <para>
            Equals <see cref="F:Microsoft.Internal.VisualStudio.Shell.Interop.__ERRORLISTFILTERSCOPE.ELFS_CurrentDocument" />.
            </para>
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterIds.OpenDocumentsScopeFilter">
            <summary>
            <para>
            <see cref="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.FilterId" /> for scope filter
            identified by <see cref="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.OpenDocumentsScopeFilter" />.
            </para>
            <para>
            Equals <see cref="F:Microsoft.Internal.VisualStudio.Shell.Interop.__ERRORLISTFILTERSCOPE.ELFS_OpenDocuments" />.
            </para>
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterIds.ChangedDocumentsScopeFilter">
            <summary>
            <see cref="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.FilterId" /> for scope filter
            identified by <see cref="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.ChangedDocumentsScopeFilter" />.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterIds.LoadedSolutionScopeFilter">
            <summary>
            <see cref="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.FilterId" /> for scope filter
            identified by <see cref="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.LoadedSolutionScopeFilter" />.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterIds.EntireRepositoryScopeFilter">
            <summary>
            <see cref="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.FilterId" /> for scope filter
            identified by <see cref="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.EntireRepositoryScopeFilter" />.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterIds.EntireOrganizationScopeFilter">
            <summary>
            <see cref="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.FilterId" /> for scope filter
            identified by <see cref="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.EntireOrganizationScopeFilter" />.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterIds.AllSourcesScopeFilter">
            <summary>
            <see cref="P:Microsoft.Internal.VisualStudio.Shell.ErrorList.IErrorListFilterHandler.FilterId" /> for scope filter
            identified by <see cref="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.AllSourcesScopeFilter" />.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames">
            <summary>
            Defines names of default exported instances of <see cref="T:Microsoft.Internal.VisualStudio.Shell.ErrorList.IScopeFilterFactory" />.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.AllSourcesScopeFilter">
            <summary>
            This scope displays all items, and is used when an online item source is available.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.EntireOrganizationScopeFilter">
            <summary>
            This scope displays all items whose <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ItemOrigin" /> is at most <see cref="F:Microsoft.VisualStudio.Shell.TableManager.ItemOrigin.IndexedInOrganization" />.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.EntireRepositoryScopeFilter">
            <summary>
            This scope displays all items whose <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ItemOrigin" /> is at most <see cref="F:Microsoft.VisualStudio.Shell.TableManager.ItemOrigin.IndexedInRepo" />.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.LoadedSolutionScopeFilter">
            <summary>
            This scope displays all items whose <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ItemOrigin" /> is at most <see cref="F:Microsoft.VisualStudio.Shell.TableManager.ItemOrigin.ExactMetadata" />.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.EntireSolutionScopeFilter">
            <summary>
            This scope displays all items, and is used when a Solution is loaded.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.AllItemsScopeFilter">
            <summary>
            This scope displays all items, and is used when there is no Solution, e.g. Open Folder.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.CurrentProjectScopeFilter">
            <summary>
            This scope displays all items pertinent to the current project, identified through <see cref="F:Microsoft.VisualStudio.Shell.TableManager.StandardTableKeyNames.ProjectGuid" />.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.CurrentDocumentScopeFilter">
            <summary>
            This scope display all items pertinent to the current document.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.ChangedDocumentsScopeFilter">
            <summary>
            This scope display all items pertinent to changed documents.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.ErrorList.PredefinedScopeFilterNames.OpenDocumentsScopeFilter">
            <summary>
            This scope display all items pertinent to opened documents.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.Internal.VisualStudio.Shell.ErrorList.TableManagerIdentifierAttribute" -->
        <!-- Badly formed XML comment ignored for member "P:Microsoft.Internal.VisualStudio.Shell.ErrorList.TableManagerIdentifierAttribute.TableManagerIdentifier" -->
        <member name="M:Microsoft.Internal.VisualStudio.Shell.IReplaceablePane.ReplacePane(System.Object)">
            <summary>
            Replaces the current pane with a new pane.
            </summary>
            <param name="replacement">The replacement pane</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ReplacementEventArgs.OriginalPane">
            <summary>
            The original, replaceable pane
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ReplacementEventArgs.ReplacementPane">
            <summary>
            The pane to replace <see cref="P:Microsoft.Internal.VisualStudio.Shell.ReplacementEventArgs.OriginalPane" />
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.ReplacementEventArgs.Exception">
            <summary>
            The exception that occurred during creation of the replacement pane, if any
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.LazyImport">
            <summary>
            Creates a Lazy whose value is populated from the IComponentModel service, as if it were
            imported using the ImportAttribute.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.TestContracts.TestContractBulletin">
            <summary>
            The PubSub bulletin class that product code publishes whenever something needs to be broadcasted to a test contract.
            (Product code should only ever publish this type of bulletin.)
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TestContracts.TestContractBulletin.#ctor(System.String,System.String,System.Object)">
            <summary>
            Instantiates a TestContractBulletin.
            </summary>
            <param name="testContractName">
            The name of the test contract that should receive this bulletin.
            </param>
            <param name="message">
            The message to the test contract explaining what caused this bulletin to be generated.
            </param>
            <param name="payload">
            The data to be sent to the test contract.
            </param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TestContracts.TestContractBulletin.TestContractName">
            <summary>
            The name of the test contract that should receive this bulletin.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TestContracts.TestContractBulletin.Message">
            <summary>
            The message to the test contract explaining what caused this bulletin to be generated.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TestContracts.TestContractBulletin.Payload">
            <summary>
            The data to be sent to the test contract.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.TestContracts.TestContractErrorBulletin">
            <summary>
            The PubSub bulletin class that a test contract publishes when it encounters an error.
            (Test contracts are the only code that should publish this type of bulletin.)
            (Tests should always subscribe to this type of bulletin and fast fail upon receiving it.)
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TestContracts.TestContractErrorBulletin.#ctor(System.String,System.String)">
            <summary>
            Instantiates a TestContractErrorBulletin.
            </summary>
            <param name="testcontractName">
            The name of the test contract that is sending this bulletin.
            (This should match the metadata on the export from the test contract's TestContractBulletinHandler.)
            </param>
            <param name="errorString">
            The message describing the error that the test contract sending this message encountered.
            </param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TestContracts.TestContractErrorBulletin.TestContractName">
            <summary>
            The name of the test contract that is sending this bulletin.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TestContracts.TestContractErrorBulletin.ErrorString">
            <summary>
            The message describing the error that the test contract sending this message encountered.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.IProjectDesignerTabProviderMetadataInfo">
            <summary>
            Metadata interface that is used when importing tab providers.
            </summary>
            <remarks>
            The properties on this interface must be a superset of the properties on IProjectDesignerTabProviderMetadata in Microsoft.VisualStudio.TabDesigner.Embeddable
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.IProjectDesignerTabProviderMetadataInfo.AppliesTo">
            <summary>
            Gets the project capability that indicates where this export should be applied.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.IProjectDesignerTabProviderMetadataInfo.Order">
            <summary>
            Gets the order, where higher numbers are interpreted to mean more preferred.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.IProjectDesignerTabProviderMetadataInfo.NameResourceId">
            <summary>
            Name resource id is a # prefixed number like #110 where 110 corresponds to a package resource.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.IProjectDesignerTabProviderMetadataInfo.DescriptionResourceId">
            <summary>
            Description resource id is a # prefixed number like #110 where 110 corresponds to a package resource.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.IProjectDesignerTabProviderMetadataInfo.Id">
            <summary>
            Gets a unique id for the tab. For example, Microsoft.VisualStudio.ApplicationCapabilities.Overview
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.IProjectDesignerTabProviderMetadataInfo.PackageGuid">
            <summary>
            The package guid
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.IProjectDesignerTabProviderMetadataInfo.DesignerId">
            <summary>
            The unique id of the designer that this tab is applicable to. For example, Microsoft.VisualStudio.ApplicationCapabilities
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.IProjectDesignerTabProviderMetadataInfo.Specialization">
            <summary>
            Specialization is a value specified to indicate higher 
            specialization of a project flavor and will be used in tab selection.
            A higher specialization value will be selected over a lower specialization value
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.TableControl.BuildOrderId">
            <summary>
            Helper class to manage the build order IDs for errors.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.BuildOrderId.GenerateBuildOrderId">
            <summary>
            Generate an unique build order ID for an error.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.TableControl.BuildOrderId.ErrorBuildOrder">
            <summary>
            The build order ID that is used, by default, to sort errors in the error list. This value should only be provided
            for errors generated by a formal build.
            </summary>
            <remarks>
            <para>Expected value data type is an <see cref="T:System.UInt32" />.</para>
            <para>Use BuildOrderId.GenerateBuildOrderId() to generate IDs.</para>
            </remarks>   
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.TableControl.EntriesChangedEventArgs2">
            <summary>
            Event arguments for an <see cref="E:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl.EntriesChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.EntriesChangedEventArgs2.#ctor(System.Int32)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Internal.VisualStudio.Shell.TableControl.EntriesChangedEventArgs2" /> with the specified version number.
            </summary>
            <param name="versionNumber">Version number of the update.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.EntriesChangedEventArgs2.GetAllFilters">
            <summary>
            Get all filters that were active for this collection of results.
            </summary>
            <returns>The list of names and &amp; <see cref="T:ITableEntryFilter" />s.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.TableControl.EntryFilterDefinition">
            <summary>
            Provides additional information about <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IEntryFilter" />s.
            </summary>
            <remarks>
            <para>This is a MEF component part, and should be exported as:
            [Export(typeof(EntryFilterDefinition))]
            [Name(name of the filter)]
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.TableControl.EntryFilterDefinition.NonActionable">
            <summary>
            Filter with this attribute are used to filter out errors the user is not intending to fix (e.g. a baseline filter).
            </summary>
            <remarks>
            Errors hidden by filters with this attribute are not displayed in the total error/warning/message counts.
            </remarks>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.TableControl.EntryFilterDefinition.LocationSpecific">
            <summary>
            Filters with this attribute are use to filter out errors depending on the file or project in which the error is located (e.g. the current project filter).
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlCommands">
            <summary>
            Interface for <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl" /> commands
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlCommands.SelectNextEntryCommand">
            <summary>
            Command to select next entry item in <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl" />
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlCommands.SelectPrevEntryCommand">
            <summary>
            Command to select previous entry item in <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl" />
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTelemetryAliasTag">
            <summary>
            Interface that allows <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl" /> consumers to tag whether or not they would like telemetry to log names instead of Guids
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTelemetryAliasTag.Register(System.String)">
            <summary>
            Registers an alias for <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl" /> that will be used in logging telemetry data
            </summary>
            <param name="alias">An alias of the table control logged in telemetry</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTelemetryLogger.LogTableControlUsage(System.String,System.Int32,System.Int32,System.Collections.Generic.IList{System.Tuple{System.String,System.Int32,System.Int32}})">
            <summary>
            Logs telemetry data for table control usage. Logs only once during table control instance lifecycle.
            </summary>
            <param name="telemetryAlias">An alias of the feature consuming table control logged in telemetry</param>
            <param name="maxDataEntryCount">The max count of data entries in table control during the session</param>
            <param name="avgDataEntryCount">The average count of data entries in table control during the session</param>
            <param name="dataSourceUsageData">Data source specific usage data in form of &lt;dataSourceName, maxDataEntryCount, avgDataEntryCount&gt;</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTelemetryLogger.LogActionInfo(System.String,System.String,System.TimeSpan,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IList{System.Tuple{System.String,System.Int32,System.Int32}})">
            <summary>
            Logs telemetry data for user actions (e.g. filtering/sorting/grouping, etc) in the table control
            </summary>
            <param name="telemetryAlias">An alias of the feature consuming table control logged in telemetry</param>
            <param name="action">Name of the action</param>
            <param name="timeToCompleteAction">Time elapsed for the action from start to complete</param>
            <param name="totalDataEntryCount">Total number of data entries in table control at the momoent when action is performed</param>
            <param name="impactedDataEntryCount"> Number of data entries impacted by the action</param>
            <param name="actionContent">A list containing content of the action</param>
            <param name="dataSourceData">A list of tuples representing data source specific data in the form of &lt;dataSourceName,totalDataEntryCount, impactedDataEntryCount&gt;</param>
            <remarks>
            <para>
            The <paramref name="actionContent" /> depends on <paramref name="action" />.
            </para>
            <para>
            For filtering, the content is a list of columns where filters are set.
            </para>
            <para>
            For sorting, the content is a list of sorted columns
            </para>
            <para>
            For searching, <paramref name="actionContent" /> is null.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTelemetryLogger.LogVerticalContentInvocation(System.String,System.String,System.String)">
            <summary>
            Logs telemetry data for vertical content invocation
            </summary>
            <param name="telemetryAlias">An alias of the feature consuming table control logged in telemetry</param>
            <param name="entryProvider">The provider of the entry on which vertical content is invoked</param>
            <param name="invocationKind">How the vertical content is invoked</param>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract">
            <summary>
            Table control test contract interface
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.AllEntries">
            <summary>
            Gets all data entries in table control
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.FilteredAndSortedEntries">
            <summary>
            Gets data entries that are filtered out in table control
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.SelectionMode">
            <summary>
            Gets/sets the selection mode of the table control.  Default is Extended (multi-select with modifier).
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.SelectedEntries">
            <summary>
            Gets or sets entries selected in the control.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.SelectAll">
            <summary>
            Selects all entries.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.UnselectAll">
            <summary>
            Clears all the selection.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.GetSortableColumns">
            <summary>
            Gets a list of sortable columns
            </summary>
            <returns>A list of sortable columns</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.GetSortedColumns">
            <summary>
            Gets a list of sorted columns
            </summary>
            <returns>A list of sorted columns</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.Sort(System.String,Microsoft.Internal.VisualStudio.Shell.TableControl.SortStates)">
            <summary>
            Sorts data based on specified column and in specified sort order
            </summary>
            <param name="columnName">Column on which data are sorted</param>
            <param name="sortOrder">Sort order</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.Sort(System.String[],Microsoft.Internal.VisualStudio.Shell.TableControl.SortStates[])">
            <summary>
            Multi-sorts data based on specified columns and in specified sort orders
            </summary>
            <param name="columnNames">Columns on which data are sorted</param>
            <param name="sortOrders">Sort orders</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.GetFilterableColumns">
            <summary>
            Gets a list of filterable columns
            </summary>
            <returns>A list of filterable columns</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.GetActiveFilters">
            <summary>
            A list of the column keys with active filters.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.GetColumnFilters(System.String)">
            <summary>
            Gets a list of distinct values of the specified column that can be used to filter data
            </summary>
            <param name="columnName">Column whose dictinct values are returned</param>
            <returns>A list of distinct values from specified column</returns>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.SetColumnFilter(System.String,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Sets filters on specified columns to filter data
            </summary>
            <param name="columnName">Column where filters are set</param>
            <param name="filters">A list of distinct values serving as filters</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.ClearColumnFilter(System.String)">
            <summary>
            Clears filter on specified column
            </summary>
            <param name="columnName">Column whose filters are cleared</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.ITableControlTestContract.GetEntryHandle(Microsoft.VisualStudio.Shell.TableManager.ITableEntry)">
            <summary>
            Return the <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle" /> that corresponds to <paramref name="entry" />.
            </summary>
            <returns>The corresponding <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ITableEntryHandle" /> if one is found. Null otherwise.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.TableControl.IWpfTableControlProvider">
            <summary>
            Factory used to create instances of <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl" />s.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            <code>
            [Import]
            internal IWpfTableControlProvider tableControlProvider  { get; private set; }
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.IWpfTableControlProvider.CreateControl(System.String,System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Shell.TableControl.ColumnState},System.String[])">
            <summary>
            Create an instance of a table control using the data associated with the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager" /> created with the same name.
            </summary>
            <param name="identifier">Identifier of the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager" /> used to provide data for this instance of the table control.</param>
            <param name="autoSubscribe">Indicates whether the new <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl" /> will automatically subscribe to all data sources added to its <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager" />.</param>
            <param name="initialColumnStates">List of <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ColumnState" />s for each column in the table.</param>
            <param name="fixedColumns">List of columns that are displayed even if there are no <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource" /> requesting that column.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.IWpfTableControlProvider.CreateControl(Microsoft.VisualStudio.Shell.TableManager.ITableManager,System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Shell.TableControl.ColumnState},System.String[])">
            <summary>
            Create an instance of a table control using the data associated with the <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager" /> created with the same name.
            </summary>
            <param name="manager">The <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager" /> used to provide data for this instance of the table control.</param>
            <param name="autoSubscribe">Indicates whether the new <see cref="T:Microsoft.VisualStudio.Shell.TableControl.IWpfTableControl" /> will automatically subscribe to all data sources added to its <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableManager" />.</param>
            <param name="initialColumnStates">List of <see cref="T:Microsoft.VisualStudio.Shell.TableControl.ColumnState" />s for each column in the table.</param>
            <param name="fixedColumns">List of columns that are displayed even if there are no <see cref="T:Microsoft.VisualStudio.Shell.TableManager.ITableDataSource" /> requesting that column.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TableControl.IWpfTableControlProvider.GetFilterDefinition(System.String)">
            <summary>
            Returns the filter definition, if one has been created, for the specified <paramref name="filterName" />.
            </summary>
            <param name="filterName">Name of the desired filter.</param>
            <returns>The definition for the filter, if one has been exported, or a default definition if not.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.TableControl.SortStates">
            <summary>
            Sort state enum.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.TableControl.SortStates.None">
            <summary>
            No sort is applied.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.TableControl.SortStates.Ascending">
            <summary>
            Sort is in ascending order.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.TableControl.SortStates.Descending">
            <summary>
            Sort is in descending order.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.TelemetryHelper">
            <summary>
            Helper methods for using Visual Studio Telemetry library in managed code.
            </summary>
            <internalonly />
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TelemetryHelper.TelemetryService">
            <summary>
            [DEPRECATED] Please use class <see cref="T:Microsoft.VisualStudio.Telemetry.TelemetryService" />.
            To create data model event instance, use the class constructor directly. e.g, <see cref="T:Microsoft.VisualStudio.Telemetry.UserTaskEvent" />
            </summary>
            <remarks>
            Gets the telemetry service instance
            If called off the main thread, this property may block the calling thread for a UI thread switch.
            To avoid this, use the async methods instead.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TelemetryHelper.DefaultTelemetrySession">
            <summary>
            [DEPRECATED] Please use property <see cref="P:Microsoft.Internal.VisualStudio.Shell.TelemetryHelper.DataModelTelemetrySession" />.
            </summary>
            <remarks>
            Gets the default telemetry session for this instance.
            If called off the main thread, this property may block the calling thread for a UI thread switch.
            To avoid this, use the async methods instead.
            </remarks>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TelemetryHelper.DataModelTelemetrySession">
            <summary>
            Gets the default telemetry session for this instance.
            It can send data model events like <see cref="T:Microsoft.VisualStudio.Telemetry.UserTaskEvent" /> and <see cref="T:Microsoft.VisualStudio.Telemetry.OperationEvent" />.
            To expose data model extension methods, please add "using Microsoft.VisualStudio.Telemetry;" in code.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TelemetryHelper.GetTelemetryServiceAsync">
            <summary>
            [DEPRECATED] Please use class <see cref="T:Microsoft.VisualStudio.Telemetry.TelemetryService" />.
            </summary>
            <returns>A Task whose result is an instance of <see cref="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService" />.</returns>
            <devremarks>
            Gets the telemetry service.
            As an embeddable type, <see cref="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService" /> is unsuitable for use as a
            generic type argument because the CLR doesn't support it. If we use it here, any caller
            from another assembly will get a compiler error.
            </devremarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TelemetryHelper.GetDefaultTelemetrySessionAsync">
            <summary>
            [DEPRECATED] Please use property <see cref="P:Microsoft.Internal.VisualStudio.Shell.TelemetryHelper.DataModelTelemetrySession" />.
            </summary>
            <returns>A Task whose result is an instance of <see cref="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession" />.</returns>
            <devremarks>
            Gets the default telemetry session for this instance.
            As an embeddable type, <see cref="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetrySession" /> is unsuitable for use as a
            generic type argument because the CLR doesn't support it. If we use it here, any caller
            from another assembly will get a compiler error.
            </devremarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TelemetryHelper.CreateContext(System.String)">
            <summary>
            [DEPRECATED] Please use method <see cref="M:Microsoft.VisualStudio.Telemetry.TelemetrySession.CreateContext(System.String)" />
            </summary>
            <remarks>
            Create custom context
            If called off the main thread, this method may block the calling thread for a UI thread switch.
            To avoid this, use the async method instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TelemetryHelper.CreateContextAsync(System.String)">
            <summary>
            [DEPRECATED] Please use method <see cref="M:Microsoft.VisualStudio.Telemetry.TelemetrySession.CreateContext(System.String)" />
            </summary>
            <returns>A Task whose result is an instance of <see cref="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext" />.</returns>
            <devremarks>
            Create custom context
            As an embeddable type, <see cref="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryContext" /> is unsuitable for use as a
            generic type argument because the CLR doesn't support it. If we use it here, any caller
            from another assembly will get a compiler error.
            </devremarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TelemetryHelper.GetLazyValue``1(Microsoft.VisualStudio.Threading.AsyncLazy{``0})">
            <summary>
            Synchronously blocks the calling thread till an AsyncLazy value is available.
            </summary>
            <typeparam name="T">The type of value returned by the value factory.</typeparam>
            <param name="lazy">The lazy.</param>
            <returns>The constructed value.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.TelemetryActivity">
            <summary>
            Wrapper class for activities that managed start/end points by object lifetime.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.TelemetryActivity.TelemetryObject">
            <summary>
            Gets the activity to set properties.
            </summary>
            <remarks>Users of this helper class should not end or post the activity themselves
            as the lifetime is managed by this helper instance</remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TelemetryActivity.#ctor(System.String)">
            <summary>
            Creates and starts a new telemetry activity
            </summary>
            <param name="name">Name of the activity</param>
            <remarks>
            If called off the main thread, this constructor may block the calling thread for a UI thread switch.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TelemetryActivity.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates and starts a new telemetry activity that also raises code markers
            </summary>
            <param name="name">Name of the activity</param>
            <param name="startCodeMarker">Code marker to be raised at beginning of activity</param>
            <param name="endCodeMarker">Code marker to be raised at end of activity</param>
            <remarks>
            If called off the main thread, this constructor may block the calling thread for a UI thread switch.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TelemetryActivity.#ctor(System.String,System.Guid)">
            <summary>
            Creates and starts a new telemetry activity
            </summary>
            <param name="name">Name of the activity</param>
            <remarks>
            If called off the main thread, this constructor may block the calling thread for a UI thread switch.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TelemetryActivity.#ctor(System.String,System.Int32,System.Int32,System.Byte[],System.Guid)">
            <summary>
            Creates and starts a new telemetry activity that also raises code markers
            </summary>
            <param name="name">Name of the activity</param>
            <param name="startCodeMarker">Code marker to be raised at beginning of activity</param>
            <param name="endCodeMarker">Code marker to be raised at end of activity</param>
            <param name="codeMarkerData">Code marker extended data to be send at beginning of activity</param>
            <remarks>
            If called off the main thread, this constructor may block the calling thread for a UI thread switch.
            </remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TelemetryActivity.#ctor(Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService,System.String,System.Int32,System.Int32,System.Byte[],System.Guid)">
            <summary>
            Creates and starts a new telemetry activity that also raises code markers
            </summary>
            <param name="service">The telemetry service.</param>
            <param name="name">Name of the activity</param>
            <param name="startCodeMarker">Code marker to be raised at beginning of activity. May be 0.</param>
            <param name="endCodeMarker">Code marker to be raised at end of activity. May be 0.</param>
            <param name="codeMarkerData">Code marker extended data to be send at beginning of activity. May be null.</param>
            <param name="parentCorrelationId">The parent correlation ID. May be Guid.Empty.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TelemetryActivity.CreateAsync(System.String,System.Guid)">
            <summary>
            Creates and starts a new telemetry activity that also raises code markers
            </summary>
            <param name="name">Name of the activity</param>
            <param name="parentCorrelationId">The parent correlation ID. May be Guid.Empty.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TelemetryActivity.CreateAsync(System.String,System.Int32,System.Int32,System.Byte[],System.Guid)">
            <summary>
            Creates and starts a new telemetry activity that also raises code markers
            </summary>
            <param name="service">The telemetry service.</param>
            <param name="name">Name of the activity</param>
            <param name="startCodeMarker">Code marker to be raised at beginning of activity. May be 0.</param>
            <param name="endCodeMarker">Code marker to be raised at end of activity. May be 0.</param>
            <param name="codeMarkerData">Code marker extended data to be send at beginning of activity. May be null.</param>
            <param name="parentCorrelationId">The parent correlation ID. May be Guid.Empty.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TelemetryActivity.End(System.Byte[])">
            <summary>
            Ends the activity with sending extended code marker data with the end marker
            </summary>
            <param name="codeMarkerData"></param>
            <remarks>This method acts same as Dispose if the activity has no code markers set</remarks>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.TelemetryActivity.Dispose">
            <summary>
            Disposes the activity by ending and posting it
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.AutoFlatteningLinearGradient">
            <summary>
            Represents a linear gradient that automatically resolves to a single color when gradients are disabled.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.AutoFlatteningLinearGradient.#ctor(System.Object,System.Int32,System.Windows.Controls.Orientation,System.Int32[])">
            <summary>
            Constructs a Gradient instance.
            </summary>
            <param name="key">The key of the WPF LinearGradientBrush resource that will be created for this gradient.</param>
            <param name="baseColorID">The color ID that will be used if gradients are disabled.</param>
            <param name="orientation">The orientation of this gradient.</param>
            <param name="colorIDs">An array of VSCOLOR identifiers that are used for the color stops in this gradient.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.AutoFlatteningLinearGradient.#ctor(System.Object,System.Int32,System.Windows.Controls.Orientation,System.Double[],System.Int32[])">
            <summary>
            Constructs a Gradient instance.
            </summary>
            <param name="key">The key of the WPF LinearGradientBrush resource that will be created for this gradient.</param>
            <param name="baseColorID">The color ID that will be used if gradients are disabled.</param>
            <param name="orientation">The orientation of this gradient.</param>
            <param name="gradientStops">An array of offsets representing stops in the gradient associated with the VSCOLOR identifiers below.</param>
            <param name="colorIDs">An array of VSCOLOR identifiers that are used for the color stops in this gradient.</param>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.AutoFlatteningLinearGradient.Orientation">
            <summary>
            Gets the orientation of this gradient.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.AutoFlatteningLinearGradient.BaseColorID">
            <summary>
            Gets the VSCOLOR identifier that will be used for this gradient when
            gradients are disallowed.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.AutoFlatteningLinearGradient.ColorIDs">
            <summary>
            Gets the list of VSCOLOR identifiers used for the color stops on this gradient.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.AutoFlatteningLinearGradient.ColorStops">
            <summary>
            Gets the list of double offsets used to create gradient stops for this gradient.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ColorNameTranslator">
            <summary>
            Helper class used to translate between VSSYSCOLOR identifiers and ColorName
            structures.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.DeferredResourceDictionary">
            <summary>
            Represents a ResourceDictionary in which the Brush and Color values are defer-loaded
            based on values.  If the value of an key in the ResourceDictionary is a ThemeResourceKey,
            that key will be used to construct a SolidColorBrush or Color appropriate for that key.
            If the value of a key in the ResourceDictionary is a Gradient, that Gradient will
            be used to construct a LinearGradientBrush.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.DeferredResourceDictionary.ColorThemeService">
            <summary>
            Caches the color theme service on first access, to avoid repeated calls to QueryService.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.DeferredResourceDictionary.OnGettingValue(System.Object,System.Object@,System.Boolean@)">
            <summary>
            Represents a ResourceDictionary in which the Brush and Color values are defer-loaded
            based on values.  If the value of an key in the ResourceDictionary is a ThemeResourceKey,
            that key will be used to construct a SolidColorBrush or Color appropriate for that key.
            If the value of a key in the ResourceDictionary is a Gradient, that Gradient will
            be used to construct a LinearGradientBrush.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.DeferredResourceDictionary.GetRgbaColorValue(Microsoft.VisualStudio.Shell.ThemeResourceKey)">
            <summary>
            Return the RGBA color value for the specified theme resource key
            </summary>
            <param name="key"></param>
            <returns>RGBA color value</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.Gradient">
            <summary>
            Internal class used to store information about a single gradient.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.Gradient.Key">
            <summary>
            Gets the key of the WPF resource this gradient is associated with.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.Gradient.CreateBrush(System.Windows.ResourceDictionary)">
            <summary>
            Creates a Brush associated with this gradient.
            </summary>
            <returns>A Brush representing this gradient.</returns>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.LinearGradient">
            <summary>
            Represents a linear gradient that is always a gradient, regardless of whether or not EnvironmentRenderCapabilities.AreGradientsAllowed is true.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.LinearGradient.ColorKeys">
            <summary>
            Gets the list of color identifiers used for the color stops on this gradient.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.LinearGradient.Orientation">
            <summary>
            Gets the orientation of this gradient.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.VisualStudio.Shell.LinearGradient.ColorStops">
            <summary>
            Gets the list of double offsets used to create gradient stops for this gradient.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.VisualStudio.Shell.ResourceSynchronizer">
            <summary>
            Class used to keep the VS color table (accessed from IVsThemeManagerService)
            synchronized with a WPF ResourceDictionary that contains Color and Brush objects
            corresponding to those resources.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ResourceSynchronizer.UpdateValues">
            <summary>
            Updates the fonts, colors, and brushes if at least one value changed.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ResourceSynchronizer.UpdateCaptionFont">
            <summary>
            Updates only the caption font to synchronize the caption font with
            system metrics.  Because only three values are affected, this update is
            done in-place rather than replacing the entire ResourceDictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ResourceSynchronizer.AddFonts(System.Windows.ResourceDictionary)">
            <summary>
            Adds the environment font properties into a new ResourceDictionary.
            </summary>
            <param name="newResources">The new ResourceDictionary to populate.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ResourceSynchronizer.AddColorsAndBrushes(System.Windows.ResourceDictionary)">
            <summary>
            Adds the color and brush keys to a new ResourceDictionary, including texture brushes.
            </summary>
            <param name="newResources">The new ResourceDictionary to populate.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ResourceSynchronizer.AddSolidColorKeys(System.Windows.ResourceDictionary)">
            <summary>
            Adds the Color and SolidColorBrush keys to a new ResourceDictionary.
            </summary>
            <param name="newResources">The new ResourceDictionary to populate.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ResourceSynchronizer.AddGradientKeys(System.Windows.ResourceDictionary)">
            <summary>
            Adds the LinearGradientBrush values to a new ResourceDictionary.
            </summary>
            <param name="newResources">The new ResourceDictionary to populate.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ResourceSynchronizer.AddTextureBrushes(System.Windows.ResourceDictionary)">
            <summary>
            Adds the environment texture brush to the given ResourceDictionary.
            </summary>
            <param name="newResources">The ResourceDictionary to populate.</param>
        </member>
        <member name="M:Microsoft.Internal.VisualStudio.Shell.ResourceSynchronizer.AddPopupAnimations(System.Windows.ResourceDictionary)">
            <summary>
            Adds values for popup animation keys, which has the effect of making
            there be no PopupAnimation for controls that use the default resource binding.
            This is to disable by default all popup animations on menus and combo boxes
            for a perceived performance improvement.
            </summary>
            <param name="newResources">The ResourceDictionary to populate.</param>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Enabled">
            <summary>
            The atom is present. CodeMarkers are enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Disabled">
            <summary>
            The atom is not present, but InitPerformanceDll has not yet been called.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.DisabledDueToDllImportException">
            <summary>
            Disabled because the CodeMarkers transport DLL could not be found or
            an import failed to resolve.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.Performance.CodeMarkers.IsEnabled">
            <summary>
            Are CodeMarkers enabled? Note that even if IsEnabled returns false, CodeMarkers
            may still be enabled later in another component.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarker(System.Int32)">
            <summary>
            Sends a code marker event
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Byte[])">
            <summary>
            Sends a code marker event with additional user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="aBuff">User data buffer. May not be null.</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
            <exception cref="T:System.ArgumentNullException">aBuff was null</exception>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.SetStateDLLException">
            <summary>
            Used by ManagedPerfTrack.cs to report errors accessing the DLL.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Guid)">
            <summary>
            Sends a code marker event with additional Guid user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="guidData">The additional Guid to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.String)">
            <summary>
            Sends a code marker event with additional String user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="stringData">The additional String to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.StringToBytesZeroTerminated(System.String)">
            <summary>
            Converts a string into a byte buffer including a zero terminator (needed for proper ETW message formatting)
            </summary>
            <param name="stringData">String to be converted to bytes</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt32)">
            <summary>
            Sends a code marker event with additional DWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="uintData">The additional DWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt64)">
            <summary>
            Sends a code marker event with additional QWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="ulongData">The additional QWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.UsePrivateCodeMarkers(System.String,Microsoft.Win32.RegistryView)">
            <summary>
            Checks the registry to see if code markers are enabled
            </summary>
            <param name="regRoot">The registry root</param>
            <param name="registryView">The registry view.</param>
            <returns>Whether CodeMarkers are enabled in the registry</returns>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerStartEnd">
            <summary>
            Use CodeMarkerStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerExStartEnd">
            <summary>
            Use CodeMarkerExStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.  If you are using correlated
            codemarkers and providing your own event manifest, include two GUIDs (the correlation
            "marker" and the correlation ID itself) as the very first fields.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Used by C# 9 for property <c>init</c> accessors.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>6HK+BedXd0wXIQ6QAA4a84RL3/9VCKMlJDYaTzipGnA=</DigestValue></Reference></SignedInfo><SignatureValue>Y0H98A869VOaZd9+0I2ZzycluBlFkOYqFatTX2AFayFdM3b4kOG7LnuTLa1o5p/khyOmIZQwoJw24UsLzxNdv1UIu8XiJKWR2YsYL+7mB+qkK2R6BfanpAYXMIKzmOvtL5AwGjD5EIobP4IDTjAT9tBXEVOcbs+RB0HBWhf9OEOPJmHB/akm5qBqCdwDcB2b3Mu5iD6DNHLLvlxdCVQzA+jCMSn8kYdXE2Rep5rx1ha1Sx5v1cS7TxzkJm+ry10n4X2OnDGzlEc9qalCrk6dAYC9GmcPuIFz9i2JJ2jvdYMk7MYxeG8vO1JFiVHniY/22PeOE726WYutFut3rhLPhw==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>ok2x7OvGwA7zbnfezc3HT9M4dJka+FaQ7+vCqG40Bcm1QLlYIiDX/Whts0LVijaOvtl9iMeuShnAV7mchItKAVAABpyHuTuav2NCI9FsA8jFmlWndk3uK9RInNx1h1H4ojYxdBExyoN6muwwslKsLEfauUml7h5WAsDPpufTZd4yp2Jyiy384Zdd8CJlfQxfDe+gDZEciugWKHPSOoRxdjAk0GFm0OH14MyoYM4+M3mm1oH7vmSQohS5KIL3NEVW9Mdw7csTG5f93uORLvrJ/8ehFcGyWVb7UGHJnRhdcgGIbfiZzZlsAMS/DIBzM8RHKGNUNSbbLYmN/rt7pRjL4Q==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIF/zCCA+egAwIBAgITMwAAAsyOtZamvdHJTgAAAAACzDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMB4XDTIyMDUxMjIwNDYwMVoXDTIzMDUxMTIwNDYwMVowdDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAok2x7OvGwA7zbnfezc3HT9M4dJka+FaQ7+vCqG40Bcm1QLlYIiDX/Whts0LVijaOvtl9iMeuShnAV7mchItKAVAABpyHuTuav2NCI9FsA8jFmlWndk3uK9RInNx1h1H4ojYxdBExyoN6muwwslKsLEfauUml7h5WAsDPpufTZd4yp2Jyiy384Zdd8CJlfQxfDe+gDZEciugWKHPSOoRxdjAk0GFm0OH14MyoYM4+M3mm1oH7vmSQohS5KIL3NEVW9Mdw7csTG5f93uORLvrJ/8ehFcGyWVb7UGHJnRhdcgGIbfiZzZlsAMS/DIBzM8RHKGNUNSbbLYmN/rt7pRjL4QIDAQABo4IBfjCCAXowHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYBBQUHAwMwHQYDVR0OBBYEFIi4R40ylsyKlSKfrDNqzhx9da30MFAGA1UdEQRJMEekRTBDMSkwJwYDVQQLEyBNaWNyb3NvZnQgT3BlcmF0aW9ucyBQdWVydG8gUmljbzEWMBQGA1UEBRMNMjMwMDEyKzQ3MDUyOTAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzcitW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEGCCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAHgPA7DgB0udzEyB2LvG216zuskLUQ+iX8jFnl2i7tzXPDw5xXNXn2KvxdzBsf2osDW3LCdjFOwSjVkz+SUFQQNhjSHkd5knF6pzrL9V6lz72XiEg1Vi2gUM3HiLXSMIKOgdd78ZZJEmDLwdA692MO/1vVOFpOSv0QzpyBr5iqiotwMMsZVdZqXn8u9vRSmlk+3nQXdyOPoZXTGPLHXwz41kbSc4zI12bONTlDsLR3HD2s44wuyp3c72R8f9FVi/J9DU/+NOL37Z1yonzGZEuKdrAd6CvupAnLMlrIEv93mBsNRXuDDp4p9UYYK1taxzzgyUxgFDpluMHN0Oiiq9s73u7DA2XvbX8paJz8IZPe9a1/KhsOi5Kxhb99SCXiUnv2lGxnVAz5G6wAW1bzxJYKI+Xj90RKseY3X5EMO7TnVpIZ9Iw1IdrkHp/QLY90ZCch7kdBlLCVTFhSXZCDv4BcM6DhpRzbJsb6QDVfOv9aoG9aGV3a1EacyaedzLA2gWP6cTnCdAr4OrlrN5EFoCpOWgc77F/eQc3SLR06VTLVT1uKuNVxL2xZlD9Z+qC+a3TXa0zI/x1zEZNSgpLGsdVcaN6r/td3ArGQGkDWiAL7eS75LIWZA2SD//9B56uzZ1nmEd8+KBYsPTdp922/W2kFrlj7MBtA6vWE/ZG/grOKiC</X509Certificate><X509Certificate>MIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzQ==</X509Certificate><X509Certificate>MIIF7TCCA9WgAwIBAgIQP4vItfyfspZDtWnWbELhRDANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwMzIyMjIwNTI4WhcNMzYwMzIyMjIxMzA0WjCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCygEGqNThNE3IyaCJNuLLx/9VSvGzH9dJKjDbu0cJcfoyKrq8TKG/Ac+M6ztAlqFo6be+ouFmrEyNozQwph9FvgFyPRH9dkAFSWKxRxV8qh9zc2AodwQO5e7BW6KPeZGHCnvjzfLnsDbVU/ky2ZU+I8JxImQxCCwl8MVkXeQZ4KI2JOkwDJb5xalwL54RgpJki49KvhKSn+9GY7Qyp3pSJ4Q6g3MDOmT3qCFK7VnnkH4S6Hri0xElcTzFLh93dBWcmmYDgcRGjuKVB4qRTufcyKYMME782XgSzS0NHL2vikR7TmE/dQgfI6B0S/Jmpaz6SfsjWaTr8ZL22CZ3K/QwLopt3YEsDlKQwaRLWQi3BQUzK3Kr9j1uDRprZ/LHR47PJf0h6zSTwQY9cdNCssBAgBkm3xy0hyFfj0IbzA2j70M5xwYmZSmQBbP3sMJHPQTySx+W6hh1hhMdfgzlirrSSL0fzC/hV66AfWdC7dJse0Hbm8ukG1xDo+mTeacY1logC8Ea4PyeZb8txiSk190gWAjWP1Xl8TQLPX+uKg09FcYj5qQ1OcunCnAfPSRtOBA5jUYxe2ADBVSy2xuDCZU7JNDn1nLPEfuhhbhNfFcRf2X7tHc7uROzLLoax7Dj2cO2rXBPB2Q8Nx4CyVe0096yb5MPa50c8prWPMd/FS6/r8QIDAQABo1EwTzALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUci06AjGQQ7kUBU7h6qfHMdEjiTQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQELBQADggIBAH9yzw+3xRXbm8BJyiZb/p4T5tPw0tuXX/JLP02zrhmu7deXoKzvqTqjwkGw5biRnhOBJAPmCf0/V0A5ISRW0RAvS0CpNoZLtFNXmvvxfomPEf4YbFGq6O0JlbXlccmh6Yd1phV/yX43VF50k8XDZ8wNT2uoFwxtCJJ+i92Bqi1wIcM9BhS7vyRep4TXPw8hIr1LAAbblxzYXtTFC1yHblCk6MM4pPvLLMWSZpuFXst6bJN8gClYW1e1QGm6CHmmZGIVnYeWRbVmIyADixxzoNOieTPgUFmG2y/lAiXqcyqfABTINseSO+lOAOzYVgm5M0kS0lQLAausR7aRKX1MtHWAUgHoyoL2n8ysnI8X6i8msKtyrAv+nlEex0NVZ09Rs1fWtuzuUrc66U7h14GIvE+OdbtLqPA1qibUZ2dJsnBMO5PcHd94kIZysjik0dySTclY6ysSXNQ7roxrsIPlAT/4CTL2kzU0Iq/dNw13CYArzUgA8YyZGUcFAenRv9FO0OYoQzeZpApKCNmacXPSqs0xE2N2oTdvkjgefRI8ZjLny23h/FKJ3crWZgWalmG+oijHHKOnNlA8OqTfSm7mhzvO6/DggTedEzxSjr25HTTGHdUKaj2YKXCMiSrRq4IQSB/c9O+lxbtVGjhjhE63bK2VVOxlIhBJF7jAHscPrFRH</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIHFDCCBPygAwIBAgITMwAAAYwBl2JHNnZmOwABAAABjDANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0yMTEwMjgxOTI3NDRaFw0yMzAxMjYxOTI3NDRaMIHSMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOjg2REYtNEJCQy05MzM1MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA00hoTKET+SGsayw+9BFdm+uZ+kvEPGLd5sF8XlT3Uy4YGqT86+Dr8G3k6q/lRagixRKvn+g2AFRL9VuZqC1uTva7dZN9ChiotHHFmyyQZPalXdJTC8nKIrbgTMXAwh/mbhnmoaxsI9jGlivYgi5GNOE7u6TV4UOtnVP8iohTUfNMKhZaJdzmWDjhWC7LjPXIham9QhRkVzrkxfJKc59AsaGD3PviRkgHoGxfpdWHPPaW8iiEHjc4PDmCKluW3J+IdU38H+MkKPmekC7GtRTLXKBCuWKXS8TjZY/wkNczWNEo+l5J3OZdHeVigxpzCneskZfcHXxrCX2hue7qJvWrksFStkZbOG7IYmafYMQrZGull72PnS1oIdQdYnR5/ngcvSQb11GQ0kNMDziKsSd+5ifUaYbJLZ0XExNV4qLXCS65Dj+8FygCjtNvkDiB5Hs9I7K9zxZsUb7fKKSGEZ9yA0JgTWbcAPCYPtuAHVJ8UKaT967pJm7+r3hgce38VU39speeHHgaCS4vXrelTLiUMAl0Otk5ncKQKc2kGnvuwP2RCS3kEEFAxonwLn8pyedyreZTbBMQBqf1o3kj0ilOJ7/f/P3c1rnaYO01GDJomv7otpb5z+1hrSoIs8u+6eruJKCTihd0i/8bc67AKF76wpWuvW9BhbUMTsWkww4r42cCAwEAAaOCATYwggEyMB0GA1UdDgQWBBSWzlOGqYIhYIh5Vp0+iMrdQItSIzAfBgNVHSMEGDAWgBSfpxVdAF5iXYP05dJlpxtTNRnpcjBfBgNVHR8EWDBWMFSgUqBQhk5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgxKS5jcmwwbAYIKwYBBQUHAQEEYDBeMFwGCCsGAQUFBzAChlBodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NlcnRzL01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNydDAMBgNVHRMBAf8EAjAAMBMGA1UdJQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEBCwUAA4ICAQDXaMVFWMIJqdblQZK6oks7cdCUwePAmmEIedsyusgUMIQlQqajfCP9iG58yOFSRx2k59j2hABSZBxFmbkVjwhYEC1yJPQm9464gUz5G+uOW51i8ueeeB3h2i+DmoWNKNSulINyfSGgW6PCDCiRqO3qn8KYVzLzoemfPir/UVx5CAgVcEDAMtxbRrTHXBABXyCa6aQ3+jukWB5aQzLw6qhHhz7HIOU9q/Q9Y2NnVBKPfzIlwPjb2NrQGfQnXTssfFD98OpRHq07ZUx21g4ps8V33hSSkJ2uDwhtp5VtFGnF+AxzFBlCvc33LPTmXsczly6+yQgARwmNHeNA262WqLLJM84Iz8OS1VfE1N6yYCkLjg81+zGXsjvMGmjBliyxZwXWGWJmsovB6T6h1GrfmvMKudOE92D67SR3zT3DdA5JwL9TAzX8Uhi0aGYtn5uNUDFbxIozIRMpLVpP/YOLng+r2v8s8lyWv0afjwZYHBJ64MWVNxHcaNtjzkYtQjdZ5bhyka6dX+DtQD9bh3zji0SlrfVDILxEb6OjyqtfGj7iWZvJrb4AqIVgHQaDzguixES9ietFikHff6p97C5qobTTbKwN0AEP3q5teyI9NIOVlJl0gi5Ibd58Hif3JLO6vp+5yHXjoSL/MlhFmvGtaYmQwD7KzTm9uADF4BzP/mx2vw==</X509Certificate><X509Certificate>MIIHcTCCBVmgAwIBAgITMwAAABXF52ueAptJmQAAAAAAFTANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMjEwOTMwMTgyMjI1WhcNMzAwOTMwMTgzMjI1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAOThpkzntHIhC3miy9ckeb0O1YLT/e6cBwfSqWxOdcjKNVf2AX9sSuDivbk+F2Az/1xPx2b3lVNxWuJ+Slr+uDZnhUYjDLWNE893MsAQGOhgfWpSg0S3po5GawcU88V29YZQ3MFEyHFcUTE3oAo4bo3t1w/YJlN8OWECesSq/XJprx2rrPY2vjUmZNqYO7oaezOtgFt+jBAcnVL+tuhiJdxqD89d9P6OU8/W7IVWTe/dvI2k45GPsjksUZzpcGkNyjYtcI4xyDUoveO0hyTD4MmPfrVUj9z6BVWYbWg7mka97aSueik3rMvrg0XnRm7KMtXAhjBcTyziYrLNueKNiOSWrAFKu75xqRdbZ2De+JKRHh09/SDPc31BmkZ1zcRfNN0Sidb9pSB9fvzZnkXftnIv231fgLrbqn427DZM9ituqBJR6L8FA6PRc6ZNN3SUHDSCD/AQ8rdHGO2n6Jl8P0zbr17C89XYcz1DTsEzOUyOArxCaC4Q6oRRRuLRvWoYWmEBc8pnol7XKHYC4jMYctenIPDC+hIK12NvDMk2ZItboKaDIV1fMHSRlJTYuVD5C4lh8zYGNRiER9vcG9H9stQcxWv2XFJRXRLbJbqvUAV6bMURHXLvjflSxIUXk8A8FdsaN8cIFRg/eKtFtvUeh17aj54WcmnGrnu3tz5q4i6tAgMBAAGjggHdMIIB2TASBgkrBgEEAYI3FQEEBQIDAQABMCMGCSsGAQQBgjcVAgQWBBQqp1L+ZMSavoKRPEY1Kc8Q/y8E7jAdBgNVHQ4EFgQUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXAYDVR0gBFUwUzBRBgwrBgEEAYI3TIN9AQEwQTA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9Eb2NzL1JlcG9zaXRvcnkuaHRtMBMGA1UdJQQMMAoGCCsGAQUFBwMIMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fOmhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MA0GCSqGSIb3DQEBCwUAA4ICAQCdVX38Kq3hLB9nATEkW+Geckv8qW/qXBS2Pk5HZHixBpOXPTEztTnXwnE2P9pkbHzQdTltuw8x5MKP+2zRoZQYIu7pZmc6U03dmLq2HnjYNi6cqYJWAAOwBb6J6Gngugnue99qb74py27YP0h1AdkY3m2CDPVtI1TkeFN1JFe53Z/zjj3G82jfZfakVqr3lbYoVSfQJL1AoL8ZthISEV09J+BAljis9/kpicO8F7BUhUKz/AyeixmJ5/ALaoHCgRlCGVJ1ijbCHcNhcy4sa3tuPywJeBTpkbKpW99Jo3QMvOyRgNI95ko+ZjtPu4b6MhrZlvSP9pEB9s7GdP32THJvEKt1MMU0sHrYUP4KWN1APMdUbZ1jdEgssU5HLcEUBHG/ZPkkvnNtyo4JvbMBV0lUZNlz138eW0QBjloZkWsNn6Qo3GcZKCS6OEuabvshVGtqRRFHqfG3rsjoiV5PndLQTHa1V1QJsWkBRH58oWFsc/4Ku+xBZj1p/cvBQUl+fpO+y/g75LcVv7TOPqUxUYS8vwLBgqJ7Fx0ViY1w/ue10CgaiQuPNtq6TPmb/wrpNPgkNWcr4A245oyZ1uEi6vAnQj0llOZ0dFtq0Z4+7X6gMTN9vMvpe784cETRkPHIqzqKOghif9lwY1NNje6CbaUFEMFxBmoQtB1VM1izoXBm8g==</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">MIAGCSqGSIb3DQEHAqCAMIIW6gIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBWAYLKoZIhvcNAQkQAQSgggFHBIIBQzCCAT8CAQEGCisGAQQBhFkKAwEwMTANBglghkgBZQMEAgEFAAQgEnxNBhGwIlql5+w93NlA5+nzHatz60Wgp4heGywGkhcCBmLeZDLaLxgSMjAyMjA4MDQxMDM4MjEuNzZaMASAAgH0oIHYpIHVMIHSMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOjg2REYtNEJCQy05MzM1MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNloIIRZTCCBxQwggT8oAMCAQICEzMAAAGMAZdiRzZ2ZjsAAQAAAYwwDQYJKoZIhvcNAQELBQAwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwHhcNMjExMDI4MTkyNzQ0WhcNMjMwMTI2MTkyNzQ0WjCB0jELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IElyZWxhbmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjo4NkRGLTRCQkMtOTMzNTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBANNIaEyhE/khrGssPvQRXZvrmfpLxDxi3ebBfF5U91MuGBqk/Ovg6/Bt5Oqv5UWoIsUSr5/oNgBUS/Vbmagtbk72u3WTfQoYqLRxxZsskGT2pV3SUwvJyiK24EzFwMIf5m4Z5qGsbCPYxpYr2IIuRjThO7uk1eFDrZ1T/IqIU1HzTCoWWiXc5lg44Vguy4z1yIWpvUIUZFc65MXySnOfQLGhg9z74kZIB6BsX6XVhzz2lvIohB43ODw5gipbltyfiHVN/B/jJCj5npAuxrUUy1ygQrlil0vE42WP8JDXM1jRKPpeSdzmXR3lYoMacwp3rJGX3B18awl9obnu6ib1q5LBUrZGWzhuyGJmn2DEK2RrpZe9j50taCHUHWJ0ef54HL0kG9dRkNJDTA84irEnfuYn1GmGyS2dFxMTVeKi1wkuuQ4/vBcoAo7Tb5A4geR7PSOyvc8WbFG+3yikhhGfcgNCYE1m3ADwmD7bgB1SfFCmk/eu6SZu/q94YHHt/FVN/bKXnhx4GgkuL163pUy4lDAJdDrZOZ3CkCnNpBp77sD9kQkt5BBBQMaJ8C5/Kcnncq3mU2wTEAan9aN5I9IpTie/3/z93Na52mDtNRgyaJr+6LaW+c/tYa0qCLPLvunq7iSgk4oXdIv/G3OuwChe+sKVrr1vQYW1DE7FpMMOK+NnAgMBAAGjggE2MIIBMjAdBgNVHQ4EFgQUls5ThqmCIWCIeVadPojK3UCLUiMwHwYDVR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXwYDVR0fBFgwVjBUoFKgUIZOaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwGCCsGAQUFBwEBBGAwXjBcBggrBgEFBQcwAoZQaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgxKS5jcnQwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggrBgEFBQcDCDANBgkqhkiG9w0BAQsFAAOCAgEA12jFRVjCCanW5UGSuqJLO3HQlMHjwJphCHnbMrrIFDCEJUKmo3wj/YhufMjhUkcdpOfY9oQAUmQcRZm5FY8IWBAtciT0JveOuIFM+RvrjludYvLnnngd4dovg5qFjSjUrpSDcn0hoFujwgwokajt6p/CmFcy86Hpnz4q/1FceQgIFXBAwDLcW0a0x1wQAV8gmumkN/o7pFgeWkMy8OqoR4c+xyDlPav0PWNjZ1QSj38yJcD429ja0Bn0J107LHxQ/fDqUR6tO2VMdtYOKbPFd94UkpCdrg8IbaeVbRRpxfgMcxQZQr3N9yz05l7HM5cuvskIAEcJjR3jQNutlqiyyTPOCM/DktVXxNTesmApC44PNfsxl7I7zBpowZYssWcF1hliZrKLwek+odRq35rzCrnThPdg+u0kd809w3QOScC/UwM1/FIYtGhmLZ+bjVAxW8SKMyETKS1aT/2Di54Pq9r/LPJclr9Gn48GWBwSeuDFlTcR3GjbY85GLUI3WeW4cpGunV/g7UA/W4d844tEpa31QyC8RG+jo8qrXxo+4lmbya2+AKiFYB0Gg84LosREvYnrRYpB33+qfewuaqG002ysDdABD96ubXsiPTSDlZSZdIIuSG3efB4n9ySzur6fuch146Ei/zJYRZrxrWmJkMA+ys05vbgAxeAcz/5sdr8wggdxMIIFWaADAgECAhMzAAAAFcXna54Cm0mZAAAAAAAVMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgMjAxMDAeFw0yMTA5MzAxODIyMjVaFw0zMDA5MzAxODMyMjVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA5OGmTOe0ciELeaLL1yR5vQ7VgtP97pwHB9KpbE51yMo1V/YBf2xK4OK9uT4XYDP/XE/HZveVU3Fa4n5KWv64NmeFRiMMtY0Tz3cywBAY6GB9alKDRLemjkZrBxTzxXb1hlDcwUTIcVxRMTegCjhuje3XD9gmU3w5YQJ6xKr9cmmvHaus9ja+NSZk2pg7uhp7M62AW36MEBydUv626GIl3GoPz130/o5Tz9bshVZN7928jaTjkY+yOSxRnOlwaQ3KNi1wjjHINSi947SHJMPgyY9+tVSP3PoFVZhtaDuaRr3tpK56KTesy+uDRedGbsoy1cCGMFxPLOJiss254o2I5JasAUq7vnGpF1tnYN74kpEeHT39IM9zfUGaRnXNxF803RKJ1v2lIH1+/NmeRd+2ci/bfV+AutuqfjbsNkz2K26oElHovwUDo9Fzpk03dJQcNIIP8BDyt0cY7afomXw/TNuvXsLz1dhzPUNOwTM5TI4CvEJoLhDqhFFG4tG9ahhaYQFzymeiXtcodgLiMxhy16cg8ML6EgrXY28MyTZki1ugpoMhXV8wdJGUlNi5UPkLiWHzNgY1GIRH29wb0f2y1BzFa/ZcUlFdEtsluq9QBXpsxREdcu+N+VLEhReTwDwV2xo3xwgVGD94q0W29R6HXtqPnhZyacaue7e3PmriLq0CAwEAAaOCAd0wggHZMBIGCSsGAQQBgjcVAQQFAgMBAAEwIwYJKwYBBAGCNxUCBBYEFCqnUv5kxJq+gpE8RjUpzxD/LwTuMB0GA1UdDgQWBBSfpxVdAF5iXYP05dJlpxtTNRnpcjBcBgNVHSAEVTBTMFEGDCsGAQQBgjdMg30BATBBMD8GCCsGAQUFBwIBFjNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL0RvY3MvUmVwb3NpdG9yeS5odG0wEwYDVR0lBAwwCgYIKwYBBQUHAwgwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcnQwDQYJKoZIhvcNAQELBQADggIBAJ1VffwqreEsH2cBMSRb4Z5yS/ypb+pcFLY+TkdkeLEGk5c9MTO1OdfCcTY/2mRsfNB1OW27DzHkwo/7bNGhlBgi7ulmZzpTTd2YurYeeNg2LpypglYAA7AFvonoaeC6Ce5732pvvinLbtg/SHUB2RjebYIM9W0jVOR4U3UkV7ndn/OOPcbzaN9l9qRWqveVtihVJ9AkvUCgvxm2EhIRXT0n4ECWOKz3+SmJw7wXsFSFQrP8DJ6LGYnn8AtqgcKBGUIZUnWKNsIdw2FzLixre24/LAl4FOmRsqlb30mjdAy87JGA0j3mSj5mO0+7hvoyGtmW9I/2kQH2zsZ0/fZMcm8Qq3UwxTSwethQ/gpY3UA8x1RtnWN0SCyxTkctwRQEcb9k+SS+c23Kjgm9swFXSVRk2XPXfx5bRAGOWhmRaw2fpCjcZxkoJLo4S5pu+yFUa2pFEUep8beuyOiJXk+d0tBMdrVXVAmxaQFEfnyhYWxz/gq77EFmPWn9y8FBSX5+k77L+DvktxW/tM4+pTFRhLy/AsGConsXHRWJjXD+57XQKBqJC4822rpM+Zv/Cuk0+CQ1ZyvgDbjmjJnW4SLq8CdCPSWU5nR0W2rRnj7tfqAxM328y+l7vzhwRNGQ8cirOoo6CGJ/2XBjU02N7oJtpQUQwXEGahC0HVUzWLOhcGbyoYIC1DCCAj0CAQEwggEAoYHYpIHVMIHSMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOjg2REYtNEJCQy05MzM1MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNloiMKAQEwBwYFKw4DAhoDFQA0ovIU66v0PKKacHhsrmSzRCav1aCBgzCBgKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMA0GCSqGSIb3DQEBBQUAAgUA5pYRZjAiGA8yMDIyMDgwNDE3MzUzNFoYDzIwMjIwODA1MTczNTM0WjB0MDoGCisGAQQBhFkKBAExLDAqMAoCBQDmlhFmAgEAMAcCAQACAhTHMAcCAQACAhFtMAoCBQDml2LmAgEAMDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwKgCjAIAgEAAgMHoSChCjAIAgEAAgMBhqAwDQYJKoZIhvcNAQEFBQADgYEA1BdEl133z12bTFzRLf0EDcM6lnWuOqCkCLo5k3+Edxmu9twbIwn/Q6OVoIXJrzr6VaDWOw73jH859+O+KOjJAUYLBS9xJkWFp2BUmSMPWhPM/k+WQP19oEQbPzkKKsGAtz0hjrC+Py2lbGl80T/QVr9VbkT7jmxIPaaLNtSjRVUxggQNMIIECQIBATCBkzB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAYwBl2JHNnZmOwABAAABjDANBglghkgBZQMEAgEFAKCCAUowGgYJKoZIhvcNAQkDMQ0GCyqGSIb3DQEJEAEEMC8GCSqGSIb3DQEJBDEiBCD7enbb3w1sx7IoVEqSPwpPWgAOPkPJBT6UtUhTxbIGkDCB+gYLKoZIhvcNAQkQAi8xgeowgecwgeQwgb0EINWti/gVKpDPBn/E5iEFnYHik062FyMDqHzriYgYmGmeMIGYMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAAGMAZdiRzZ2ZjsAAQAAAYwwIgQgTtEZL1pH6oT9CX//td0qP5JzMAZhG8TWBOnkN1hOdxQwDQYJKoZIhvcNAQELBQAEggIAvuq29lsD/6uw/WiHjLZgUFNazc2eEOtSkGuaSCYPzXXkRFn8R12udhj0wdUoTbxscvt4ZReZMcAtBqp6Vp/qoHZfcIsfW277X4E+qH+x3C6aZHlkfR2u62aIHUMRR42Rft+AAv5qIfAHe+xivyKbczlIQJKPYMNjYb4K4Ne5gK2GNgfP7aRqqR+96HkdLh7ilW5RPm6d7fgYWPZ0Qvf06O9grW+myoyhuYW3oO9Rli9sXXvja1cRdQRwRehq7wO9gDPClBjvuLkBNZK50joMC/KFA9aqIUQxQpptAcDLPlz/FEkKVRp8vSD+OAO0i1msINgzm5FAp9SNNSz63TvQ3SqoIzsw9JkfObj0fvnHDTU1uny6Stx90tXjj2qOx08jZGg00fmOEmKczbpWK6+g5dq7Big/tb/tkEoRGzkkWuimD7IaMSwQVcj8RHPeAPLD99gzmogig2O+auoA3GPA1DD+6y8zJOVE3pRcsqPY0sfEK9Jy3PVEBiU5j5sqDMwXS8x4VwOrx002JSmHgd0Q0fOUfb2GCltbYutjoEFQ5aQVaBGgkfQ53kv3dUnw7ATkIy+jHetIi9fteaVqnKdYNCzDb+guyFywKhUZtCOz4AOIOUWqe3p7c0DxMOTTPPa4tL/+Uj0NZN279BZWUafKEdaGvP5jjnSMCroAyCYxuPIAAAAA</CounterSignature></Object></Signature></doc>
